/// <reference path="android-declarations.d.ts"/>

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module annotations {
        export class BackpressureKind {
          public static class: java.lang.Class<io.reactivex.rxjava3.annotations.BackpressureKind>;
          public static PASS_THROUGH: io.reactivex.rxjava3.annotations.BackpressureKind;
          public static FULL: io.reactivex.rxjava3.annotations.BackpressureKind;
          public static SPECIAL: io.reactivex.rxjava3.annotations.BackpressureKind;
          public static UNBOUNDED_IN: io.reactivex.rxjava3.annotations.BackpressureKind;
          public static ERROR: io.reactivex.rxjava3.annotations.BackpressureKind;
          public static NONE: io.reactivex.rxjava3.annotations.BackpressureKind;
          public static valueOf(param0: string): io.reactivex.rxjava3.annotations.BackpressureKind;
          public static values(): androidNative.Array<io.reactivex.rxjava3.annotations.BackpressureKind>;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module annotations {
        export class BackpressureSupport {
          public static class: java.lang.Class<io.reactivex.rxjava3.annotations.BackpressureSupport>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.annotations.BackpressureSupport interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { value(): io.reactivex.rxjava3.annotations.BackpressureKind });
          public constructor();
          public value(): io.reactivex.rxjava3.annotations.BackpressureKind;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module annotations {
        export class Beta {
          public static class: java.lang.Class<io.reactivex.rxjava3.annotations.Beta>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.annotations.Beta interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: {});
          public constructor();
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module annotations {
        export class CheckReturnValue {
          public static class: java.lang.Class<io.reactivex.rxjava3.annotations.CheckReturnValue>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.annotations.CheckReturnValue interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: {});
          public constructor();
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module annotations {
        export class Experimental {
          public static class: java.lang.Class<io.reactivex.rxjava3.annotations.Experimental>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.annotations.Experimental interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: {});
          public constructor();
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module annotations {
        export class NonNull {
          public static class: java.lang.Class<io.reactivex.rxjava3.annotations.NonNull>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.annotations.NonNull interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: {});
          public constructor();
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module annotations {
        export class Nullable {
          public static class: java.lang.Class<io.reactivex.rxjava3.annotations.Nullable>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.annotations.Nullable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: {});
          public constructor();
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module annotations {
        export class SchedulerSupport {
          public static class: java.lang.Class<io.reactivex.rxjava3.annotations.SchedulerSupport>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.annotations.SchedulerSupport interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { value(): string });
          public constructor();
          public static SINGLE: string;
          public static NEW_THREAD: string;
          public static IO: string;
          public static CUSTOM: string;
          public static COMPUTATION: string;
          public static NONE: string;
          public static TRAMPOLINE: string;
          public value(): string;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class BackpressureOverflowStrategy {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.BackpressureOverflowStrategy>;
          public static ERROR: io.reactivex.rxjava3.core.BackpressureOverflowStrategy;
          public static DROP_OLDEST: io.reactivex.rxjava3.core.BackpressureOverflowStrategy;
          public static DROP_LATEST: io.reactivex.rxjava3.core.BackpressureOverflowStrategy;
          public static values(): androidNative.Array<io.reactivex.rxjava3.core.BackpressureOverflowStrategy>;
          public static valueOf(param0: string): io.reactivex.rxjava3.core.BackpressureOverflowStrategy;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class BackpressureStrategy {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.BackpressureStrategy>;
          public static MISSING: io.reactivex.rxjava3.core.BackpressureStrategy;
          public static ERROR: io.reactivex.rxjava3.core.BackpressureStrategy;
          public static BUFFER: io.reactivex.rxjava3.core.BackpressureStrategy;
          public static DROP: io.reactivex.rxjava3.core.BackpressureStrategy;
          public static LATEST: io.reactivex.rxjava3.core.BackpressureStrategy;
          public static values(): androidNative.Array<io.reactivex.rxjava3.core.BackpressureStrategy>;
          public static valueOf(param0: string): io.reactivex.rxjava3.core.BackpressureStrategy;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export abstract class Completable extends io.reactivex.rxjava3.core.CompletableSource {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.Completable>;
          public blockingSubscribe(): void;
          public timeout(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Completable;
          public static switchOnNextDelayError(param0: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Completable;
          public toSingle(param0: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Single<any>;
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.core.Completable;
          public timeout(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Completable;
          public static never(): io.reactivex.rxjava3.core.Completable;
          public static timer(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Completable;
          public static concatArrayDelayError(param0: androidNative.Array<io.reactivex.rxjava3.core.CompletableSource>): io.reactivex.rxjava3.core.Completable;
          public delaySubscription(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Completable;
          public toFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
          public static merge(param0: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Completable;
          public toCompletionStage(param0: any): java.util.concurrent.CompletionStage;
          public takeUntil(param0: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Completable;
          public constructor();
          public safeSubscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
          public subscribeOn(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Completable;
          public onTerminateDetach(): io.reactivex.rxjava3.core.Completable;
          public onErrorReturn(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public onErrorResumeWith(param0: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Completable;
          public observeOn(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Completable;
          public delay(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: boolean): io.reactivex.rxjava3.core.Completable;
          public toSingleDefault(param0: any): io.reactivex.rxjava3.core.Single<any>;
          public retry(): io.reactivex.rxjava3.core.Completable;
          public static fromSingle(param0: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Completable;
          public blockingSubscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): void;
          public timeout(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Completable;
          public static concatDelayError(param0: org.reactivestreams.Publisher<any>, param1: number): io.reactivex.rxjava3.core.Completable;
          public subscribeWith(param0: io.reactivex.rxjava3.core.CompletableObserver): io.reactivex.rxjava3.core.CompletableObserver;
          public startWith(param0: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public to(param0: io.reactivex.rxjava3.core.CompletableConverter<any>): any;
          public static mergeDelayError(param0: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Completable;
          public retry(param0: number): io.reactivex.rxjava3.core.Completable;
          public hide(): io.reactivex.rxjava3.core.Completable;
          public static mergeDelayError(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Completable;
          public toMaybe(): io.reactivex.rxjava3.core.Maybe<any>;
          public retryUntil(param0: io.reactivex.rxjava3.functions.BooleanSupplier): io.reactivex.rxjava3.core.Completable;
          public static wrap(param0: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Completable;
          public doAfterTerminate(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Completable;
          public static concat(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Completable;
          public andThen(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static create(param0: io.reactivex.rxjava3.core.CompletableOnSubscribe): io.reactivex.rxjava3.core.Completable;
          public static mergeArray(param0: androidNative.Array<io.reactivex.rxjava3.core.CompletableSource>): io.reactivex.rxjava3.core.Completable;
          public static fromMaybe(param0: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Completable;
          public materialize(): io.reactivex.rxjava3.core.Single<any>;
          public repeatUntil(param0: io.reactivex.rxjava3.functions.BooleanSupplier): io.reactivex.rxjava3.core.Completable;
          public delay(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Completable;
          public toObservable(): io.reactivex.rxjava3.core.Observable<any>;
          public retryWhen(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
          public static defer(param0: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Completable;
          public startWith(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public doOnLifecycle(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Completable;
          public static fromCallable(param0: java.util.concurrent.Callable<any>): io.reactivex.rxjava3.core.Completable;
          public doOnDispose(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Completable;
          public doOnError(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Completable;
          public toFuture(): java.util.concurrent.Future<java.lang.Void>;
          public test(param0: boolean): io.reactivex.rxjava3.observers.TestObserver<java.lang.Void>;
          public repeatWhen(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
          public repeat(param0: number): io.reactivex.rxjava3.core.Completable;
          public static error(param0: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Completable;
          public static timer(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Completable;
          public static amb(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Completable;
          public andThen(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public doOnTerminate(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Completable;
          public unsubscribeOn(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Completable;
          public concatWith(param0: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Completable;
          public static using(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Completable;
          public andThen(param0: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static switchOnNext(param0: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Completable;
          public compose(param0: io.reactivex.rxjava3.core.CompletableTransformer): io.reactivex.rxjava3.core.Completable;
          public delaySubscription(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Completable;
          public static concat(param0: org.reactivestreams.Publisher<any>, param1: number): io.reactivex.rxjava3.core.Completable;
          public ambWith(param0: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Completable;
          public lift(param0: io.reactivex.rxjava3.core.CompletableOperator): io.reactivex.rxjava3.core.Completable;
          public blockingAwait(param0: number, param1: java.util.concurrent.TimeUnit): boolean;
          public static merge(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Completable;
          public blockingSubscribe(param0: io.reactivex.rxjava3.functions.Action): void;
          public test(): io.reactivex.rxjava3.observers.TestObserver<java.lang.Void>;
          public andThen(param0: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Single<any>;
          public static fromPublisher(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Completable;
          public startWith(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static unsafeCreate(param0: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Completable;
          public static fromSupplier(param0: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Completable;
          public static mergeArrayDelayError(param0: androidNative.Array<io.reactivex.rxjava3.core.CompletableSource>): io.reactivex.rxjava3.core.Completable;
          public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public delay(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Completable;
          public startWith(param0: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Completable;
          public blockingSubscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
          public onErrorResumeNext(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
          public onErrorReturnItem(param0: any): io.reactivex.rxjava3.core.Maybe<any>;
          public mergeWith(param0: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Completable;
          public static concat(param0: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Completable;
          public static mergeDelayError(param0: org.reactivestreams.Publisher<any>, param1: number): io.reactivex.rxjava3.core.Completable;
          public andThen(param0: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Completable;
          public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
          public blockingAwait(): void;
          public timeout(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Completable;
          public doOnSubscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Completable;
          public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
          public retry(param0: number, param1: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Completable;
          public static using(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Consumer<any>, param3: boolean): io.reactivex.rxjava3.core.Completable;
          public doFinally(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Completable;
          public static error(param0: java.lang.Throwable): io.reactivex.rxjava3.core.Completable;
          public static fromCompletionStage(param0: java.util.concurrent.CompletionStage<any>): io.reactivex.rxjava3.core.Completable;
          public onErrorComplete(): io.reactivex.rxjava3.core.Completable;
          public retry(param0: io.reactivex.rxjava3.functions.BiPredicate<any, any>): io.reactivex.rxjava3.core.Completable;
          public static complete(): io.reactivex.rxjava3.core.Completable;
          public static sequenceEqual(param0: io.reactivex.rxjava3.core.CompletableSource, param1: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Completable;
          public startWith(param0: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
          public retry(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Completable;
          public static concatDelayError(param0: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Completable;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.core.Completable;
          public static fromObservable(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Completable;
          public onErrorComplete(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Completable;
          public repeat(): io.reactivex.rxjava3.core.Completable;
          public static merge(param0: org.reactivestreams.Publisher<any>, param1: number): io.reactivex.rxjava3.core.Completable;
          public doOnComplete(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Completable;
          public static ambArray(param0: androidNative.Array<io.reactivex.rxjava3.core.CompletableSource>): io.reactivex.rxjava3.core.Completable;
          public doOnEvent(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Completable;
          public static concatArray(param0: androidNative.Array<io.reactivex.rxjava3.core.CompletableSource>): io.reactivex.rxjava3.core.Completable;
          public static concatDelayError(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Completable;
          public cache(): io.reactivex.rxjava3.core.Completable;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class CompletableConverter<R> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.CompletableConverter<any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.CompletableConverter<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: io.reactivex.rxjava3.core.Completable): R });
          public constructor();
          public apply(param0: io.reactivex.rxjava3.core.Completable): R;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class CompletableEmitter {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.CompletableEmitter>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.CompletableEmitter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { onComplete(): void; onError(param0: java.lang.Throwable): void; setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void; setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void; isDisposed(): boolean; tryOnError(param0: java.lang.Throwable): boolean });
          public constructor();
          public isDisposed(): boolean;
          public tryOnError(param0: java.lang.Throwable): boolean;
          public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public onComplete(): void;
          public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
          public onError(param0: java.lang.Throwable): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class CompletableObserver {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.CompletableObserver>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.CompletableObserver interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void; onComplete(): void; onError(param0: java.lang.Throwable): void });
          public constructor();
          public onComplete(): void;
          public onError(param0: java.lang.Throwable): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class CompletableOnSubscribe {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.CompletableOnSubscribe>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.CompletableOnSubscribe interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { subscribe(param0: io.reactivex.rxjava3.core.CompletableEmitter): void });
          public constructor();
          public subscribe(param0: io.reactivex.rxjava3.core.CompletableEmitter): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class CompletableOperator {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.CompletableOperator>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.CompletableOperator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: io.reactivex.rxjava3.core.CompletableObserver): io.reactivex.rxjava3.core.CompletableObserver });
          public constructor();
          public apply(param0: io.reactivex.rxjava3.core.CompletableObserver): io.reactivex.rxjava3.core.CompletableObserver;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class CompletableSource {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.CompletableSource>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.CompletableSource interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void });
          public constructor();
          public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class CompletableTransformer {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.CompletableTransformer>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.CompletableTransformer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: io.reactivex.rxjava3.core.Completable): io.reactivex.rxjava3.core.CompletableSource });
          public constructor();
          public apply(param0: io.reactivex.rxjava3.core.Completable): io.reactivex.rxjava3.core.CompletableSource;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class Emitter<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.Emitter<any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.Emitter<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { onNext(param0: T): void; onError(param0: java.lang.Throwable): void; onComplete(): void });
          public constructor();
          public onComplete(): void;
          public onNext(param0: T): void;
          public onError(param0: java.lang.Throwable): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export abstract class Flowable<T> extends org.reactivestreams.Publisher<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.Flowable<any>>;
          public singleStage(param0: any): java.util.concurrent.CompletionStage<any>;
          public static generate(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public delaySubscription(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
          public blockingSubscribe(): void;
          public takeLast(param0: number, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
          public static mergeDelayError(param0: java.lang.Iterable<any>, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public onBackpressureBuffer(param0: number, param1: boolean, param2: boolean, param3: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Flowable<any>;
          public replay(param0: number, param1: boolean): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
          public skipUntil(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public static bufferSize(): number;
          public blockingForEach(param0: io.reactivex.rxjava3.functions.Consumer<any>): void;
          public timeout(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
          public distinct(): io.reactivex.rxjava3.core.Flowable<any>;
          public observeOn(param0: io.reactivex.rxjava3.core.Scheduler, param1: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public constructor();
          public flatMapSingle(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean, param2: number): io.reactivex.rxjava3.core.Flowable<any>;
          public timeInterval(): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public window(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
          public flatMapMaybe(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static concatArrayEagerDelayError(param0: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.core.Flowable<any>;
          public window(param0: org.reactivestreams.Publisher, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public buffer(param0: number, param1: java.util.concurrent.TimeUnit, param2: number): io.reactivex.rxjava3.core.Flowable<java.util.List<any>>;
          public static sequenceEqual(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: io.reactivex.rxjava3.functions.BiPredicate<any, any>, param3: number): io.reactivex.rxjava3.core.Single<any>;
          public window(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: number, param4: boolean): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
          public take(param0: number): io.reactivex.rxjava3.core.Flowable<any>;
          public withLatestFrom(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: org.reactivestreams.Publisher, param3: io.reactivex.rxjava3.functions.Function4<any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static sequenceEqual(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: io.reactivex.rxjava3.functions.BiPredicate<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public replay(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
          public debounce(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public replay(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number, param2: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public lift(param0: io.reactivex.rxjava3.core.FlowableOperator<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public onBackpressureDrop(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public retryWhen(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static merge(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public filter(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public compose(param0: io.reactivex.rxjava3.core.FlowableTransformer<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public skipWhile(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public groupBy(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean, param3: number): io.reactivex.rxjava3.core.Flowable<any>;
          public window(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public blockingSubscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): void;
          public parallel(param0: number): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public static just(param0: any, param1: any, param2: any, param3: any, param4: any, param5: any, param6: any, param7: any, param8: any): io.reactivex.rxjava3.core.Flowable<any>;
          public static fromStream(param0: java.util.stream.Stream): io.reactivex.rxjava3.core.Flowable<any>;
          public throttleFirst(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
          public blockingSingle(): any;
          public forEach(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public flatMapCompletable(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean, param2: number): io.reactivex.rxjava3.core.Completable;
          public doOnEach(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, param2: boolean, param3: number): io.reactivex.rxjava3.core.Flowable<any>;
          public takeLast(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
          public buffer(param0: number, param1: number): io.reactivex.rxjava3.core.Flowable<java.util.List<any>>;
          public concatMapEagerDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean, param2: number, param3: number): io.reactivex.rxjava3.core.Flowable<any>;
          public groupBy(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public join(param0: org.reactivestreams.Publisher, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Function<any, any>, param3: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static error(param0: java.lang.Throwable): io.reactivex.rxjava3.core.Flowable<any>;
          public static zip(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, param3: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public blockingFirst(): any;
          public scanWith(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, param2: number): io.reactivex.rxjava3.core.Flowable<any>;
          public static mergeArrayDelayError(param0: number, param1: number, param2: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.core.Flowable<any>;
          public concatMapIterable(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public timestamp(param0: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public switchMapDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public replay(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
          public static switchOnNextDelayError(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public blockingSubscribe(param0: org.reactivestreams.Subscriber<any>): void;
          public concatMapSingleDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean, param2: number): io.reactivex.rxjava3.core.Flowable<any>;
          public replay(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public replay(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number, param2: number, param3: java.util.concurrent.TimeUnit, param4: io.reactivex.rxjava3.core.Scheduler, param5: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public window(param0: number, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
          public onBackpressureDrop(): io.reactivex.rxjava3.core.Flowable<any>;
          public window(param0: number, param1: java.util.concurrent.TimeUnit, param2: number): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
          public static fromOptional(param0: java.util.Optional): io.reactivex.rxjava3.core.Flowable<any>;
          public share(): io.reactivex.rxjava3.core.Flowable<any>;
          public toSortedList(): io.reactivex.rxjava3.core.Single<java.util.List<any>>;
          public subscribeOn(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
          public cache(): io.reactivex.rxjava3.core.Flowable<any>;
          public static concatEagerDelayError(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public blockingFirst(param0: any): any;
          public serialize(): io.reactivex.rxjava3.core.Flowable<any>;
          public delaySubscription(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
          public concatWith(param0: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public firstOrError(): io.reactivex.rxjava3.core.Single<any>;
          public concatMapSingle(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public static concatEager(param0: java.lang.Iterable<any>, param1: number, param2: number): io.reactivex.rxjava3.core.Flowable<any>;
          public static fromPublisher(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public sample(param0: org.reactivestreams.Publisher, param1: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public switchMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public timeInterval(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public static concat(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public switchMapCompletable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
          public window(param0: number, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: number): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
          public sample(param0: number, param1: java.util.concurrent.TimeUnit, param2: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public static combineLatest(param0: java.lang.Iterable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean, param2: number): io.reactivex.rxjava3.core.Flowable<any>;
          public concatMapMaybe(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMapIterable(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, param2: number): io.reactivex.rxjava3.core.Flowable<any>;
          public static generate(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public buffer(param0: org.reactivestreams.Publisher, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public takeLast(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: boolean, param4: number): io.reactivex.rxjava3.core.Flowable<any>;
          public timeout(param0: org.reactivestreams.Publisher, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public static concatArray(param0: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.core.Flowable<any>;
          public buffer(param0: org.reactivestreams.Publisher, param1: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static fromObservable(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.BackpressureStrategy): io.reactivex.rxjava3.core.Flowable<any>;
          public blockingSubscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): void;
          public static combineLatest(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: org.reactivestreams.Publisher, param3: org.reactivestreams.Publisher, param4: org.reactivestreams.Publisher, param5: org.reactivestreams.Publisher, param6: org.reactivestreams.Publisher, param7: io.reactivex.rxjava3.functions.Function7<any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public elementAt(param0: number, param1: any): io.reactivex.rxjava3.core.Single<any>;
          public onBackpressureBuffer(param0: number, param1: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Flowable<any>;
          public static intervalRange(param0: number, param1: number, param2: number, param3: number, param4: java.util.concurrent.TimeUnit, param5: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<java.lang.Long>;
          public static fromArray(param0: androidNative.Array<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public takeUntil(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public static zip(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: org.reactivestreams.Publisher, param3: org.reactivestreams.Publisher, param4: org.reactivestreams.Publisher, param5: org.reactivestreams.Publisher, param6: io.reactivex.rxjava3.functions.Function6<any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public withLatestFrom(param0: androidNative.Array<org.reactivestreams.Publisher>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public repeat(): io.reactivex.rxjava3.core.Flowable<any>;
          public concatMapDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public buffer(param0: org.reactivestreams.Publisher, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public concatMapMaybeDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public observeOn(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
          public doOnComplete(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Flowable<any>;
          public static combineLatest(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static combineLatestDelayError(param0: java.lang.Iterable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number): io.reactivex.rxjava3.core.Flowable<any>;
          public skipLast(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
          public window(param0: number, param1: number): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
          public static switchOnNext(param0: org.reactivestreams.Publisher, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public buffer(param0: number, param1: number, param2: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static fromSingle(param0: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static concat(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public concatWith(param0: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Flowable<any>;
          public delay(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public timestamp(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public static combineLatest(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: org.reactivestreams.Publisher, param3: io.reactivex.rxjava3.functions.Function3<any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static combineLatestArray(param0: androidNative.Array<org.reactivestreams.Publisher>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static combineLatest(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: org.reactivestreams.Publisher, param3: org.reactivestreams.Publisher, param4: org.reactivestreams.Publisher, param5: org.reactivestreams.Publisher, param6: org.reactivestreams.Publisher, param7: org.reactivestreams.Publisher, param8: io.reactivex.rxjava3.functions.Function8<any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public window(param0: number, param1: number, param2: number): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
          public toFuture(): java.util.concurrent.Future<any>;
          public takeLast(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public buffer(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<java.util.List<any>>;
          public sample(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
          public skipLast(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: boolean, param4: number): io.reactivex.rxjava3.core.Flowable<any>;
          public takeUntil(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static generate(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.BiConsumer<any, any>, param2: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static combineLatest(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: org.reactivestreams.Publisher, param3: org.reactivestreams.Publisher, param4: org.reactivestreams.Publisher, param5: org.reactivestreams.Publisher, param6: io.reactivex.rxjava3.functions.Function6<any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public onBackpressureBuffer(param0: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public static merge(param0: java.lang.Iterable<any>, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public blockingMostRecent(param0: any): java.lang.Iterable<any>;
          public static range(param0: number, param1: number): io.reactivex.rxjava3.core.Flowable<java.lang.Integer>;
          public static generate(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public delay(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public static fromCompletable(param0: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Flowable<any>;
          public static zip(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: org.reactivestreams.Publisher, param3: org.reactivestreams.Publisher, param4: org.reactivestreams.Publisher, param5: org.reactivestreams.Publisher, param6: org.reactivestreams.Publisher, param7: io.reactivex.rxjava3.functions.Function7<any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static concatEager(param0: org.reactivestreams.Publisher, param1: number, param2: number): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, param2: boolean, param3: number, param4: number): io.reactivex.rxjava3.core.Flowable<any>;
          public static amb(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static mergeDelayError(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public forEachWhile(param0: io.reactivex.rxjava3.functions.Predicate<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public toObservable(): io.reactivex.rxjava3.core.Observable<any>;
          public static concat(param0: org.reactivestreams.Publisher, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public blockingLatest(): java.lang.Iterable<any>;
          public skip(param0: number): io.reactivex.rxjava3.core.Flowable<any>;
          public static concatEager(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public mergeWith(param0: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public test(param0: number): io.reactivex.rxjava3.subscribers.TestSubscriber<any>;
          public replay(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
          public blockingStream(): java.util.stream.Stream<any>;
          public static concat(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: org.reactivestreams.Publisher, param3: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public buffer(param0: org.reactivestreams.Publisher, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public materialize(): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Notification<any>>;
          public unsubscribeOn(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
          public replay(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public delay(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
          public doOnSubscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static unsafeCreate(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public static concatArrayEagerDelayError(param0: number, param1: number, param2: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.core.Flowable<any>;
          public static defer(param0: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static mergeDelayError(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public skipLast(param0: number): io.reactivex.rxjava3.core.Flowable<any>;
          public parallel(): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public window(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: number, param4: boolean, param5: number): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
          public flatMapStream(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public skipLast(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
          public static just(param0: any, param1: any): io.reactivex.rxjava3.core.Flowable<any>;
          public window(param0: number, param1: java.util.concurrent.TimeUnit, param2: number, param3: boolean): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
          public static just(param0: any, param1: any, param2: any, param3: any, param4: any, param5: any, param6: any, param7: any, param8: any, param9: any): io.reactivex.rxjava3.core.Flowable<any>;
          public static combineLatest(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: org.reactivestreams.Publisher, param3: org.reactivestreams.Publisher, param4: io.reactivex.rxjava3.functions.Function4<any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public concatMapMaybeDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean, param2: number): io.reactivex.rxjava3.core.Flowable<any>;
          public window(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: number): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
          public static just(param0: any, param1: any, param2: any, param3: any): io.reactivex.rxjava3.core.Flowable<any>;
          public onErrorResumeNext(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public reduceWith(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Single<any>;
          public startWithIterable(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static concatArrayEager(param0: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.core.Flowable<any>;
          public blockingSingle(param0: any): any;
          public onErrorReturn(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public sample(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
          public static merge(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public onBackpressureReduce(param0: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public takeLast(param0: number, param1: java.util.concurrent.TimeUnit, param2: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public doOnError(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public defaultIfEmpty(param0: any): io.reactivex.rxjava3.core.Flowable<any>;
          public lastElement(): io.reactivex.rxjava3.core.Maybe<any>;
          public static interval(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<java.lang.Long>;
          public static zip(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: org.reactivestreams.Publisher, param3: org.reactivestreams.Publisher, param4: io.reactivex.rxjava3.functions.Function4<any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public blockingLast(param0: any): any;
          public distinct(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public groupBy(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean, param3: number, param4: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static combineLatestArrayDelayError(param0: androidNative.Array<org.reactivestreams.Publisher>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static concatDelayError(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public firstOrErrorStage(): java.util.concurrent.CompletionStage<any>;
          public concatMapCompletable(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number): io.reactivex.rxjava3.core.Completable;
          public blockingForEach(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: number): void;
          public onBackpressureBuffer(param0: number, param1: boolean, param2: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public static mergeArrayDelayError(param0: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.core.Flowable<any>;
          public static merge(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public buffer(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: number, param4: io.reactivex.rxjava3.functions.Supplier<any>, param5: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public doOnTerminate(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Flowable<any>;
          public throttleFirst(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
          public publish(param0: number): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
          public replay(param0: number, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
          public concatMapCompletableDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean): io.reactivex.rxjava3.core.Completable;
          public timestamp(): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public sorted(): io.reactivex.rxjava3.core.Flowable<any>;
          public subscribe(param0: org.reactivestreams.Subscriber<any>): void;
          public static just(param0: any, param1: any, param2: any, param3: any, param4: any, param5: any, param6: any): io.reactivex.rxjava3.core.Flowable<any>;
          public throttleLast(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
          public static just(param0: any, param1: any, param2: any): io.reactivex.rxjava3.core.Flowable<any>;
          public concatMapCompletable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
          public flatMapIterable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static zip(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: org.reactivestreams.Publisher, param3: org.reactivestreams.Publisher, param4: org.reactivestreams.Publisher, param5: io.reactivex.rxjava3.functions.Function5<any, any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public concatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
          public timeout(param0: number, param1: java.util.concurrent.TimeUnit, param2: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static using(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public concatMapSingleDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public static mergeDelayError(param0: java.lang.Iterable<any>, param1: number, param2: number): io.reactivex.rxjava3.core.Flowable<any>;
          public toMap(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public window(param0: org.reactivestreams.Publisher, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number): io.reactivex.rxjava3.core.Flowable<any>;
          public onErrorReturnItem(param0: any): io.reactivex.rxjava3.core.Flowable<any>;
          public concatMapCompletableDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean, param2: number): io.reactivex.rxjava3.core.Completable;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
          public window(param0: number): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
          public blockingStream(param0: number): java.util.stream.Stream<any>;
          public mapOptional(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public retryUntil(param0: io.reactivex.rxjava3.functions.BooleanSupplier): io.reactivex.rxjava3.core.Flowable<any>;
          public onBackpressureLatest(): io.reactivex.rxjava3.core.Flowable<any>;
          public replay(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number, param2: number, param3: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
          public all(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
          public flatMapCompletable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
          public onBackpressureReduce(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static concatEagerDelayError(param0: java.lang.Iterable<any>, param1: number, param2: number): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMapIterable(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public retry(param0: number, param1: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public onBackpressureBuffer(): io.reactivex.rxjava3.core.Flowable<any>;
          public zipWith(param0: org.reactivestreams.Publisher, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, param2: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public static concat(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public concatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public elementAt(param0: number): io.reactivex.rxjava3.core.Maybe<any>;
          public toMultimap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Single<any>;
          public singleOrErrorStage(): java.util.concurrent.CompletionStage<any>;
          public static concatDelayError(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public buffer(param0: number, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<java.util.List<any>>;
          public static zip(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: org.reactivestreams.Publisher, param3: io.reactivex.rxjava3.functions.Function3<any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public timestamp(param0: java.util.concurrent.TimeUnit, param1: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public concatMapStream(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public switchMapDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public distinctUntilChanged(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static empty(): io.reactivex.rxjava3.core.Flowable<any>;
          public toSortedList(param0: java.util.Comparator<any>, param1: number): io.reactivex.rxjava3.core.Single<java.util.List<any>>;
          public static zip(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: org.reactivestreams.Publisher, param3: org.reactivestreams.Publisher, param4: org.reactivestreams.Publisher, param5: org.reactivestreams.Publisher, param6: org.reactivestreams.Publisher, param7: org.reactivestreams.Publisher, param8: org.reactivestreams.Publisher, param9: io.reactivex.rxjava3.functions.Function9<any, any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public switchIfEmpty(param0: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static concatEagerDelayError(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public cacheWithInitialCapacity(param0: number): io.reactivex.rxjava3.core.Flowable<any>;
          public test(param0: number, param1: boolean): io.reactivex.rxjava3.subscribers.TestSubscriber<any>;
          public concatMapDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean, param2: number): io.reactivex.rxjava3.core.Flowable<any>;
          public toMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public static intervalRange(param0: number, param1: number, param2: number, param3: number, param4: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<java.lang.Long>;
          public switchMapMaybe(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static create(param0: io.reactivex.rxjava3.core.FlowableOnSubscribe<any>, param1: io.reactivex.rxjava3.core.BackpressureStrategy): io.reactivex.rxjava3.core.Flowable<any>;
          public first(param0: any): io.reactivex.rxjava3.core.Single<any>;
          public timeout(param0: org.reactivestreams.Publisher, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public forEachWhile(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.disposables.Disposable;
          public takeLast(param0: number): io.reactivex.rxjava3.core.Flowable<any>;
          public ofType(param0: java.lang.Class<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static merge(param0: org.reactivestreams.Publisher, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public static combineLatest(param0: java.lang.Iterable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public throttleLatest(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
          public static zip(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public groupBy(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public distinctUntilChanged(param0: io.reactivex.rxjava3.functions.BiPredicate<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public retry(): io.reactivex.rxjava3.core.Flowable<any>;
          public blockingSubscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: number): void;
          public startWith(param0: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Flowable<any>;
          public contains(param0: any): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
          public static mergeDelayError(param0: org.reactivestreams.Publisher, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public static just(param0: any, param1: any, param2: any, param3: any, param4: any, param5: any): io.reactivex.rxjava3.core.Flowable<any>;
          public timeInterval(param0: java.util.concurrent.TimeUnit, param1: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public window(param0: org.reactivestreams.Publisher, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public blockingSubscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action, param3: number): void;
          public distinctUntilChanged(): io.reactivex.rxjava3.core.Flowable<any>;
          public throttleLast(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
          public static mergeArray(param0: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.core.Flowable<any>;
          public startWithArray(param0: androidNative.Array<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public test(): io.reactivex.rxjava3.subscribers.TestSubscriber<any>;
          public collect(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public skipLast(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public static using(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Consumer<any>, param3: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public dematerialize(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public publish(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public blockingIterable(param0: number): java.lang.Iterable<any>;
          public concatMapMaybeDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static mergeDelayError(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: org.reactivestreams.Publisher, param3: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public switchMap(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static concatDelayError(param0: org.reactivestreams.Publisher, param1: number, param2: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public repeat(param0: number): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMapIterable(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public singleElement(): io.reactivex.rxjava3.core.Maybe<any>;
          public repeatWhen(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public onBackpressureBuffer(param0: number, param1: io.reactivex.rxjava3.functions.Action, param2: io.reactivex.rxjava3.core.BackpressureOverflowStrategy): io.reactivex.rxjava3.core.Flowable<any>;
          public static concatEagerDelayError(param0: org.reactivestreams.Publisher, param1: number, param2: number): io.reactivex.rxjava3.core.Flowable<any>;
          public doFinally(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Flowable<any>;
          public concatMapEager(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public safeSubscribe(param0: org.reactivestreams.Subscriber<any>): void;
          public onErrorResumeWith(param0: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public to(param0: io.reactivex.rxjava3.core.FlowableConverter<any, any>): any;
          public static zip(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: org.reactivestreams.Publisher, param3: org.reactivestreams.Publisher, param4: org.reactivestreams.Publisher, param5: org.reactivestreams.Publisher, param6: org.reactivestreams.Publisher, param7: org.reactivestreams.Publisher, param8: io.reactivex.rxjava3.functions.Function8<any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public singleOrError(): io.reactivex.rxjava3.core.Single<any>;
          public static error(param0: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public zipWith(param0: java.lang.Iterable<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static never(): io.reactivex.rxjava3.core.Flowable<any>;
          public retry(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public takeLast(param0: number, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: boolean, param5: number): io.reactivex.rxjava3.core.Flowable<any>;
          public concatMapEager(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number, param2: number): io.reactivex.rxjava3.core.Flowable<any>;
          public window(param0: number, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
          public groupBy(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public ambWith(param0: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMapStream(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public concatMapStream(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public static concatEager(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public doAfterNext(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public last(param0: any): io.reactivex.rxjava3.core.Single<any>;
          public toMultimap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Supplier<any>, param3: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public doOnNext(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public concatMapDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean, param2: number, param3: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
          public static rangeLong(param0: number, param1: number): io.reactivex.rxjava3.core.Flowable<java.lang.Long>;
          public concatMapMaybe(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public cast(param0: java.lang.Class<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public blockingSubscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): void;
          public static sequenceEqual(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: number): io.reactivex.rxjava3.core.Single<any>;
          public concatWith(param0: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public skip(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
          public take(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
          public zipWith(param0: org.reactivestreams.Publisher, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static fromIterable(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public timeInterval(param0: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public static merge(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: org.reactivestreams.Publisher, param3: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public publish(): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
          public static timer(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<java.lang.Long>;
          public onBackpressureBuffer(param0: number, param1: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public withLatestFrom(param0: java.lang.Iterable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
          public throttleWithTimeout(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
          public withLatestFrom(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: io.reactivex.rxjava3.functions.Function3<any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public toList(param0: number): io.reactivex.rxjava3.core.Single<java.util.List<any>>;
          public takeWhile(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public replay(param0: number, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
          public onBackpressureBuffer(param0: number): io.reactivex.rxjava3.core.Flowable<any>;
          public static just(param0: any, param1: any, param2: any, param3: any, param4: any): io.reactivex.rxjava3.core.Flowable<any>;
          public subscribeWith(param0: org.reactivestreams.Subscriber): org.reactivestreams.Subscriber;
          public buffer(param0: number, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<java.util.List<any>>;
          public scan(param0: any, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public startWith(param0: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static sequenceEqual(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Single<any>;
          public onTerminateDetach(): io.reactivex.rxjava3.core.Flowable<any>;
          public blockingLast(): any;
          public blockingIterable(): java.lang.Iterable<any>;
          public static combineLatestArray(param0: androidNative.Array<org.reactivestreams.Publisher>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number): io.reactivex.rxjava3.core.Flowable<any>;
          public replay(param0: number): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
          public collectInto(param0: any, param1: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public debounce(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
          public static concat(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public distinct(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public blockingSubscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: number): void;
          public static interval(param0: number, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<java.lang.Long>;
          public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
          public concatMapSingle(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public retry(param0: io.reactivex.rxjava3.functions.BiPredicate<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public startWith(param0: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public startWithItem(param0: any): io.reactivex.rxjava3.core.Flowable<any>;
          public static merge(param0: java.lang.Iterable<any>, param1: number, param2: number): io.reactivex.rxjava3.core.Flowable<any>;
          public forEachWhile(param0: io.reactivex.rxjava3.functions.Predicate<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static generate(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, param2: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static combineLatest(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: org.reactivestreams.Publisher, param3: org.reactivestreams.Publisher, param4: org.reactivestreams.Publisher, param5: org.reactivestreams.Publisher, param6: org.reactivestreams.Publisher, param7: org.reactivestreams.Publisher, param8: org.reactivestreams.Publisher, param9: io.reactivex.rxjava3.functions.Function9<any, any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static mergeArray(param0: number, param1: number, param2: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.core.Flowable<any>;
          public throttleLatest(param0: number, param1: java.util.concurrent.TimeUnit, param2: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public debounce(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
          public replay(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number, param2: number, param3: java.util.concurrent.TimeUnit, param4: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
          public elementAtOrError(param0: number): io.reactivex.rxjava3.core.Single<any>;
          public static combineLatest(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: org.reactivestreams.Publisher, param3: org.reactivestreams.Publisher, param4: org.reactivestreams.Publisher, param5: io.reactivex.rxjava3.functions.Function5<any, any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMapMaybe(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean, param2: number): io.reactivex.rxjava3.core.Flowable<any>;
          public zipWith(param0: org.reactivestreams.Publisher, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, param2: boolean, param3: number): io.reactivex.rxjava3.core.Flowable<any>;
          public doOnRequest(param0: io.reactivex.rxjava3.functions.LongConsumer): io.reactivex.rxjava3.core.Flowable<any>;
          public static mergeDelayError(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public throttleLatest(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
          public mergeWith(param0: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Flowable<any>;
          public collect(param0: java.util.stream.Collector): io.reactivex.rxjava3.core.Single<any>;
          public concatWith(param0: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public subscribeOn(param0: io.reactivex.rxjava3.core.Scheduler, param1: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public doOnCancel(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Flowable<any>;
          public concatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, param2: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.core.Flowable<any>;
          public rebatchRequests(param0: number): io.reactivex.rxjava3.core.Flowable<any>;
          public timeout(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
          public static just(param0: any, param1: any, param2: any, param3: any, param4: any, param5: any, param6: any, param7: any): io.reactivex.rxjava3.core.Flowable<any>;
          public sample(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public subscribe(param0: io.reactivex.rxjava3.core.FlowableSubscriber<any>): void;
          public timeout(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static interval(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<java.lang.Long>;
          public toList(): io.reactivex.rxjava3.core.Single<java.util.List<any>>;
          public static mergeDelayError(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public onErrorComplete(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public groupBy(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public doOnLifecycle(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.LongConsumer, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Flowable<any>;
          public lastOrError(): io.reactivex.rxjava3.core.Single<any>;
          public throttleWithTimeout(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
          public window(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
          public parallel(param0: number, param1: number): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public publish(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean, param2: number, param3: number): io.reactivex.rxjava3.core.Flowable<any>;
          public timeout(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public delaySubscription(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static combineLatestDelayError(param0: java.lang.Iterable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public startWith(param0: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public delay(param0: number, param1: java.util.concurrent.TimeUnit, param2: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public concatMapIterable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public skip(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
          public replay(): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
          public takeLast(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
          public static ambArray(param0: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.core.Flowable<any>;
          public delay(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public mergeWith(param0: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public scan(param0: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public reduce(param0: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public replay(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
          public replay(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public static zip(param0: java.lang.Iterable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static fromMaybe(param0: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public buffer(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<java.util.List<any>>;
          public observeOn(param0: io.reactivex.rxjava3.core.Scheduler, param1: boolean, param2: number): io.reactivex.rxjava3.core.Flowable<any>;
          public map(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public buffer(param0: number): io.reactivex.rxjava3.core.Flowable<java.util.List<any>>;
          public lastStage(param0: any): java.util.concurrent.CompletionStage<any>;
          public static interval(param0: number, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<java.lang.Long>;
          public sorted(param0: java.util.Comparator<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public buffer(param0: number, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public count(): io.reactivex.rxjava3.core.Single<java.lang.Long>;
          public delay(param0: org.reactivestreams.Publisher, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public firstElement(): io.reactivex.rxjava3.core.Maybe<any>;
          public switchMapMaybeDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public onErrorComplete(): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMapSingle(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public throttleLatest(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public static fromCompletionStage(param0: java.util.concurrent.CompletionStage): io.reactivex.rxjava3.core.Flowable<any>;
          public toSortedList(param0: java.util.Comparator<any>): io.reactivex.rxjava3.core.Single<java.util.List<any>>;
          public blockingNext(): java.lang.Iterable<any>;
          public static combineLatestArrayDelayError(param0: androidNative.Array<org.reactivestreams.Publisher>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number): io.reactivex.rxjava3.core.Flowable<any>;
          public retry(param0: number): io.reactivex.rxjava3.core.Flowable<any>;
          public mergeWith(param0: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public sample(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public static just(param0: any): io.reactivex.rxjava3.core.Flowable<any>;
          public any(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
          public toMultimap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public timeout(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static zip(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, param3: boolean, param4: number): io.reactivex.rxjava3.core.Flowable<any>;
          public switchMapSingleDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static concatArrayDelayError(param0: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.core.Flowable<any>;
          public concatMapSingleDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public hide(): io.reactivex.rxjava3.core.Flowable<any>;
          public buffer(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public switchMapSingle(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public withLatestFrom(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher, param2: org.reactivestreams.Publisher, param3: org.reactivestreams.Publisher, param4: io.reactivex.rxjava3.functions.Function5<any, any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public buffer(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: number): io.reactivex.rxjava3.core.Flowable<java.util.List<any>>;
          public ignoreElements(): io.reactivex.rxjava3.core.Completable;
          public buffer(param0: number, param1: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static concatArrayEager(param0: number, param1: number, param2: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.core.Flowable<any>;
          public takeLast(param0: number, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
          public lastOrErrorStage(): java.util.concurrent.CompletionStage<any>;
          public static fromSupplier(param0: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public skipLast(param0: number, param1: java.util.concurrent.TimeUnit, param2: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public static switchOnNextDelayError(param0: org.reactivestreams.Publisher, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Supplier<any>, param3: number): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public repeatUntil(param0: io.reactivex.rxjava3.functions.BooleanSupplier): io.reactivex.rxjava3.core.Flowable<any>;
          public isEmpty(): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
          public static switchOnNext(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public replay(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: boolean): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
          public single(param0: any): io.reactivex.rxjava3.core.Single<any>;
          public concatMapCompletableDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
          public groupJoin(param0: org.reactivestreams.Publisher, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Function<any, any>, param3: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public firstStage(param0: any): java.util.concurrent.CompletionStage<any>;
          public doAfterTerminate(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Flowable<any>;
          public toList(param0: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Single<any>;
          public static zipArray(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean, param2: number, param3: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.core.Flowable<any>;
          public toMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Single<any>;
          public take(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
          public static fromCallable(param0: java.util.concurrent.Callable<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public reduce(param0: any, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Single<any>;
          public static zip(param0: java.lang.Iterable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean, param3: number): io.reactivex.rxjava3.core.Flowable<any>;
          public static merge(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public concatMapEagerDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean): io.reactivex.rxjava3.core.Flowable<any>;
          public switchMapCompletableDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
          public toMultimap(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Flowable<any>;
          public withLatestFrom(param0: org.reactivestreams.Publisher, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static timer(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<java.lang.Long>;
          public replay(param0: number, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: boolean): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
          public doOnEach(param0: org.reactivestreams.Subscriber<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public toSortedList(param0: number): io.reactivex.rxjava3.core.Single<java.util.List<any>>;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class FlowableConverter<T, R> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.FlowableConverter<any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.FlowableConverter<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: io.reactivex.rxjava3.core.Flowable<T>): R });
          public constructor();
          public apply(param0: io.reactivex.rxjava3.core.Flowable<T>): R;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class FlowableEmitter<T> extends io.reactivex.rxjava3.core.Emitter<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.FlowableEmitter<any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.FlowableEmitter<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void; setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void; requested(): number; isCancelled(): boolean; serialize(): io.reactivex.rxjava3.core.FlowableEmitter<any>; tryOnError(param0: java.lang.Throwable): boolean; onNext(param0: any): void; onError(param0: java.lang.Throwable): void; onComplete(): void });
          public constructor();
          public serialize(): io.reactivex.rxjava3.core.FlowableEmitter<any>;
          public isCancelled(): boolean;
          public tryOnError(param0: java.lang.Throwable): boolean;
          public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
          public onComplete(): void;
          public onError(param0: java.lang.Throwable): void;
          public requested(): number;
          public onNext(param0: any): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class FlowableOnSubscribe<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.FlowableOnSubscribe<any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.FlowableOnSubscribe<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { subscribe(param0: io.reactivex.rxjava3.core.FlowableEmitter<T>): void });
          public constructor();
          public subscribe(param0: io.reactivex.rxjava3.core.FlowableEmitter<T>): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class FlowableOperator<Downstream, Upstream> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.FlowableOperator<any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.FlowableOperator<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: org.reactivestreams.Subscriber<any>): org.reactivestreams.Subscriber<any> });
          public constructor();
          public apply(param0: org.reactivestreams.Subscriber<any>): org.reactivestreams.Subscriber<any>;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class FlowableSubscriber<T> extends org.reactivestreams.Subscriber<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.FlowableSubscriber<any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.FlowableSubscriber<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { onSubscribe(param0: org.reactivestreams.Subscription): void });
          public constructor();
          public onSubscribe(param0: org.reactivestreams.Subscription): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class FlowableTransformer<Upstream, Downstream> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.FlowableTransformer<any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.FlowableTransformer<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: io.reactivex.rxjava3.core.Flowable<Upstream>): org.reactivestreams.Publisher<Downstream> });
          public constructor();
          public apply(param0: io.reactivex.rxjava3.core.Flowable<Upstream>): org.reactivestreams.Publisher<Downstream>;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export abstract class Maybe<T> extends io.reactivex.rxjava3.core.MaybeSource<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.Maybe<any>>;
          public static concatEagerDelayError(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public timeout(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Maybe<any>;
          public blockingSubscribe(): void;
          public static mergeArrayDelayError(param0: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>): io.reactivex.rxjava3.core.Flowable<any>;
          public doOnTerminate(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Maybe<any>;
          public static zip(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>, param2: io.reactivex.rxjava3.core.MaybeSource<any>, param3: io.reactivex.rxjava3.core.MaybeSource<any>, param4: io.reactivex.rxjava3.functions.Function4<any, any, any, any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public retry(): io.reactivex.rxjava3.core.Maybe<any>;
          public static timer(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Maybe<java.lang.Long>;
          public safeSubscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
          public timeout(param0: org.reactivestreams.Publisher, param1: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public doOnSuccess(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public constructor();
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static defer(param0: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public switchIfEmpty(param0: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static merge(param0: org.reactivestreams.Publisher, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public static never(): io.reactivex.rxjava3.core.Maybe<any>;
          public delay(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Maybe<any>;
          public blockingSubscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
          public static concatArrayEagerDelayError(param0: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>): io.reactivex.rxjava3.core.Flowable<any>;
          public retry(param0: io.reactivex.rxjava3.functions.BiPredicate<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static using(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Consumer<any>, param3: boolean): io.reactivex.rxjava3.core.Maybe<any>;
          public doOnLifecycle(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Maybe<any>;
          public startWith(param0: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Flowable<any>;
          public timestamp(): io.reactivex.rxjava3.core.Maybe<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public static merge(param0: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public onErrorReturnItem(param0: any): io.reactivex.rxjava3.core.Maybe<any>;
          public static timer(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Maybe<java.lang.Long>;
          public contains(param0: any): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
          public static merge(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public flattenStreamAsFlowable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static mergeDelayError(param0: org.reactivestreams.Publisher, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public static amb(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public blockingSubscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): void;
          public concatMapSingle(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public toCompletionStage(param0: any): java.util.concurrent.CompletionStage<any>;
          public static merge(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>, param2: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public onErrorReturn(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public lift(param0: io.reactivex.rxjava3.core.MaybeOperator<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static sequenceEqual(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>, param2: io.reactivex.rxjava3.functions.BiPredicate<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public blockingGet(param0: any): any;
          public static error(param0: java.lang.Throwable): io.reactivex.rxjava3.core.Maybe<any>;
          public flattenStreamAsObservable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public retry(param0: number): io.reactivex.rxjava3.core.Maybe<any>;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public static merge(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>, param2: io.reactivex.rxjava3.core.MaybeSource<any>, param3: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static mergeDelayError(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>, param2: io.reactivex.rxjava3.core.MaybeSource<any>, param3: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public ignoreElement(): io.reactivex.rxjava3.core.Completable;
          public repeat(param0: number): io.reactivex.rxjava3.core.Flowable<any>;
          public to(param0: io.reactivex.rxjava3.core.MaybeConverter<any, any>): any;
          public doOnDispose(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Maybe<any>;
          public timeInterval(): io.reactivex.rxjava3.core.Maybe<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public static merge(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public repeatWhen(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static zipArray(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>): io.reactivex.rxjava3.core.Maybe<any>;
          public doAfterSuccess(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static switchOnNextDelayError(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public flattenAsObservable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public doAfterTerminate(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Maybe<any>;
          public doOnComplete(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Maybe<any>;
          public static concatDelayError(param0: org.reactivestreams.Publisher, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public timestamp(param0: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Maybe<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public static concatEagerDelayError(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public static concatEager(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public subscribeWith(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): io.reactivex.rxjava3.core.MaybeObserver<any>;
          public ofType(param0: java.lang.Class<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public delaySubscription(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Maybe<any>;
          public compose(param0: io.reactivex.rxjava3.core.MaybeTransformer<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public dematerialize(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public blockingSubscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): void;
          public static concat(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public static zip(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static empty(): io.reactivex.rxjava3.core.Maybe<any>;
          public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
          public static just(param0: any): io.reactivex.rxjava3.core.Maybe<any>;
          public static concatEagerDelayError(param0: java.lang.Iterable<any>, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public delaySubscription(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Maybe<any>;
          public blockingSubscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): void;
          public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
          public onErrorComplete(): io.reactivex.rxjava3.core.Maybe<any>;
          public startWith(param0: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static fromCompletable(param0: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Maybe<any>;
          public subscribeOn(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Maybe<any>;
          public repeat(): io.reactivex.rxjava3.core.Flowable<any>;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static concat(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>, param2: io.reactivex.rxjava3.core.MaybeSource<any>, param3: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static zip(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>, param2: io.reactivex.rxjava3.core.MaybeSource<any>, param3: io.reactivex.rxjava3.core.MaybeSource<any>, param4: io.reactivex.rxjava3.core.MaybeSource<any>, param5: io.reactivex.rxjava3.core.MaybeSource<any>, param6: io.reactivex.rxjava3.core.MaybeSource<any>, param7: io.reactivex.rxjava3.core.MaybeSource<any>, param8: io.reactivex.rxjava3.functions.Function8<any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static concatEagerDelayError(param0: org.reactivestreams.Publisher, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public cache(): io.reactivex.rxjava3.core.Maybe<any>;
          public test(param0: boolean): io.reactivex.rxjava3.observers.TestObserver<any>;
          public static wrap(param0: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static error(param0: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static mergeDelayError(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>, param2: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public test(): io.reactivex.rxjava3.observers.TestObserver<any>;
          public delay(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Maybe<any>;
          public static concat(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>, param2: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public startWith(param0: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public doFinally(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Maybe<any>;
          public toFuture(): java.util.concurrent.Future<any>;
          public timeInterval(param0: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Maybe<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public static zip(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>, param2: io.reactivex.rxjava3.core.MaybeSource<any>, param3: io.reactivex.rxjava3.core.MaybeSource<any>, param4: io.reactivex.rxjava3.core.MaybeSource<any>, param5: io.reactivex.rxjava3.core.MaybeSource<any>, param6: io.reactivex.rxjava3.core.MaybeSource<any>, param7: io.reactivex.rxjava3.core.MaybeSource<any>, param8: io.reactivex.rxjava3.core.MaybeSource<any>, param9: io.reactivex.rxjava3.functions.Function9<any, any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public retry(param0: number, param1: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static mergeArray(param0: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>): io.reactivex.rxjava3.core.Flowable<any>;
          public static fromObservable(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public cast(param0: java.lang.Class<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static fromSingle(param0: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public retryUntil(param0: io.reactivex.rxjava3.functions.BooleanSupplier): io.reactivex.rxjava3.core.Maybe<any>;
          public static mergeDelayError(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public delay(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Maybe<any>;
          public toObservable(): io.reactivex.rxjava3.core.Observable<any>;
          public static concat(param0: org.reactivestreams.Publisher, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public map(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public timeout(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public concatWith(param0: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static concatEager(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Maybe<any>;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Maybe<any>;
          public timestamp(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Maybe<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public toSingle(): io.reactivex.rxjava3.core.Single<any>;
          public static mergeDelayError(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public doOnError(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public takeUntil(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Maybe<any>;
          public static fromPublisher(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Maybe<any>;
          public static using(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public delay(param0: number, param1: java.util.concurrent.TimeUnit, param2: boolean): io.reactivex.rxjava3.core.Maybe<any>;
          public static concatArrayDelayError(param0: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>): io.reactivex.rxjava3.core.Flowable<any>;
          public onTerminateDetach(): io.reactivex.rxjava3.core.Maybe<any>;
          public delay(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: boolean): io.reactivex.rxjava3.core.Maybe<any>;
          public materialize(): io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.core.Notification<any>>;
          public static mergeDelayError(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public toCompletionStage(): java.util.concurrent.CompletionStage<any>;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public retryWhen(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static fromOptional(param0: java.util.Optional): io.reactivex.rxjava3.core.Maybe<any>;
          public startWith(param0: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
          public unsubscribeOn(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Maybe<any>;
          public filter(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public doOnEvent(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public defaultIfEmpty(param0: any): io.reactivex.rxjava3.core.Single<any>;
          public flatMapSingle(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public onErrorResumeNext(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static concatEager(param0: org.reactivestreams.Publisher, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public takeUntil(param0: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public ambWith(param0: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static fromCompletionStage(param0: java.util.concurrent.CompletionStage): io.reactivex.rxjava3.core.Maybe<any>;
          public static zip(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>, param2: io.reactivex.rxjava3.core.MaybeSource<any>, param3: io.reactivex.rxjava3.core.MaybeSource<any>, param4: io.reactivex.rxjava3.core.MaybeSource<any>, param5: io.reactivex.rxjava3.core.MaybeSource<any>, param6: io.reactivex.rxjava3.core.MaybeSource<any>, param7: io.reactivex.rxjava3.functions.Function7<any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static fromSupplier(param0: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static zip(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>, param2: io.reactivex.rxjava3.core.MaybeSource<any>, param3: io.reactivex.rxjava3.functions.Function3<any, any, any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public onErrorResumeWith(param0: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static concatDelayError(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public count(): io.reactivex.rxjava3.core.Single<java.lang.Long>;
          public startWith(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public timeInterval(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Maybe<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public timeInterval(param0: java.util.concurrent.TimeUnit, param1: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Maybe<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public static concat(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMapObservable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static merge(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.core.Maybe<any>;
          public static ambArray(param0: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>): io.reactivex.rxjava3.core.Maybe<any>;
          public static unsafeCreate(param0: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public mergeWith(param0: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public concatMapCompletable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
          public timeout(param0: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public delaySubscription(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Maybe<any>;
          public timeout(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public timeout(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Maybe<any>;
          public timeout(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Maybe<any>;
          public blockingGet(): any;
          public static zip(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>, param2: io.reactivex.rxjava3.core.MaybeSource<any>, param3: io.reactivex.rxjava3.core.MaybeSource<any>, param4: io.reactivex.rxjava3.core.MaybeSource<any>, param5: io.reactivex.rxjava3.core.MaybeSource<any>, param6: io.reactivex.rxjava3.functions.Function6<any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static fromCallable(param0: java.util.concurrent.Callable<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static concatArray(param0: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>): io.reactivex.rxjava3.core.Flowable<any>;
          public static zip(param0: java.lang.Iterable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public mapOptional(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public zipWith(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static create(param0: io.reactivex.rxjava3.core.MaybeOnSubscribe<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static zip(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>, param2: io.reactivex.rxjava3.core.MaybeSource<any>, param3: io.reactivex.rxjava3.core.MaybeSource<any>, param4: io.reactivex.rxjava3.core.MaybeSource<any>, param5: io.reactivex.rxjava3.functions.Function5<any, any, any, any, any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public hide(): io.reactivex.rxjava3.core.Maybe<any>;
          public toFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMapCompletable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
          public repeatUntil(param0: io.reactivex.rxjava3.functions.BooleanSupplier): io.reactivex.rxjava3.core.Flowable<any>;
          public static concatEager(param0: java.lang.Iterable<any>, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public isEmpty(): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
          public static switchOnNext(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public observeOn(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Maybe<any>;
          public switchIfEmpty(param0: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Single<any>;
          public flattenAsFlowable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static concat(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static concatArrayEager(param0: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>): io.reactivex.rxjava3.core.Flowable<any>;
          public doOnSubscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public timestamp(param0: java.util.concurrent.TimeUnit, param1: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Maybe<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public timeout(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static concatDelayError(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public retry(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public flatMapPublisher(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public onErrorComplete(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public concatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static sequenceEqual(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Single<any>;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class MaybeConverter<T, R> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.MaybeConverter<any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.MaybeConverter<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: io.reactivex.rxjava3.core.Maybe<T>): R });
          public constructor();
          public apply(param0: io.reactivex.rxjava3.core.Maybe<T>): R;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class MaybeEmitter<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.MaybeEmitter<any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.MaybeEmitter<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { onSuccess(param0: T): void; onError(param0: java.lang.Throwable): void; onComplete(): void; setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void; setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void; isDisposed(): boolean; tryOnError(param0: java.lang.Throwable): boolean });
          public constructor();
          public isDisposed(): boolean;
          public tryOnError(param0: java.lang.Throwable): boolean;
          public onSuccess(param0: T): void;
          public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public onComplete(): void;
          public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
          public onError(param0: java.lang.Throwable): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class MaybeObserver<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.MaybeObserver<any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.MaybeObserver<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void; onSuccess(param0: T): void; onError(param0: java.lang.Throwable): void; onComplete(): void });
          public constructor();
          public onSuccess(param0: T): void;
          public onComplete(): void;
          public onError(param0: java.lang.Throwable): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class MaybeOnSubscribe<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.MaybeOnSubscribe<any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.MaybeOnSubscribe<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { subscribe(param0: io.reactivex.rxjava3.core.MaybeEmitter<T>): void });
          public constructor();
          public subscribe(param0: io.reactivex.rxjava3.core.MaybeEmitter<T>): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class MaybeOperator<Downstream, Upstream> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.MaybeOperator<any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.MaybeOperator<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): io.reactivex.rxjava3.core.MaybeObserver<any> });
          public constructor();
          public apply(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): io.reactivex.rxjava3.core.MaybeObserver<any>;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class MaybeSource<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.MaybeSource<any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.MaybeSource<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void });
          public constructor();
          public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class MaybeTransformer<Upstream, Downstream> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.MaybeTransformer<any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.MaybeTransformer<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: io.reactivex.rxjava3.core.Maybe<Upstream>): io.reactivex.rxjava3.core.MaybeSource<Downstream> });
          public constructor();
          public apply(param0: io.reactivex.rxjava3.core.Maybe<Upstream>): io.reactivex.rxjava3.core.MaybeSource<Downstream>;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class Notification<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.Notification<any>>;
          public isOnNext(): boolean;
          public equals(param0: any): boolean;
          public static createOnComplete(): io.reactivex.rxjava3.core.Notification<any>;
          public toString(): string;
          public static createOnNext(param0: any): io.reactivex.rxjava3.core.Notification<any>;
          public isOnComplete(): boolean;
          public getValue(): T;
          public isOnError(): boolean;
          public hashCode(): number;
          public static createOnError(param0: java.lang.Throwable): io.reactivex.rxjava3.core.Notification<any>;
          public getError(): java.lang.Throwable;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export abstract class Observable<T> extends io.reactivex.rxjava3.core.ObservableSource<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.Observable<any>>;
          public singleStage(param0: any): java.util.concurrent.CompletionStage<any>;
          public blockingSubscribe(): void;
          public replay(param0: number): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
          public static just(param0: any, param1: any, param2: any): io.reactivex.rxjava3.core.Observable<any>;
          public static generate(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, param2: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
          public window(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
          public toFlowable(param0: io.reactivex.rxjava3.core.BackpressureStrategy): io.reactivex.rxjava3.core.Flowable<any>;
          public static bufferSize(): number;
          public blockingForEach(param0: io.reactivex.rxjava3.functions.Consumer<any>): void;
          public concatWith(param0: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public sample(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public materialize(): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Notification<any>>;
          public concatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number): io.reactivex.rxjava3.core.Observable<any>;
          public constructor();
          public static just(param0: any, param1: any): io.reactivex.rxjava3.core.Observable<any>;
          public startWith(param0: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Observable<any>;
          public replay(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number, param2: number, param3: java.util.concurrent.TimeUnit, param4: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
          public sample(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public takeWhile(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static combineLatest(param0: java.lang.Iterable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number): io.reactivex.rxjava3.core.Observable<any>;
          public onErrorComplete(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Observable<any>;
          public delaySubscription(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
          public join(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Function<any, any>, param3: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public withLatestFrom(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.core.ObservableSource<any>, param3: io.reactivex.rxjava3.functions.Function4<any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public window(param0: number, param1: java.util.concurrent.TimeUnit, param2: number, param3: boolean): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
          public throttleWithTimeout(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
          public buffer(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<java.util.List<any>>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number): io.reactivex.rxjava3.core.Observable<any>;
          public throttleWithTimeout(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
          public static combineLatestArrayDelayError(param0: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public doFinally(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Observable<any>;
          public static combineLatest(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.core.ObservableSource<any>, param3: io.reactivex.rxjava3.core.ObservableSource<any>, param4: io.reactivex.rxjava3.core.ObservableSource<any>, param5: io.reactivex.rxjava3.core.ObservableSource<any>, param6: io.reactivex.rxjava3.core.ObservableSource<any>, param7: io.reactivex.rxjava3.core.ObservableSource<any>, param8: io.reactivex.rxjava3.functions.Function8<any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static unsafeCreate(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public blockingSubscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): void;
          public timestamp(param0: java.util.concurrent.TimeUnit, param1: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public static concatEager(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public blockingSingle(): any;
          public forEach(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public delay(param0: number, param1: java.util.concurrent.TimeUnit, param2: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public buffer(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: number): io.reactivex.rxjava3.core.Observable<java.util.List<any>>;
          public observeOn(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
          public static mergeDelayError(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public timeInterval(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public skipLast(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
          public buffer(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: number, param4: io.reactivex.rxjava3.functions.Supplier<any>, param5: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public blockingFirst(): any;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean, param2: number): io.reactivex.rxjava3.core.Observable<any>;
          public sorted(): io.reactivex.rxjava3.core.Observable<any>;
          public delay(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public scan(param0: any, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static zip(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.core.ObservableSource<any>, param3: io.reactivex.rxjava3.functions.Function3<any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
          public static amb(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static mergeArray(param0: number, param1: number, param2: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): io.reactivex.rxjava3.core.Observable<any>;
          public retry(param0: number, param1: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Observable<any>;
          public concatMapEagerDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean, param2: number, param3: number): io.reactivex.rxjava3.core.Observable<any>;
          public dematerialize(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public switchMapMaybeDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public toSortedList(): io.reactivex.rxjava3.core.Single<java.util.List<any>>;
          public skipLast(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
          public blockingFirst(param0: any): any;
          public concatMapDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean, param2: number, param3: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
          public replay(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
          public static switchOnNext(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number): io.reactivex.rxjava3.core.Observable<any>;
          public zipWith(param0: java.lang.Iterable<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public debounce(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
          public take(param0: number): io.reactivex.rxjava3.core.Observable<any>;
          public firstOrError(): io.reactivex.rxjava3.core.Single<any>;
          public share(): io.reactivex.rxjava3.core.Observable<any>;
          public static wrap(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static mergeArray(param0: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): io.reactivex.rxjava3.core.Observable<any>;
          public window(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: number): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
          public flatMapIterable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public switchMapCompletable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
          public repeat(): io.reactivex.rxjava3.core.Observable<any>;
          public replay(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number, param2: number, param3: java.util.concurrent.TimeUnit, param4: io.reactivex.rxjava3.core.Scheduler, param5: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public skipLast(param0: number): io.reactivex.rxjava3.core.Observable<any>;
          public timestamp(param0: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public concatMapDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean, param2: number): io.reactivex.rxjava3.core.Observable<any>;
          public repeatWhen(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public replay(param0: number, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
          public concatMapEagerDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public window(param0: number, param1: number): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
          public concatMapSingleDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean, param2: number): io.reactivex.rxjava3.core.Observable<any>;
          public throttleFirst(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
          public flatMapSingle(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public blockingSubscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): void;
          public skipLast(param0: number, param1: java.util.concurrent.TimeUnit, param2: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public concatMapMaybeDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean, param2: number): io.reactivex.rxjava3.core.Observable<any>;
          public elementAt(param0: number, param1: any): io.reactivex.rxjava3.core.Single<any>;
          public window(param0: number, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
          public timeout(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static ambArray(param0: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): io.reactivex.rxjava3.core.Observable<any>;
          public static fromCallable(param0: java.util.concurrent.Callable<any>): io.reactivex.rxjava3.core.Observable<any>;
          public retryWhen(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public window(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number): io.reactivex.rxjava3.core.Observable<any>;
          public groupBy(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public static merge(param0: java.lang.Iterable<any>, param1: number, param2: number): io.reactivex.rxjava3.core.Observable<any>;
          public concatMapEager(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number, param2: number): io.reactivex.rxjava3.core.Observable<any>;
          public lift(param0: io.reactivex.rxjava3.core.ObservableOperator<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static fromPublisher(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Observable<any>;
          public withLatestFrom(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public concatMapMaybeDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static just(param0: any, param1: any, param2: any, param3: any): io.reactivex.rxjava3.core.Observable<any>;
          public sample(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
          public mapOptional(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public toFuture(): java.util.concurrent.Future<any>;
          public concatWith(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public timeout(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public blockingMostRecent(param0: any): java.lang.Iterable<any>;
          public static interval(param0: number, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<java.lang.Long>;
          public static mergeDelayError(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.core.ObservableSource<any>, param3: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, param2: boolean, param3: number): io.reactivex.rxjava3.core.Observable<any>;
          public repeat(param0: number): io.reactivex.rxjava3.core.Observable<any>;
          public timeInterval(): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public forEachWhile(param0: io.reactivex.rxjava3.functions.Predicate<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public blockingLatest(): java.lang.Iterable<any>;
          public static concat(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static mergeDelayError(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Observable<any>;
          public timeout(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static merge(param0: java.lang.Iterable<any>, param1: number): io.reactivex.rxjava3.core.Observable<any>;
          public static concatEager(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Observable<any>;
          public blockingStream(): java.util.stream.Stream<any>;
          public window(param0: number, param1: java.util.concurrent.TimeUnit, param2: number): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
          public static mergeDelayError(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static combineLatestArray(param0: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number): io.reactivex.rxjava3.core.Observable<any>;
          public onErrorResumeNext(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static combineLatestDelayError(param0: java.lang.Iterable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number): io.reactivex.rxjava3.core.Observable<any>;
          public skipUntil(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static fromArray(param0: androidNative.Array<any>): io.reactivex.rxjava3.core.Observable<any>;
          public compose(param0: io.reactivex.rxjava3.core.ObservableTransformer<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public onErrorResumeWith(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public throttleLatest(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
          public blockingSubscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
          public ofType(param0: java.lang.Class<any>): io.reactivex.rxjava3.core.Observable<any>;
          public buffer(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public flatMapSingle(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public observeOn(param0: io.reactivex.rxjava3.core.Scheduler, param1: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public flatMapMaybe(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public onErrorReturnItem(param0: any): io.reactivex.rxjava3.core.Observable<any>;
          public withLatestFrom(param0: java.lang.Iterable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public groupBy(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean, param3: number): io.reactivex.rxjava3.core.Observable<any>;
          public startWithIterable(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static error(param0: java.lang.Throwable): io.reactivex.rxjava3.core.Observable<any>;
          public doAfterNext(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
          public ambWith(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public filter(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static zip(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.core.ObservableSource<any>, param3: io.reactivex.rxjava3.core.ObservableSource<any>, param4: io.reactivex.rxjava3.functions.Function4<any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public concatMapSingleDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public static intervalRange(param0: number, param1: number, param2: number, param3: number, param4: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<java.lang.Long>;
          public map(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public reduceWith(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Single<any>;
          public static zip(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.core.ObservableSource<any>, param3: io.reactivex.rxjava3.core.ObservableSource<any>, param4: io.reactivex.rxjava3.core.ObservableSource<any>, param5: io.reactivex.rxjava3.core.ObservableSource<any>, param6: io.reactivex.rxjava3.core.ObservableSource<any>, param7: io.reactivex.rxjava3.core.ObservableSource<any>, param8: io.reactivex.rxjava3.functions.Function8<any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public switchMapMaybe(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static fromSupplier(param0: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Observable<any>;
          public blockingSingle(param0: any): any;
          public replay(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number): io.reactivex.rxjava3.core.Observable<any>;
          public static mergeArrayDelayError(param0: number, param1: number, param2: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): io.reactivex.rxjava3.core.Observable<any>;
          public lastElement(): io.reactivex.rxjava3.core.Maybe<any>;
          public static zip(param0: java.lang.Iterable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean, param3: number): io.reactivex.rxjava3.core.Observable<any>;
          public throttleLatest(param0: number, param1: java.util.concurrent.TimeUnit, param2: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public timeout(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public buffer(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<java.util.List<any>>;
          public blockingLast(param0: any): any;
          public groupBy(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public static just(param0: any, param1: any, param2: any, param3: any, param4: any, param5: any, param6: any, param7: any, param8: any): io.reactivex.rxjava3.core.Observable<any>;
          public retry(param0: io.reactivex.rxjava3.functions.BiPredicate<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static fromSingle(param0: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public buffer(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Observable<any>;
          public firstOrErrorStage(): java.util.concurrent.CompletionStage<any>;
          public static intervalRange(param0: number, param1: number, param2: number, param3: number, param4: java.util.concurrent.TimeUnit, param5: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<java.lang.Long>;
          public concatMapCompletable(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number): io.reactivex.rxjava3.core.Completable;
          public static concat(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.core.ObservableSource<any>, param3: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public concatWith(param0: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public blockingForEach(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: number): void;
          public static mergeDelayError(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number): io.reactivex.rxjava3.core.Observable<any>;
          public timeInterval(param0: java.util.concurrent.TimeUnit, param1: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public takeLast(param0: number): io.reactivex.rxjava3.core.Observable<any>;
          public subscribeWith(param0: io.reactivex.rxjava3.core.Observer<any>): io.reactivex.rxjava3.core.Observer<any>;
          public static concatEager(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number, param2: number): io.reactivex.rxjava3.core.Observable<any>;
          public static using(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Consumer<any>, param3: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static generate(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public delaySubscription(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public switchMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number): io.reactivex.rxjava3.core.Observable<any>;
          public concatMapCompletableDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean): io.reactivex.rxjava3.core.Completable;
          public skip(param0: number): io.reactivex.rxjava3.core.Observable<any>;
          public replay(param0: number, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
          public concatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
          public takeLast(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
          public takeLast(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public static generate(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.BiConsumer<any, any>, param2: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
          public concatMapCompletable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
          public switchMapSingleDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static zip(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.core.ObservableSource<any>, param3: io.reactivex.rxjava3.core.ObservableSource<any>, param4: io.reactivex.rxjava3.core.ObservableSource<any>, param5: io.reactivex.rxjava3.core.ObservableSource<any>, param6: io.reactivex.rxjava3.functions.Function6<any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static merge(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public buffer(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number): io.reactivex.rxjava3.core.Observable<any>;
          public concatMapMaybe(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public window(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number): io.reactivex.rxjava3.core.Observable<any>;
          public static mergeDelayError(param0: java.lang.Iterable<any>, param1: number): io.reactivex.rxjava3.core.Observable<any>;
          public static combineLatestDelayError(param0: java.lang.Iterable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public toMap(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public static concatEagerDelayError(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Observable<any>;
          public concatMapIterable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public doOnDispose(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Observable<any>;
          public replay(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
          public concatMapStream(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public skipLast(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public static sequenceEqual(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: number): io.reactivex.rxjava3.core.Single<any>;
          public concatMapSingle(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number): io.reactivex.rxjava3.core.Observable<any>;
          public concatMapCompletableDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean, param2: number): io.reactivex.rxjava3.core.Completable;
          public onTerminateDetach(): io.reactivex.rxjava3.core.Observable<any>;
          public static interval(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<java.lang.Long>;
          public blockingStream(param0: number): java.util.stream.Stream<any>;
          public all(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
          public flatMapCompletable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
          public to(param0: io.reactivex.rxjava3.core.ObservableConverter<any, any>): any;
          public static combineLatest(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.core.ObservableSource<any>, param3: io.reactivex.rxjava3.functions.Function3<any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public startWithArray(param0: androidNative.Array<any>): io.reactivex.rxjava3.core.Observable<any>;
          public debounce(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static concatDelayError(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number, param2: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public elementAt(param0: number): io.reactivex.rxjava3.core.Maybe<any>;
          public skipWhile(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Observable<any>;
          public scanWith(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public switchMapDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public toMultimap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Single<any>;
          public doOnError(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
          public singleOrErrorStage(): java.util.concurrent.CompletionStage<any>;
          public distinctUntilChanged(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static concatEagerDelayError(param0: java.lang.Iterable<any>, param1: number, param2: number): io.reactivex.rxjava3.core.Observable<any>;
          public static generate(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
          public toSortedList(param0: java.util.Comparator<any>, param1: number): io.reactivex.rxjava3.core.Single<java.util.List<any>>;
          public static just(param0: any, param1: any, param2: any, param3: any, param4: any, param5: any): io.reactivex.rxjava3.core.Observable<any>;
          public window(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static merge(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Observable<any>;
          public window(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public sample(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Observable<any>;
          public zipWith(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, param2: boolean, param3: number): io.reactivex.rxjava3.core.Observable<any>;
          public static combineLatest(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.core.ObservableSource<any>, param3: io.reactivex.rxjava3.core.ObservableSource<any>, param4: io.reactivex.rxjava3.core.ObservableSource<any>, param5: io.reactivex.rxjava3.functions.Function5<any, any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static zip(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public toMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public static concatDelayError(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public doOnLifecycle(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Observable<any>;
          public buffer(param0: number, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Observable<any>;
          public takeLast(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
          public first(param0: any): io.reactivex.rxjava3.core.Single<any>;
          public static timer(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<java.lang.Long>;
          public retry(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static just(param0: any, param1: any, param2: any, param3: any, param4: any, param5: any, param6: any, param7: any, param8: any, param9: any): io.reactivex.rxjava3.core.Observable<any>;
          public forEachWhile(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.disposables.Disposable;
          public replay(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
          public switchMapDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number): io.reactivex.rxjava3.core.Observable<any>;
          public zipWith(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public distinct(): io.reactivex.rxjava3.core.Observable<any>;
          public timeout(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public withLatestFrom(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.functions.Function3<any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static just(param0: any, param1: any, param2: any, param3: any, param4: any, param5: any, param6: any, param7: any): io.reactivex.rxjava3.core.Observable<any>;
          public replay(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number, param2: number, param3: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
          public throttleLatest(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
          public buffer(param0: number, param1: number): io.reactivex.rxjava3.core.Observable<java.util.List<any>>;
          public replay(param0: number, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: boolean): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
          public cacheWithInitialCapacity(param0: number): io.reactivex.rxjava3.core.Observable<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, param2: boolean, param3: number, param4: number): io.reactivex.rxjava3.core.Observable<any>;
          public sample(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
          public contains(param0: any): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
          public doOnEach(param0: io.reactivex.rxjava3.core.Observer<any>): io.reactivex.rxjava3.core.Observable<any>;
          public sample(param0: number, param1: java.util.concurrent.TimeUnit, param2: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public safeSubscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
          public static using(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static switchOnNextDelayError(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public concatMapDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public distinct(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public replay(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public switchIfEmpty(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public throttleFirst(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
          public window(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
          public collect(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public flatMapMaybe(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public cache(): io.reactivex.rxjava3.core.Observable<any>;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public blockingIterable(param0: number): java.lang.Iterable<any>;
          public onErrorComplete(): io.reactivex.rxjava3.core.Observable<any>;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
          public buffer(param0: number, param1: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Observable<any>;
          public takeLast(param0: number, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
          public static fromMaybe(param0: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static merge(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public delay(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static fromCompletable(param0: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Observable<any>;
          public replay(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: boolean): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
          public singleElement(): io.reactivex.rxjava3.core.Maybe<any>;
          public concatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public concatMapSingle(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static error(param0: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static combineLatest(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.core.ObservableSource<any>, param3: io.reactivex.rxjava3.core.ObservableSource<any>, param4: io.reactivex.rxjava3.core.ObservableSource<any>, param5: io.reactivex.rxjava3.core.ObservableSource<any>, param6: io.reactivex.rxjava3.functions.Function6<any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static zip(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, param3: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public replay(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
          public singleOrError(): io.reactivex.rxjava3.core.Single<any>;
          public static combineLatest(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.core.ObservableSource<any>, param3: io.reactivex.rxjava3.core.ObservableSource<any>, param4: io.reactivex.rxjava3.core.ObservableSource<any>, param5: io.reactivex.rxjava3.core.ObservableSource<any>, param6: io.reactivex.rxjava3.core.ObservableSource<any>, param7: io.reactivex.rxjava3.core.ObservableSource<any>, param8: io.reactivex.rxjava3.core.ObservableSource<any>, param9: io.reactivex.rxjava3.functions.Function9<any, any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public throttleLatest(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public static just(param0: any): io.reactivex.rxjava3.core.Observable<any>;
          public onErrorReturn(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public last(param0: any): io.reactivex.rxjava3.core.Single<any>;
          public window(param0: number, param1: number, param2: number): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
          public zipWith(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, param2: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public toMultimap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Supplier<any>, param3: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public delay(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
          public window(param0: number): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean, param2: number, param3: number): io.reactivex.rxjava3.core.Observable<any>;
          public blockingSubscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): void;
          public concatMapMaybe(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number): io.reactivex.rxjava3.core.Observable<any>;
          public mergeWith(param0: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public mergeWith(param0: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Observable<any>;
          public static mergeDelayError(param0: java.lang.Iterable<any>, param1: number, param2: number): io.reactivex.rxjava3.core.Observable<any>;
          public doOnNext(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static combineLatest(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static concat(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number): io.reactivex.rxjava3.core.Observable<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, param2: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public switchMap(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public replay(param0: number, param1: boolean): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
          public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
          public toList(param0: number): io.reactivex.rxjava3.core.Single<java.util.List<any>>;
          public static defer(param0: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Observable<any>;
          public buffer(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static concatEagerDelayError(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number, param2: number): io.reactivex.rxjava3.core.Observable<any>;
          public buffer(param0: number, param1: java.util.concurrent.TimeUnit, param2: number): io.reactivex.rxjava3.core.Observable<java.util.List<any>>;
          public timestamp(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public static fromIterable(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static empty(): io.reactivex.rxjava3.core.Observable<any>;
          public static create(param0: io.reactivex.rxjava3.core.ObservableOnSubscribe<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static zip(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.core.ObservableSource<any>, param3: io.reactivex.rxjava3.core.ObservableSource<any>, param4: io.reactivex.rxjava3.core.ObservableSource<any>, param5: io.reactivex.rxjava3.core.ObservableSource<any>, param6: io.reactivex.rxjava3.core.ObservableSource<any>, param7: io.reactivex.rxjava3.functions.Function7<any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public blockingLast(): any;
          public blockingIterable(): java.lang.Iterable<any>;
          public sorted(param0: java.util.Comparator<any>): io.reactivex.rxjava3.core.Observable<any>;
          public window(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: number, param4: boolean, param5: number): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
          public buffer(param0: number): io.reactivex.rxjava3.core.Observable<java.util.List<any>>;
          public static merge(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public skip(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
          public withLatestFrom(param0: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public takeLast(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: boolean, param4: number): io.reactivex.rxjava3.core.Observable<any>;
          public static merge(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.core.ObservableSource<any>, param3: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public concatMapSingleDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public collectInto(param0: any, param1: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public doOnEach(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
          public serialize(): io.reactivex.rxjava3.core.Observable<any>;
          public test(param0: boolean): io.reactivex.rxjava3.observers.TestObserver<any>;
          public static just(param0: any, param1: any, param2: any, param3: any, param4: any): io.reactivex.rxjava3.core.Observable<any>;
          public groupBy(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public throttleLast(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
          public test(): io.reactivex.rxjava3.observers.TestObserver<any>;
          public static interval(param0: number, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<java.lang.Long>;
          public static just(param0: any, param1: any, param2: any, param3: any, param4: any, param5: any, param6: any): io.reactivex.rxjava3.core.Observable<any>;
          public static concat(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static switchOnNextDelayError(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number): io.reactivex.rxjava3.core.Observable<any>;
          public static concatArrayDelayError(param0: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): io.reactivex.rxjava3.core.Observable<any>;
          public timeout(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public mergeWith(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public forEachWhile(param0: io.reactivex.rxjava3.functions.Predicate<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public takeUntil(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public observeOn(param0: io.reactivex.rxjava3.core.Scheduler, param1: boolean, param2: number): io.reactivex.rxjava3.core.Observable<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Supplier<any>, param3: number): io.reactivex.rxjava3.core.Observable<any>;
          public delaySubscription(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
          public elementAtOrError(param0: number): io.reactivex.rxjava3.core.Single<any>;
          public take(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
          public static mergeDelayError(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public window(param0: number, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: number): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
          public doOnTerminate(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Observable<any>;
          public buffer(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Observable<any>;
          public collect(param0: java.util.stream.Collector): io.reactivex.rxjava3.core.Single<any>;
          public static combineLatestArray(param0: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public delay(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
          public skip(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
          public static concat(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public hide(): io.reactivex.rxjava3.core.Observable<any>;
          public static fromOptional(param0: java.util.Optional): io.reactivex.rxjava3.core.Observable<any>;
          public takeLast(param0: number, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: boolean, param5: number): io.reactivex.rxjava3.core.Observable<any>;
          public startWith(param0: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static generate(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public toList(): io.reactivex.rxjava3.core.Single<java.util.List<any>>;
          public doOnSubscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, param2: number): io.reactivex.rxjava3.core.Observable<any>;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public throttleLast(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
          public static combineLatest(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.core.ObservableSource<any>, param3: io.reactivex.rxjava3.core.ObservableSource<any>, param4: io.reactivex.rxjava3.core.ObservableSource<any>, param5: io.reactivex.rxjava3.core.ObservableSource<any>, param6: io.reactivex.rxjava3.core.ObservableSource<any>, param7: io.reactivex.rxjava3.functions.Function7<any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public doOnComplete(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Observable<any>;
          public static combineLatest(param0: java.lang.Iterable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public groupBy(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public lastOrError(): io.reactivex.rxjava3.core.Single<any>;
          public subscribeOn(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
          public skipLast(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: boolean, param4: number): io.reactivex.rxjava3.core.Observable<any>;
          public static concatArrayEagerDelayError(param0: number, param1: number, param2: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): io.reactivex.rxjava3.core.Observable<any>;
          public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
          public retryUntil(param0: io.reactivex.rxjava3.functions.BooleanSupplier): io.reactivex.rxjava3.core.Observable<any>;
          public static zip(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.core.ObservableSource<any>, param3: io.reactivex.rxjava3.core.ObservableSource<any>, param4: io.reactivex.rxjava3.core.ObservableSource<any>, param5: io.reactivex.rxjava3.functions.Function5<any, any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public replay(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static concatArrayEagerDelayError(param0: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): io.reactivex.rxjava3.core.Observable<any>;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.core.Observable<any>;
          public concatWith(param0: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Observable<any>;
          public static zip(param0: java.lang.Iterable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public takeLast(param0: number, param1: java.util.concurrent.TimeUnit, param2: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public concatMapEager(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public cast(param0: java.lang.Class<any>): io.reactivex.rxjava3.core.Observable<any>;
          public reduce(param0: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static switchOnNext(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public flatMapIterable(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public window(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: number, param4: boolean): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
          public retry(param0: number): io.reactivex.rxjava3.core.Observable<any>;
          public static concatEagerDelayError(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public take(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
          public static concatArrayEager(param0: number, param1: number, param2: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): io.reactivex.rxjava3.core.Observable<any>;
          public static concatDelayError(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Observable<any>;
          public buffer(param0: number, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<java.util.List<any>>;
          public repeatUntil(param0: io.reactivex.rxjava3.functions.BooleanSupplier): io.reactivex.rxjava3.core.Observable<any>;
          public buffer(param0: number, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<java.util.List<any>>;
          public static interval(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<java.lang.Long>;
          public static rangeLong(param0: number, param1: number): io.reactivex.rxjava3.core.Observable<java.lang.Long>;
          public lastStage(param0: any): java.util.concurrent.CompletionStage<any>;
          public takeUntil(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Observable<any>;
          public timeout(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
          public static merge(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number): io.reactivex.rxjava3.core.Observable<any>;
          public static timer(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<java.lang.Long>;
          public distinct(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Observable<any>;
          public timeout(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
          public replay(): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
          public static concatArray(param0: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): io.reactivex.rxjava3.core.Observable<any>;
          public count(): io.reactivex.rxjava3.core.Single<java.lang.Long>;
          public firstElement(): io.reactivex.rxjava3.core.Maybe<any>;
          public replay(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number, param2: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public startWith(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public timeInterval(param0: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public flatMapCompletable(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean): io.reactivex.rxjava3.core.Completable;
          public retry(): io.reactivex.rxjava3.core.Observable<any>;
          public startWithItem(param0: any): io.reactivex.rxjava3.core.Observable<any>;
          public toSortedList(param0: java.util.Comparator<any>): io.reactivex.rxjava3.core.Single<java.util.List<any>>;
          public concatMapMaybeDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public blockingNext(): java.lang.Iterable<any>;
          public any(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
          public toMultimap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public static fromCompletionStage(param0: java.util.concurrent.CompletionStage): io.reactivex.rxjava3.core.Observable<any>;
          public debounce(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
          public static sequenceEqual(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Single<any>;
          public static fromStream(param0: java.util.stream.Stream): io.reactivex.rxjava3.core.Observable<any>;
          public withLatestFrom(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.core.ObservableSource<any>, param3: io.reactivex.rxjava3.core.ObservableSource<any>, param4: io.reactivex.rxjava3.functions.Function5<any, any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static concatArrayEager(param0: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): io.reactivex.rxjava3.core.Observable<any>;
          public static sequenceEqual(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.functions.BiPredicate<any, any>, param3: number): io.reactivex.rxjava3.core.Single<any>;
          public window(param0: number, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
          public delay(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static sequenceEqual(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.functions.BiPredicate<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static mergeArrayDelayError(param0: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): io.reactivex.rxjava3.core.Observable<any>;
          public defaultIfEmpty(param0: any): io.reactivex.rxjava3.core.Observable<any>;
          public publish(): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
          public switchMapSingle(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.core.Observable<any>;
          public static zip(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.core.ObservableSource<any>, param3: io.reactivex.rxjava3.core.ObservableSource<any>, param4: io.reactivex.rxjava3.core.ObservableSource<any>, param5: io.reactivex.rxjava3.core.ObservableSource<any>, param6: io.reactivex.rxjava3.core.ObservableSource<any>, param7: io.reactivex.rxjava3.core.ObservableSource<any>, param8: io.reactivex.rxjava3.core.ObservableSource<any>, param9: io.reactivex.rxjava3.functions.Function9<any, any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public ignoreElements(): io.reactivex.rxjava3.core.Completable;
          public timestamp(): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public startWith(param0: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public lastOrErrorStage(): java.util.concurrent.CompletionStage<any>;
          public static never(): io.reactivex.rxjava3.core.Observable<any>;
          public isEmpty(): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
          public doAfterTerminate(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Observable<any>;
          public static zip(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, param3: boolean, param4: number): io.reactivex.rxjava3.core.Observable<any>;
          public static range(param0: number, param1: number): io.reactivex.rxjava3.core.Observable<java.lang.Integer>;
          public static zipArray(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean, param2: number, param3: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): io.reactivex.rxjava3.core.Observable<any>;
          public single(param0: any): io.reactivex.rxjava3.core.Single<any>;
          public publish(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public concatMapCompletableDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
          public static combineLatestArrayDelayError(param0: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number): io.reactivex.rxjava3.core.Observable<any>;
          public firstStage(param0: any): java.util.concurrent.CompletionStage<any>;
          public distinctUntilChanged(param0: io.reactivex.rxjava3.functions.BiPredicate<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public toList(param0: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Single<any>;
          public distinctUntilChanged(): io.reactivex.rxjava3.core.Observable<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static concatEager(param0: java.lang.Iterable<any>, param1: number, param2: number): io.reactivex.rxjava3.core.Observable<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean): io.reactivex.rxjava3.core.Observable<any>;
          public toMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Single<any>;
          public unsubscribeOn(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
          public groupJoin(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Function<any, any>, param3: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public reduce(param0: any, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Single<any>;
          public flatMapStream(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static concat(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public takeLast(param0: number, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
          public scan(param0: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public buffer(param0: number, param1: number, param2: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Observable<any>;
          public switchMapCompletableDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
          public toMultimap(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public mergeWith(param0: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static combineLatest(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.core.ObservableSource<any>, param3: io.reactivex.rxjava3.core.ObservableSource<any>, param4: io.reactivex.rxjava3.functions.Function4<any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public toSortedList(param0: number): io.reactivex.rxjava3.core.Single<java.util.List<any>>;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class ObservableConverter<T, R> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.ObservableConverter<any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.ObservableConverter<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: io.reactivex.rxjava3.core.Observable<T>): R });
          public constructor();
          public apply(param0: io.reactivex.rxjava3.core.Observable<T>): R;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class ObservableEmitter<T> extends io.reactivex.rxjava3.core.Emitter<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.ObservableEmitter<any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.ObservableEmitter<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void; setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void; isDisposed(): boolean; serialize(): io.reactivex.rxjava3.core.ObservableEmitter<any>; tryOnError(param0: java.lang.Throwable): boolean; onNext(param0: any): void; onError(param0: java.lang.Throwable): void; onComplete(): void });
          public constructor();
          public serialize(): io.reactivex.rxjava3.core.ObservableEmitter<any>;
          public isDisposed(): boolean;
          public tryOnError(param0: java.lang.Throwable): boolean;
          public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
          public onComplete(): void;
          public onError(param0: java.lang.Throwable): void;
          public onNext(param0: any): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class ObservableOnSubscribe<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.ObservableOnSubscribe<any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.ObservableOnSubscribe<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { subscribe(param0: io.reactivex.rxjava3.core.ObservableEmitter<T>): void });
          public constructor();
          public subscribe(param0: io.reactivex.rxjava3.core.ObservableEmitter<T>): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class ObservableOperator<Downstream, Upstream> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.ObservableOperator<any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.ObservableOperator<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: io.reactivex.rxjava3.core.Observer<any>): io.reactivex.rxjava3.core.Observer<any> });
          public constructor();
          public apply(param0: io.reactivex.rxjava3.core.Observer<any>): io.reactivex.rxjava3.core.Observer<any>;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class ObservableSource<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.ObservableSource<any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.ObservableSource<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void });
          public constructor();
          public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class ObservableTransformer<Upstream, Downstream> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.ObservableTransformer<any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.ObservableTransformer<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: io.reactivex.rxjava3.core.Observable<Upstream>): io.reactivex.rxjava3.core.ObservableSource<Downstream> });
          public constructor();
          public apply(param0: io.reactivex.rxjava3.core.Observable<Upstream>): io.reactivex.rxjava3.core.ObservableSource<Downstream>;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class Observer<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.Observer<any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.Observer<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void; onNext(param0: T): void; onError(param0: java.lang.Throwable): void; onComplete(): void });
          public constructor();
          public onComplete(): void;
          public onNext(param0: T): void;
          public onError(param0: java.lang.Throwable): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export abstract class Scheduler {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.Scheduler>;
          public schedulePeriodicallyDirect(param0: java.lang.Runnable, param1: number, param2: number, param3: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
          public shutdown(): void;
          public constructor();
          public scheduleDirect(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          public scheduleDirect(param0: java.lang.Runnable, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
          public now(param0: java.util.concurrent.TimeUnit): number;
          public static clockDriftTolerance(): number;
          public createWorker(): io.reactivex.rxjava3.core.Scheduler.Worker;
          public when(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Scheduler;
          public start(): void;
        }
        export module Scheduler {
          export class DisposeTask implements io.reactivex.rxjava3.disposables.Disposable, io.reactivex.rxjava3.schedulers.SchedulerRunnableIntrospection {
            public static class: java.lang.Class<io.reactivex.rxjava3.core.Scheduler.DisposeTask>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public dispose(): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public run(): void;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public getWrappedRunnable(): java.lang.Runnable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
          export class PeriodicDirectTask implements io.reactivex.rxjava3.disposables.Disposable, io.reactivex.rxjava3.schedulers.SchedulerRunnableIntrospection {
            public static class: java.lang.Class<io.reactivex.rxjava3.core.Scheduler.PeriodicDirectTask>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public dispose(): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public run(): void;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public getWrappedRunnable(): java.lang.Runnable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
          export abstract class Worker extends io.reactivex.rxjava3.disposables.Disposable {
            public static class: java.lang.Class<io.reactivex.rxjava3.core.Scheduler.Worker>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public constructor();
            public schedule(param0: java.lang.Runnable, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public now(param0: java.util.concurrent.TimeUnit): number;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public dispose(): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public schedulePeriodically(param0: java.lang.Runnable, param1: number, param2: number, param3: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
            public schedule(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
          export module Worker {
            export class PeriodicTask extends io.reactivex.rxjava3.schedulers.SchedulerRunnableIntrospection {
              public static class: java.lang.Class<io.reactivex.rxjava3.core.Scheduler.Worker.PeriodicTask>;
              public getWrappedRunnable(): java.lang.Runnable;
              public run(): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export abstract class Single<T> extends io.reactivex.rxjava3.core.SingleSource<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.Single<any>>;
          public static concatEagerDelayError(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public toFuture(): java.util.concurrent.Future<any>;
          public static never(): io.reactivex.rxjava3.core.Single<any>;
          public blockingSubscribe(): void;
          public static concat(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>, param2: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public doOnLifecycle(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Single<any>;
          public static sequenceEqual(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Single<any>;
          public ambWith(param0: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Single<any>;
          public static concatArrayEagerDelayError(param0: androidNative.Array<io.reactivex.rxjava3.core.SingleSource<any>>): io.reactivex.rxjava3.core.Flowable<any>;
          public constructor();
          public hide(): io.reactivex.rxjava3.core.Single<any>;
          public static mergeDelayError(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public delay(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: boolean): io.reactivex.rxjava3.core.Single<any>;
          public static mergeDelayError(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>, param2: io.reactivex.rxjava3.core.SingleSource<any>, param3: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public retryUntil(param0: io.reactivex.rxjava3.functions.BooleanSupplier): io.reactivex.rxjava3.core.Single<any>;
          public toObservable(): io.reactivex.rxjava3.core.Observable<any>;
          public static concat(param0: org.reactivestreams.Publisher, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public static concat(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public observeOn(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Single<any>;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.core.Single<any>;
          public delaySubscription(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Single<any>;
          public doAfterSuccess(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Single<any>;
          public static concatArrayDelayError(param0: androidNative.Array<io.reactivex.rxjava3.core.SingleSource<any>>): io.reactivex.rxjava3.core.Flowable<any>;
          public static concatEager(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public doAfterTerminate(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Single<any>;
          public static create(param0: io.reactivex.rxjava3.core.SingleOnSubscribe<any>): io.reactivex.rxjava3.core.Single<any>;
          public static fromSupplier(param0: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Single<any>;
          public cast(param0: java.lang.Class<any>): io.reactivex.rxjava3.core.Single<any>;
          public retry(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Single<any>;
          public timeout(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Single<any>;
          public delaySubscription(param0: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Single<any>;
          public startWith(param0: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Flowable<any>;
          public delay(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Single<any>;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public takeUntil(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Single<any>;
          public contains(param0: any): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
          public static merge(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static zipArray(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: androidNative.Array<io.reactivex.rxjava3.core.SingleSource<any>>): io.reactivex.rxjava3.core.Single<any>;
          public concatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public subscribeOn(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Single<any>;
          public flattenStreamAsFlowable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static ambArray(param0: androidNative.Array<io.reactivex.rxjava3.core.SingleSource<any>>): io.reactivex.rxjava3.core.Single<any>;
          public blockingSubscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): void;
          public materialize(): io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.core.Notification<any>>;
          public timestamp(param0: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public static mergeDelayError(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public static merge(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMapMaybe(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public takeUntil(param0: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Single<any>;
          public static zip(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>, param2: io.reactivex.rxjava3.core.SingleSource<any>, param3: io.reactivex.rxjava3.functions.Function3<any, any, any, any>): io.reactivex.rxjava3.core.Single<any>;
          public cache(): io.reactivex.rxjava3.core.Single<any>;
          public toCompletionStage(): java.util.concurrent.CompletionStage<any>;
          public timeInterval(): io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public static fromMaybe(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: any): io.reactivex.rxjava3.core.Single<any>;
          public static timer(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Single<java.lang.Long>;
          public blockingSubscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
          public static defer(param0: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Single<any>;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public timeInterval(param0: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public takeUntil(param0: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Single<any>;
          public static zip(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>, param2: io.reactivex.rxjava3.core.SingleSource<any>, param3: io.reactivex.rxjava3.core.SingleSource<any>, param4: io.reactivex.rxjava3.core.SingleSource<any>, param5: io.reactivex.rxjava3.functions.Function5<any, any, any, any, any, any>): io.reactivex.rxjava3.core.Single<any>;
          public startWith(param0: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public flattenStreamAsObservable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static mergeArray(param0: androidNative.Array<io.reactivex.rxjava3.core.SingleSource<any>>): io.reactivex.rxjava3.core.Flowable<any>;
          public to(param0: io.reactivex.rxjava3.core.SingleConverter<any, any>): any;
          public static fromCompletionStage(param0: java.util.concurrent.CompletionStage): io.reactivex.rxjava3.core.Single<any>;
          public filter(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public ignoreElement(): io.reactivex.rxjava3.core.Completable;
          public mergeWith(param0: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public repeat(param0: number): io.reactivex.rxjava3.core.Flowable<any>;
          public static fromCallable(param0: java.util.concurrent.Callable<any>): io.reactivex.rxjava3.core.Single<any>;
          public static zip(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Single<any>;
          public retry(param0: io.reactivex.rxjava3.functions.BiPredicate<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public repeatWhen(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public zipWith(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Single<any>;
          public doOnSuccess(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Single<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Single<any>;
          public map(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public static zip(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>, param2: io.reactivex.rxjava3.core.SingleSource<any>, param3: io.reactivex.rxjava3.core.SingleSource<any>, param4: io.reactivex.rxjava3.core.SingleSource<any>, param5: io.reactivex.rxjava3.core.SingleSource<any>, param6: io.reactivex.rxjava3.functions.Function6<any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Single<any>;
          public concatMapMaybe(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public doFinally(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Single<any>;
          public static switchOnNextDelayError(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public static using(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Consumer<any>, param3: boolean): io.reactivex.rxjava3.core.Single<any>;
          public flattenAsObservable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static concatEager(param0: org.reactivestreams.Publisher, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public static using(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Single<any>;
          public static concatArray(param0: androidNative.Array<io.reactivex.rxjava3.core.SingleSource<any>>): io.reactivex.rxjava3.core.Flowable<any>;
          public timeInterval(param0: java.util.concurrent.TimeUnit, param1: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public static merge(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>, param2: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static concatDelayError(param0: org.reactivestreams.Publisher, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public doOnSubscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Single<any>;
          public timeInterval(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public static wrap(param0: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Single<any>;
          public static concatDelayError(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public static mergeDelayError(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static error(param0: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Single<any>;
          public static concatEagerDelayError(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public onErrorResumeNext(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public timeout(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Single<any>;
          public static concatEager(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public delay(param0: number, param1: java.util.concurrent.TimeUnit, param2: boolean): io.reactivex.rxjava3.core.Single<any>;
          public startWith(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
          public timestamp(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public static fromMaybe(param0: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Single<any>;
          public ofType(param0: java.lang.Class<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public concatWith(param0: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public onErrorReturn(param0: io.reactivex.rxjava3.functions.Function<java.lang.Throwable, any>): io.reactivex.rxjava3.core.Single<any>;
          public static mergeArrayDelayError(param0: androidNative.Array<io.reactivex.rxjava3.core.SingleSource<any>>): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMapObservable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
          public static merge(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public onErrorReturnItem(param0: any): io.reactivex.rxjava3.core.Single<any>;
          public compose(param0: io.reactivex.rxjava3.core.SingleTransformer<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public delay(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Single<any>;
          public static unsafeCreate(param0: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Single<any>;
          public doOnTerminate(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Single<any>;
          public static just(param0: any): io.reactivex.rxjava3.core.Single<any>;
          public lift(param0: io.reactivex.rxjava3.core.SingleOperator<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public timestamp(): io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public dematerialize(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public concatMapCompletable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
          public static concat(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public static fromPublisher(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Single<any>;
          public static zip(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>, param2: io.reactivex.rxjava3.core.SingleSource<any>, param3: io.reactivex.rxjava3.core.SingleSource<any>, param4: io.reactivex.rxjava3.core.SingleSource<any>, param5: io.reactivex.rxjava3.core.SingleSource<any>, param6: io.reactivex.rxjava3.core.SingleSource<any>, param7: io.reactivex.rxjava3.functions.Function7<any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Single<any>;
          public retryWhen(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public retry(param0: number, param1: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Single<any>;
          public static fromObservable(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Single<any>;
          public doOnDispose(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Single<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
          public blockingGet(): any;
          public static concatArrayEager(param0: androidNative.Array<io.reactivex.rxjava3.core.SingleSource<any>>): io.reactivex.rxjava3.core.Flowable<any>;
          public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
          public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
          public mapOptional(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
          public delaySubscription(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Single<any>;
          public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
          public safeSubscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
          public static concatEagerDelayError(param0: java.lang.Iterable<any>, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public static mergeDelayError(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>, param2: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static error(param0: java.lang.Throwable): io.reactivex.rxjava3.core.Single<any>;
          public doOnError(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Single<any>;
          public delaySubscription(param0: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Single<any>;
          public toFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
          public timestamp(param0: java.util.concurrent.TimeUnit, param1: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public unsubscribeOn(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Single<any>;
          public static amb(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Single<any>;
          public blockingSubscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): void;
          public onTerminateDetach(): io.reactivex.rxjava3.core.Single<any>;
          public static zip(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>, param2: io.reactivex.rxjava3.core.SingleSource<any>, param3: io.reactivex.rxjava3.core.SingleSource<any>, param4: io.reactivex.rxjava3.functions.Function4<any, any, any, any, any>): io.reactivex.rxjava3.core.Single<any>;
          public static zip(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>, param2: io.reactivex.rxjava3.core.SingleSource<any>, param3: io.reactivex.rxjava3.core.SingleSource<any>, param4: io.reactivex.rxjava3.core.SingleSource<any>, param5: io.reactivex.rxjava3.core.SingleSource<any>, param6: io.reactivex.rxjava3.core.SingleSource<any>, param7: io.reactivex.rxjava3.core.SingleSource<any>, param8: io.reactivex.rxjava3.functions.Function8<any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Single<any>;
          public onErrorComplete(): io.reactivex.rxjava3.core.Maybe<any>;
          public startWith(param0: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMapCompletable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
          public repeatUntil(param0: io.reactivex.rxjava3.functions.BooleanSupplier): io.reactivex.rxjava3.core.Flowable<any>;
          public static concatEager(param0: java.lang.Iterable<any>, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public static timer(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Single<java.lang.Long>;
          public static zip(param0: java.lang.Iterable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public static switchOnNext(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
          public toMaybe(): io.reactivex.rxjava3.core.Maybe<any>;
          public repeat(): io.reactivex.rxjava3.core.Flowable<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public static zip(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>, param2: io.reactivex.rxjava3.core.SingleSource<any>, param3: io.reactivex.rxjava3.core.SingleSource<any>, param4: io.reactivex.rxjava3.core.SingleSource<any>, param5: io.reactivex.rxjava3.core.SingleSource<any>, param6: io.reactivex.rxjava3.core.SingleSource<any>, param7: io.reactivex.rxjava3.core.SingleSource<any>, param8: io.reactivex.rxjava3.core.SingleSource<any>, param9: io.reactivex.rxjava3.functions.Function9<any, any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Single<any>;
          public flattenAsFlowable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static concat(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Single<any>;
          public onErrorResumeWith(param0: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Single<any>;
          public doOnEvent(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.core.Single<any>;
          public timeout(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Single<any>;
          public static merge(param0: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Single<any>;
          public static concatEagerDelayError(param0: org.reactivestreams.Publisher, param1: number): io.reactivex.rxjava3.core.Flowable<any>;
          public static concat(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>, param2: io.reactivex.rxjava3.core.SingleSource<any>, param3: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static concatDelayError(param0: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public test(param0: boolean): io.reactivex.rxjava3.observers.TestObserver<any>;
          public subscribeWith(param0: io.reactivex.rxjava3.core.SingleObserver<any>): io.reactivex.rxjava3.core.SingleObserver<any>;
          public flatMapPublisher(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
          public retry(): io.reactivex.rxjava3.core.Single<any>;
          public test(): io.reactivex.rxjava3.observers.TestObserver<any>;
          public onErrorComplete(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public retry(param0: number): io.reactivex.rxjava3.core.Single<any>;
          public contains(param0: any, param1: io.reactivex.rxjava3.functions.BiPredicate<any, any>): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
          public static concat(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static merge(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>, param2: io.reactivex.rxjava3.core.SingleSource<any>, param3: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public delaySubscription(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Single<any>;
          public timeout(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Single<any>;
          public delaySubscription(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Single<any>;
          public startWith(param0: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Flowable<any>;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class SingleConverter<T, R> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.SingleConverter<any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.SingleConverter<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: io.reactivex.rxjava3.core.Single<T>): R });
          public constructor();
          public apply(param0: io.reactivex.rxjava3.core.Single<T>): R;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class SingleEmitter<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.SingleEmitter<any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.SingleEmitter<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { onSuccess(param0: T): void; onError(param0: java.lang.Throwable): void; setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void; setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void; isDisposed(): boolean; tryOnError(param0: java.lang.Throwable): boolean });
          public constructor();
          public isDisposed(): boolean;
          public tryOnError(param0: java.lang.Throwable): boolean;
          public onSuccess(param0: T): void;
          public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
          public onError(param0: java.lang.Throwable): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class SingleObserver<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.SingleObserver<any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.SingleObserver<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void; onSuccess(param0: T): void; onError(param0: java.lang.Throwable): void });
          public constructor();
          public onSuccess(param0: T): void;
          public onError(param0: java.lang.Throwable): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class SingleOnSubscribe<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.SingleOnSubscribe<any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.SingleOnSubscribe<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { subscribe(param0: io.reactivex.rxjava3.core.SingleEmitter<T>): void });
          public constructor();
          public subscribe(param0: io.reactivex.rxjava3.core.SingleEmitter<T>): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class SingleOperator<Downstream, Upstream> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.SingleOperator<any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.SingleOperator<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: io.reactivex.rxjava3.core.SingleObserver<any>): io.reactivex.rxjava3.core.SingleObserver<any> });
          public constructor();
          public apply(param0: io.reactivex.rxjava3.core.SingleObserver<any>): io.reactivex.rxjava3.core.SingleObserver<any>;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class SingleSource<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.SingleSource<any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.SingleSource<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void });
          public constructor();
          public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module core {
        export class SingleTransformer<Upstream, Downstream> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.core.SingleTransformer<any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.core.SingleTransformer<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: io.reactivex.rxjava3.core.Single<Upstream>): io.reactivex.rxjava3.core.SingleSource<Downstream> });
          public constructor();
          public apply(param0: io.reactivex.rxjava3.core.Single<Upstream>): io.reactivex.rxjava3.core.SingleSource<Downstream>;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module disposables {
        export class ActionDisposable extends io.reactivex.rxjava3.disposables.ReferenceDisposable<io.reactivex.rxjava3.functions.Action> {
          public static class: java.lang.Class<io.reactivex.rxjava3.disposables.ActionDisposable>;
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static empty(): io.reactivex.rxjava3.disposables.Disposable;
          public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
          public dispose(): void;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
          public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
          public toString(): string;
          public isDisposed(): boolean;
          public onDisposed(param0: any): void;
          public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
          public onDisposed(param0: io.reactivex.rxjava3.functions.Action): void;
          public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module disposables {
        export class AutoCloseableDisposable extends io.reactivex.rxjava3.disposables.ReferenceDisposable<java.lang.AutoCloseable> {
          public static class: java.lang.Class<io.reactivex.rxjava3.disposables.AutoCloseableDisposable>;
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static empty(): io.reactivex.rxjava3.disposables.Disposable;
          public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
          public dispose(): void;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
          public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
          public toString(): string;
          public isDisposed(): boolean;
          public onDisposed(param0: any): void;
          public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
          public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          public onDisposed(param0: java.lang.AutoCloseable): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module disposables {
        export class CompositeDisposable implements io.reactivex.rxjava3.disposables.Disposable, io.reactivex.rxjava3.disposables.DisposableContainer {
          public static class: java.lang.Class<io.reactivex.rxjava3.disposables.CompositeDisposable>;
          public constructor(param0: androidNative.Array<io.reactivex.rxjava3.disposables.Disposable>);
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static empty(): io.reactivex.rxjava3.disposables.Disposable;
          public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
          public dispose(): void;
          public addAll(param0: androidNative.Array<io.reactivex.rxjava3.disposables.Disposable>): boolean;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
          public size(): number;
          public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
          public remove(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
          public isDisposed(): boolean;
          public constructor();
          public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
          public constructor(param0: java.lang.Iterable<any>);
          public delete(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
          public clear(): void;
          public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          public add(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module disposables {
        export class Disposable {
          public static class: java.lang.Class<io.reactivex.rxjava3.disposables.Disposable>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.disposables.Disposable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: {
            dispose(): void;
            isDisposed(): boolean;
            fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            empty(): io.reactivex.rxjava3.disposables.Disposable;
            disposed(): io.reactivex.rxjava3.disposables.Disposable;
          });
          public constructor();
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
          public isDisposed(): boolean;
          public static empty(): io.reactivex.rxjava3.disposables.Disposable;
          public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
          public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
          public dispose(): void;
          public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
          public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module disposables {
        export class DisposableContainer {
          public static class: java.lang.Class<io.reactivex.rxjava3.disposables.DisposableContainer>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.disposables.DisposableContainer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { add(param0: io.reactivex.rxjava3.disposables.Disposable): boolean; remove(param0: io.reactivex.rxjava3.disposables.Disposable): boolean; delete(param0: io.reactivex.rxjava3.disposables.Disposable): boolean });
          public constructor();
          public delete(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
          public add(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
          public remove(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module disposables {
        export class FutureDisposable extends java.util.concurrent.atomic.AtomicReference<java.util.concurrent.Future<any>> implements io.reactivex.rxjava3.disposables.Disposable {
          public static class: java.lang.Class<io.reactivex.rxjava3.disposables.FutureDisposable>;
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
          public isDisposed(): boolean;
          public static empty(): io.reactivex.rxjava3.disposables.Disposable;
          public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
          public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
          public dispose(): void;
          public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
          public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module disposables {
        export abstract class ReferenceDisposable<T> extends java.util.concurrent.atomic.AtomicReference<any> implements io.reactivex.rxjava3.disposables.Disposable {
          public static class: java.lang.Class<io.reactivex.rxjava3.disposables.ReferenceDisposable<any>>;
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
          public isDisposed(): boolean;
          public static empty(): io.reactivex.rxjava3.disposables.Disposable;
          public onDisposed(param0: any): void;
          public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
          public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
          public dispose(): void;
          public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
          public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module disposables {
        export class RunnableDisposable extends io.reactivex.rxjava3.disposables.ReferenceDisposable<java.lang.Runnable> {
          public static class: java.lang.Class<io.reactivex.rxjava3.disposables.RunnableDisposable>;
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static empty(): io.reactivex.rxjava3.disposables.Disposable;
          public onDisposed(param0: java.lang.Runnable): void;
          public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
          public dispose(): void;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
          public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
          public toString(): string;
          public isDisposed(): boolean;
          public onDisposed(param0: any): void;
          public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
          public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module disposables {
        export class SerialDisposable extends io.reactivex.rxjava3.disposables.Disposable {
          public static class: java.lang.Class<io.reactivex.rxjava3.disposables.SerialDisposable>;
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
          public get(): io.reactivex.rxjava3.disposables.Disposable;
          public static empty(): io.reactivex.rxjava3.disposables.Disposable;
          public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
          public dispose(): void;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
          public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
          public replace(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
          public constructor(param0: io.reactivex.rxjava3.disposables.Disposable);
          public set(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
          public isDisposed(): boolean;
          public constructor();
          public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
          public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module disposables {
        export class SubscriptionDisposable extends io.reactivex.rxjava3.disposables.ReferenceDisposable<org.reactivestreams.Subscription> {
          public static class: java.lang.Class<io.reactivex.rxjava3.disposables.SubscriptionDisposable>;
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static empty(): io.reactivex.rxjava3.disposables.Disposable;
          public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
          public onDisposed(param0: org.reactivestreams.Subscription): void;
          public dispose(): void;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
          public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
          public isDisposed(): boolean;
          public onDisposed(param0: any): void;
          public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
          public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module exceptions {
        export class CompositeException {
          public static class: java.lang.Class<io.reactivex.rxjava3.exceptions.CompositeException>;
          public printStackTrace(param0: java.io.PrintWriter): void;
          public constructor(param0: androidNative.Array<java.lang.Throwable>);
          public getExceptions(): java.util.List<java.lang.Throwable>;
          public constructor(param0: java.lang.Iterable<any>);
          public printStackTrace(param0: java.io.PrintStream): void;
          public getMessage(): string;
          public size(): number;
          public getCause(): java.lang.Throwable;
          public printStackTrace(): void;
        }
        export module CompositeException {
          export class ExceptionOverview {
            public static class: java.lang.Class<io.reactivex.rxjava3.exceptions.CompositeException.ExceptionOverview>;
            public fillInStackTrace(): java.lang.Throwable;
          }
          export abstract class PrintStreamOrWriter {
            public static class: java.lang.Class<io.reactivex.rxjava3.exceptions.CompositeException.PrintStreamOrWriter>;
          }
          export class WrappedPrintStream extends io.reactivex.rxjava3.exceptions.CompositeException.PrintStreamOrWriter {
            public static class: java.lang.Class<io.reactivex.rxjava3.exceptions.CompositeException.WrappedPrintStream>;
          }
          export class WrappedPrintWriter extends io.reactivex.rxjava3.exceptions.CompositeException.PrintStreamOrWriter {
            public static class: java.lang.Class<io.reactivex.rxjava3.exceptions.CompositeException.WrappedPrintWriter>;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module exceptions {
        export class Exceptions {
          public static class: java.lang.Class<io.reactivex.rxjava3.exceptions.Exceptions>;
          public static propagate(param0: java.lang.Throwable): java.lang.RuntimeException;
          public static throwIfFatal(param0: java.lang.Throwable): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module exceptions {
        export class MissingBackpressureException {
          public static class: java.lang.Class<io.reactivex.rxjava3.exceptions.MissingBackpressureException>;
          public constructor(param0: string);
          public constructor();
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module exceptions {
        export class OnErrorNotImplementedException {
          public static class: java.lang.Class<io.reactivex.rxjava3.exceptions.OnErrorNotImplementedException>;
          public constructor(param0: string, param1: java.lang.Throwable);
          public constructor(param0: java.lang.Throwable);
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module exceptions {
        export class ProtocolViolationException {
          public static class: java.lang.Class<io.reactivex.rxjava3.exceptions.ProtocolViolationException>;
          public constructor(param0: string);
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module exceptions {
        export class UndeliverableException {
          public static class: java.lang.Class<io.reactivex.rxjava3.exceptions.UndeliverableException>;
          public constructor(param0: java.lang.Throwable);
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module flowables {
        export abstract class ConnectableFlowable<T> extends io.reactivex.rxjava3.core.Flowable<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.flowables.ConnectableFlowable<any>>;
          public reset(): void;
          public autoConnect(param0: number): io.reactivex.rxjava3.core.Flowable<any>;
          public refCount(): io.reactivex.rxjava3.core.Flowable<any>;
          public refCount(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
          public refCount(param0: number): io.reactivex.rxjava3.core.Flowable<any>;
          public refCount(param0: number, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
          public autoConnect(): io.reactivex.rxjava3.core.Flowable<any>;
          public refCount(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
          public constructor();
          public connect(param0: io.reactivex.rxjava3.functions.Consumer<any>): void;
          public refCount(param0: number, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
          public autoConnect(param0: number, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public connect(): io.reactivex.rxjava3.disposables.Disposable;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module flowables {
        export abstract class GroupedFlowable<K, T> extends io.reactivex.rxjava3.core.Flowable<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.flowables.GroupedFlowable<any, any>>;
          public constructor();
          public constructor(param0: any);
          public getKey(): any;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module functions {
        export class Action {
          public static class: java.lang.Class<io.reactivex.rxjava3.functions.Action>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.functions.Action interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { run(): void });
          public constructor();
          public run(): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module functions {
        export class BiConsumer<T1, T2> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.functions.BiConsumer<any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.functions.BiConsumer<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { accept(param0: T1, param1: T2): void });
          public constructor();
          public accept(param0: T1, param1: T2): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module functions {
        export class BiFunction<T1, T2, R> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.functions.BiFunction<any, any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.functions.BiFunction<any,any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: T1, param1: T2): R });
          public constructor();
          public apply(param0: T1, param1: T2): R;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module functions {
        export class BiPredicate<T1, T2> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.functions.BiPredicate<any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.functions.BiPredicate<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { test(param0: T1, param1: T2): boolean });
          public constructor();
          public test(param0: T1, param1: T2): boolean;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module functions {
        export class BooleanSupplier {
          public static class: java.lang.Class<io.reactivex.rxjava3.functions.BooleanSupplier>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.functions.BooleanSupplier interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { getAsBoolean(): boolean });
          public constructor();
          public getAsBoolean(): boolean;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module functions {
        export class Cancellable {
          public static class: java.lang.Class<io.reactivex.rxjava3.functions.Cancellable>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.functions.Cancellable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { cancel(): void });
          public constructor();
          public cancel(): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module functions {
        export class Consumer<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.functions.Consumer<any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.functions.Consumer<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { accept(param0: T): void });
          public constructor();
          public accept(param0: T): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module functions {
        export class Function<T, R> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.functions.Function<any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.functions.Function<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: T): R });
          public constructor();
          public apply(param0: T): R;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module functions {
        export class Function3<T1, T2, T3, R> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.functions.Function3<any, any, any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.functions.Function3<any,any,any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: T1, param1: T2, param2: T3): R });
          public constructor();
          public apply(param0: T1, param1: T2, param2: T3): R;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module functions {
        export class Function4<T1, T2, T3, T4, R> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.functions.Function4<any, any, any, any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.functions.Function4<any,any,any,any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: T1, param1: T2, param2: T3, param3: T4): R });
          public constructor();
          public apply(param0: T1, param1: T2, param2: T3, param3: T4): R;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module functions {
        export class Function5<T1, T2, T3, T4, T5, R> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.functions.Function5<any, any, any, any, any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.functions.Function5<any,any,any,any,any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: T1, param1: T2, param2: T3, param3: T4, param4: T5): R });
          public constructor();
          public apply(param0: T1, param1: T2, param2: T3, param3: T4, param4: T5): R;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module functions {
        export class Function6<T1, T2, T3, T4, T5, T6, R> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.functions.Function6<any, any, any, any, any, any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.functions.Function6<any,any,any,any,any,any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: T1, param1: T2, param2: T3, param3: T4, param4: T5, param5: T6): R });
          public constructor();
          public apply(param0: T1, param1: T2, param2: T3, param3: T4, param4: T5, param5: T6): R;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module functions {
        export class Function7<T1, T2, T3, T4, T5, T6, T7, R> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.functions.Function7<any, any, any, any, any, any, any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.functions.Function7<any,any,any,any,any,any,any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: T1, param1: T2, param2: T3, param3: T4, param4: T5, param5: T6, param6: T7): R });
          public constructor();
          public apply(param0: T1, param1: T2, param2: T3, param3: T4, param4: T5, param5: T6, param6: T7): R;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module functions {
        export class Function8<T1, T2, T3, T4, T5, T6, T7, T8, R> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.functions.Function8<any, any, any, any, any, any, any, any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.functions.Function8<any,any,any,any,any,any,any,any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: T1, param1: T2, param2: T3, param3: T4, param4: T5, param5: T6, param6: T7, param7: T8): R });
          public constructor();
          public apply(param0: T1, param1: T2, param2: T3, param3: T4, param4: T5, param5: T6, param6: T7, param7: T8): R;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module functions {
        export class Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.functions.Function9<any, any, any, any, any, any, any, any, any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.functions.Function9<any,any,any,any,any,any,any,any,any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: T1, param1: T2, param2: T3, param3: T4, param4: T5, param5: T6, param6: T7, param7: T8, param8: T9): R });
          public constructor();
          public apply(param0: T1, param1: T2, param2: T3, param3: T4, param4: T5, param5: T6, param6: T7, param7: T8, param8: T9): R;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module functions {
        export class IntFunction<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.functions.IntFunction<any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.functions.IntFunction<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: number): T });
          public constructor();
          public apply(param0: number): T;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module functions {
        export class LongConsumer {
          public static class: java.lang.Class<io.reactivex.rxjava3.functions.LongConsumer>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.functions.LongConsumer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { accept(param0: number): void });
          public constructor();
          public accept(param0: number): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module functions {
        export class Predicate<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.functions.Predicate<any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.functions.Predicate<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { test(param0: T): boolean });
          public constructor();
          public test(param0: T): boolean;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module functions {
        export class Supplier<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.functions.Supplier<any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.functions.Supplier<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { get(): T });
          public constructor();
          public get(): T;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module disposables {
          export class ArrayCompositeDisposable extends java.util.concurrent.atomic.AtomicReferenceArray<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.disposables.Disposable {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposable>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public replaceResource(param0: number, param1: io.reactivex.rxjava3.disposables.Disposable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public dispose(): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public constructor(param0: number);
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public setResource(param0: number, param1: io.reactivex.rxjava3.disposables.Disposable): boolean;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module disposables {
          export class CancellableDisposable extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.functions.Cancellable> implements io.reactivex.rxjava3.disposables.Disposable {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.disposables.CancellableDisposable>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public isDisposed(): boolean;
            public constructor(param0: io.reactivex.rxjava3.functions.Cancellable);
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public dispose(): void;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module disposables {
          export class DisposableHelper extends io.reactivex.rxjava3.disposables.Disposable {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.disposables.DisposableHelper>;
            public static DISPOSED: io.reactivex.rxjava3.internal.disposables.DisposableHelper;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public isDisposed(): boolean;
            public static dispose(param0: java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable>): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public static values(): androidNative.Array<io.reactivex.rxjava3.internal.disposables.DisposableHelper>;
            public static setOnce(param0: java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable>, param1: io.reactivex.rxjava3.disposables.Disposable): boolean;
            public static isDisposed(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
            public dispose(): void;
            public static trySet(param0: java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable>, param1: io.reactivex.rxjava3.disposables.Disposable): boolean;
            public static set(param0: java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable>, param1: io.reactivex.rxjava3.disposables.Disposable): boolean;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static valueOf(param0: string): io.reactivex.rxjava3.internal.disposables.DisposableHelper;
            public static replace(param0: java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable>, param1: io.reactivex.rxjava3.disposables.Disposable): boolean;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static validate(param0: io.reactivex.rxjava3.disposables.Disposable, param1: io.reactivex.rxjava3.disposables.Disposable): boolean;
            public static reportDisposableSet(): void;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module disposables {
          export class EmptyDisposable extends io.reactivex.rxjava3.internal.fuseable.QueueDisposable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.disposables.EmptyDisposable>;
            public static INSTANCE: io.reactivex.rxjava3.internal.disposables.EmptyDisposable;
            public static NEVER: io.reactivex.rxjava3.internal.disposables.EmptyDisposable;
            public static error(param0: java.lang.Throwable, param1: io.reactivex.rxjava3.core.CompletableObserver): void;
            public requestFusion(param0: number): number;
            public poll(): any;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static complete(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
            public static complete(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
            public static complete(param0: io.reactivex.rxjava3.core.Observer<any>): void;
            public static valueOf(param0: string): io.reactivex.rxjava3.internal.disposables.EmptyDisposable;
            public offer(param0: any, param1: any): boolean;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static error(param0: java.lang.Throwable, param1: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
            public isEmpty(): boolean;
            public static values(): androidNative.Array<io.reactivex.rxjava3.internal.disposables.EmptyDisposable>;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public offer(param0: any): boolean;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public static error(param0: java.lang.Throwable, param1: io.reactivex.rxjava3.core.SingleObserver<any>): void;
            public static error(param0: java.lang.Throwable, param1: io.reactivex.rxjava3.core.Observer<any>): void;
            public dispose(): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public clear(): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module disposables {
          export class ListCompositeDisposable implements io.reactivex.rxjava3.disposables.Disposable, io.reactivex.rxjava3.disposables.DisposableContainer {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public constructor();
            public constructor(param0: androidNative.Array<io.reactivex.rxjava3.disposables.Disposable>);
            public remove(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public addAll(param0: androidNative.Array<io.reactivex.rxjava3.disposables.Disposable>): boolean;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public dispose(): void;
            public delete(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public constructor(param0: java.lang.Iterable<any>);
            public add(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public clear(): void;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module disposables {
          export class SequentialDisposable extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.disposables.Disposable {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.disposables.SequentialDisposable>;
            public constructor(param0: io.reactivex.rxjava3.disposables.Disposable);
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public constructor();
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public dispose(): void;
            public replace(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public update(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module functions {
          export class Functions {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions>;
            public static EMPTY_RUNNABLE: java.lang.Runnable;
            public static EMPTY_ACTION: io.reactivex.rxjava3.functions.Action;
            public static ERROR_CONSUMER: io.reactivex.rxjava3.functions.Consumer<java.lang.Throwable>;
            public static ON_ERROR_MISSING: io.reactivex.rxjava3.functions.Consumer<java.lang.Throwable>;
            public static EMPTY_LONG_CONSUMER: io.reactivex.rxjava3.functions.LongConsumer;
            public static REQUEST_MAX: io.reactivex.rxjava3.functions.Consumer<org.reactivestreams.Subscription>;
            public static toFunction(param0: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
            public static toFunction(param0: io.reactivex.rxjava3.functions.Function4<any, any, any, any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
            public static toMapKeyValueSelector(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.functions.BiConsumer<any, any>;
            public static identity(): io.reactivex.rxjava3.functions.Function<any, any>;
            public static toFunction(param0: io.reactivex.rxjava3.functions.Function8<any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
            public static alwaysTrue(): io.reactivex.rxjava3.functions.Predicate<any>;
            public static notificationOnError(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.functions.Consumer<any>;
            public static listSorter(param0: java.util.Comparator<any>): io.reactivex.rxjava3.functions.Function<any, any>;
            public static notificationOnNext(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.functions.Consumer<any>;
            public static castFunction(param0: java.lang.Class<any>): io.reactivex.rxjava3.functions.Function<any, any>;
            public static boundedConsumer(param0: number): io.reactivex.rxjava3.functions.Consumer<any>;
            public static predicateReverseFor(param0: io.reactivex.rxjava3.functions.BooleanSupplier): io.reactivex.rxjava3.functions.Predicate<any>;
            public static createArrayList(param0: number): io.reactivex.rxjava3.functions.Supplier<any>;
            public static toFunction(param0: io.reactivex.rxjava3.functions.Function9<any, any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
            public static justSupplier(param0: any): io.reactivex.rxjava3.functions.Supplier<any>;
            public static toFunction(param0: io.reactivex.rxjava3.functions.Function3<any, any, any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
            public static toMapKeySelector(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.functions.BiConsumer<any, any>;
            public static equalsWith(param0: any): io.reactivex.rxjava3.functions.Predicate<any>;
            public static justCallable(param0: any): java.util.concurrent.Callable<any>;
            public static actionConsumer(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.functions.Consumer<any>;
            public static nullSupplier(): io.reactivex.rxjava3.functions.Supplier<any>;
            public static toFunction(param0: io.reactivex.rxjava3.functions.Function7<any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
            public static naturalComparator(): java.util.Comparator<any>;
            public static timestampWith(param0: java.util.concurrent.TimeUnit, param1: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.functions.Function<any, any>;
            public static toFunction(param0: io.reactivex.rxjava3.functions.Function5<any, any, any, any, any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
            public static createHashSet(): io.reactivex.rxjava3.functions.Supplier<any>;
            public static alwaysFalse(): io.reactivex.rxjava3.functions.Predicate<any>;
            public static isInstanceOf(param0: java.lang.Class<any>): io.reactivex.rxjava3.functions.Predicate<any>;
            public static toMultimapKeyValueSelector(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.functions.BiConsumer<any, any>;
            public static notificationOnComplete(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.functions.Action;
            public static emptyConsumer(): io.reactivex.rxjava3.functions.Consumer<any>;
            public static justFunction(param0: any): io.reactivex.rxjava3.functions.Function<any, any>;
            public static futureAction(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.functions.Action;
            public static toFunction(param0: io.reactivex.rxjava3.functions.Function6<any, any, any, any, any, any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
          }
          export module Functions {
            export class ActionConsumer<T> extends io.reactivex.rxjava3.functions.Consumer<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.ActionConsumer<any>>;
              public accept(param0: any): void;
            }
            export class Array2Func<T1, T2, R> extends io.reactivex.rxjava3.functions.Function<androidNative.Array<any>, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.Array2Func<any, any, any>>;
              public apply(param0: androidNative.Array<any>): any;
              public apply(param0: any): any;
            }
            export class Array3Func<T1, T2, T3, R> extends io.reactivex.rxjava3.functions.Function<androidNative.Array<any>, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.Array3Func<any, any, any, any>>;
              public apply(param0: androidNative.Array<any>): any;
              public apply(param0: any): any;
            }
            export class Array4Func<T1, T2, T3, T4, R> extends io.reactivex.rxjava3.functions.Function<androidNative.Array<any>, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.Array4Func<any, any, any, any, any>>;
              public apply(param0: androidNative.Array<any>): any;
              public apply(param0: any): any;
            }
            export class Array5Func<T1, T2, T3, T4, T5, R> extends io.reactivex.rxjava3.functions.Function<androidNative.Array<any>, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.Array5Func<any, any, any, any, any, any>>;
              public apply(param0: androidNative.Array<any>): any;
              public apply(param0: any): any;
            }
            export class Array6Func<T1, T2, T3, T4, T5, T6, R> extends io.reactivex.rxjava3.functions.Function<androidNative.Array<any>, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.Array6Func<any, any, any, any, any, any, any>>;
              public apply(param0: androidNative.Array<any>): any;
              public apply(param0: any): any;
            }
            export class Array7Func<T1, T2, T3, T4, T5, T6, T7, R> extends io.reactivex.rxjava3.functions.Function<androidNative.Array<any>, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.Array7Func<any, any, any, any, any, any, any, any>>;
              public apply(param0: androidNative.Array<any>): any;
              public apply(param0: any): any;
            }
            export class Array8Func<T1, T2, T3, T4, T5, T6, T7, T8, R> extends io.reactivex.rxjava3.functions.Function<androidNative.Array<any>, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.Array8Func<any, any, any, any, any, any, any, any, any>>;
              public apply(param0: androidNative.Array<any>): any;
              public apply(param0: any): any;
            }
            export class Array9Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, R> extends io.reactivex.rxjava3.functions.Function<androidNative.Array<any>, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.Array9Func<any, any, any, any, any, any, any, any, any, any>>;
              public apply(param0: androidNative.Array<any>): any;
              public apply(param0: any): any;
            }
            export class ArrayListCapacityCallable<T> extends io.reactivex.rxjava3.functions.Supplier<java.util.List<any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.ArrayListCapacityCallable<any>>;
              public get(): any;
              public get(): java.util.List<any>;
            }
            export class BooleanSupplierPredicateReverse<T> extends io.reactivex.rxjava3.functions.Predicate<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.BooleanSupplierPredicateReverse<any>>;
              public test(param0: any): boolean;
            }
            export class BoundedConsumer extends io.reactivex.rxjava3.functions.Consumer<org.reactivestreams.Subscription> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.BoundedConsumer>;
              public accept(param0: any): void;
              public accept(param0: org.reactivestreams.Subscription): void;
            }
            export class CastToClass<T, U> extends io.reactivex.rxjava3.functions.Function<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.CastToClass<any, any>>;
              public apply(param0: any): any;
            }
            export class ClassFilter<T, U> extends io.reactivex.rxjava3.functions.Predicate<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.ClassFilter<any, any>>;
              public test(param0: any): boolean;
            }
            export class EmptyAction extends io.reactivex.rxjava3.functions.Action {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.EmptyAction>;
              public toString(): string;
              public run(): void;
            }
            export class EmptyConsumer extends io.reactivex.rxjava3.functions.Consumer<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer>;
              public accept(param0: any): void;
              public toString(): string;
            }
            export class EmptyLongConsumer extends io.reactivex.rxjava3.functions.LongConsumer {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer>;
              public accept(param0: number): void;
            }
            export class EmptyRunnable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.EmptyRunnable>;
              public toString(): string;
              public run(): void;
            }
            export class EqualsPredicate<T> extends io.reactivex.rxjava3.functions.Predicate<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.EqualsPredicate<any>>;
              public test(param0: any): boolean;
            }
            export class ErrorConsumer extends io.reactivex.rxjava3.functions.Consumer<java.lang.Throwable> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.ErrorConsumer>;
              public accept(param0: java.lang.Throwable): void;
              public accept(param0: any): void;
            }
            export class FalsePredicate extends io.reactivex.rxjava3.functions.Predicate<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.FalsePredicate>;
              public test(param0: any): boolean;
            }
            export class FutureAction extends io.reactivex.rxjava3.functions.Action {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.FutureAction>;
              public run(): void;
            }
            export class HashSetSupplier extends io.reactivex.rxjava3.functions.Supplier<java.util.Set<any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.HashSetSupplier>;
              public static INSTANCE: io.reactivex.rxjava3.internal.functions.Functions.HashSetSupplier;
              public static values(): androidNative.Array<io.reactivex.rxjava3.internal.functions.Functions.HashSetSupplier>;
              public get(): any;
              public static valueOf(param0: string): io.reactivex.rxjava3.internal.functions.Functions.HashSetSupplier;
              public get(): java.util.Set<any>;
            }
            export class Identity extends io.reactivex.rxjava3.functions.Function<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.Identity>;
              public toString(): string;
              public apply(param0: any): any;
            }
            export class JustValue<T, U> extends java.lang.Object {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.JustValue<any, any>>;
              public get(): U;
              public apply(param0: T): U;
              public get(): T;
              public call(): U;
              public apply(param0: T): any;
            }
            export class ListSorter<T> extends io.reactivex.rxjava3.functions.Function<java.util.List<any>, java.util.List<any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.ListSorter<any>>;
              public apply(param0: any): any;
              public apply(param0: java.util.List<any>): java.util.List<any>;
            }
            export class MaxRequestSubscription extends io.reactivex.rxjava3.functions.Consumer<org.reactivestreams.Subscription> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.MaxRequestSubscription>;
              public accept(param0: any): void;
              public accept(param0: org.reactivestreams.Subscription): void;
            }
            export class NaturalComparator extends java.util.Comparator<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.NaturalComparator>;
              public static INSTANCE: io.reactivex.rxjava3.internal.functions.Functions.NaturalComparator;
              public compare(param0: any, param1: any): number;
              public static values(): androidNative.Array<io.reactivex.rxjava3.internal.functions.Functions.NaturalComparator>;
              public static valueOf(param0: string): io.reactivex.rxjava3.internal.functions.Functions.NaturalComparator;
            }
            export class NotificationOnComplete<T> extends io.reactivex.rxjava3.functions.Action {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.NotificationOnComplete<any>>;
              public run(): void;
            }
            export class NotificationOnError<T> extends io.reactivex.rxjava3.functions.Consumer<java.lang.Throwable> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError<any>>;
              public accept(param0: java.lang.Throwable): void;
              public accept(param0: any): void;
            }
            export class NotificationOnNext<T> extends io.reactivex.rxjava3.functions.Consumer<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.NotificationOnNext<any>>;
              public accept(param0: any): void;
            }
            export class NullProvider extends io.reactivex.rxjava3.functions.Supplier<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.NullProvider>;
              public get(): any;
            }
            export class OnErrorMissingConsumer extends io.reactivex.rxjava3.functions.Consumer<java.lang.Throwable> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer>;
              public accept(param0: java.lang.Throwable): void;
              public accept(param0: any): void;
            }
            export class TimestampFunction<T> extends io.reactivex.rxjava3.functions.Function<any, io.reactivex.rxjava3.schedulers.Timed<any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.TimestampFunction<any>>;
              public apply(param0: any): any;
              public apply(param0: any): io.reactivex.rxjava3.schedulers.Timed<any>;
            }
            export class ToMapKeySelector<K, T> extends io.reactivex.rxjava3.functions.BiConsumer<java.util.Map<any, any>, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector<any, any>>;
              public accept(param0: java.util.Map<any, any>, param1: any): void;
              public accept(param0: any, param1: any): void;
            }
            export class ToMapKeyValueSelector<K, V, T> extends io.reactivex.rxjava3.functions.BiConsumer<java.util.Map<any, any>, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector<any, any, any>>;
              public accept(param0: java.util.Map<any, any>, param1: any): void;
              public accept(param0: any, param1: any): void;
            }
            export class ToMultimapKeyValueSelector<K, V, T> extends io.reactivex.rxjava3.functions.BiConsumer<java.util.Map<any, java.util.Collection<any>>, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.ToMultimapKeyValueSelector<any, any, any>>;
              public accept(param0: any, param1: any): void;
              public accept(param0: java.util.Map<any, java.util.Collection<any>>, param1: any): void;
            }
            export class TruePredicate extends io.reactivex.rxjava3.functions.Predicate<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.TruePredicate>;
              public test(param0: any): boolean;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module functions {
          export class ObjectHelper {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.ObjectHelper>;
            public static verifyPositive(param0: number, param1: string): number;
            public static equalsPredicate(): io.reactivex.rxjava3.functions.BiPredicate<any, any>;
          }
          export module ObjectHelper {
            export class BiObjectPredicate extends io.reactivex.rxjava3.functions.BiPredicate<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.ObjectHelper.BiObjectPredicate>;
              public test(param0: any, param1: any): boolean;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module fuseable {
          export abstract class AbstractEmptyQueueFuseable<T> extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.AbstractEmptyQueueFuseable<any>>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public constructor();
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public cancel(): void;
            public requestFusion(param0: number): number;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public offer(param0: T, param1: T): boolean;
            public dispose(): void;
            public offer(param0: T): boolean;
            public request(param0: number): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public isEmpty(): boolean;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public clear(): void;
            public poll(): T;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module fuseable {
          export class CancellableQueueFuseable<T> extends io.reactivex.rxjava3.internal.fuseable.AbstractEmptyQueueFuseable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable<any>>;
            public constructor();
            public isDisposed(): boolean;
            public cancel(): void;
            public dispose(): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module fuseable {
          export class ConditionalSubscriber<T> extends io.reactivex.rxjava3.core.FlowableSubscriber<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber<any>>;
            /**
             * Constructs a new instance of the io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
             */
            public constructor(implementation: { tryOnNext(param0: any): boolean; onSubscribe(param0: org.reactivestreams.Subscription): void });
            public constructor();
            public onSubscribe(param0: org.reactivestreams.Subscription): void;
            public tryOnNext(param0: any): boolean;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module fuseable {
          export class FuseToFlowable<T> extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<any>>;
            /**
             * Constructs a new instance of the io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
             */
            public constructor(implementation: { fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<T> });
            public constructor();
            public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<T>;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module fuseable {
          export class FuseToMaybe<T> extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.FuseToMaybe<any>>;
            /**
             * Constructs a new instance of the io.reactivex.rxjava3.internal.fuseable.FuseToMaybe<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
             */
            public constructor(implementation: { fuseToMaybe(): io.reactivex.rxjava3.core.Maybe<T> });
            public constructor();
            public fuseToMaybe(): io.reactivex.rxjava3.core.Maybe<T>;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module fuseable {
          export class FuseToObservable<T> extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.FuseToObservable<any>>;
            /**
             * Constructs a new instance of the io.reactivex.rxjava3.internal.fuseable.FuseToObservable<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
             */
            public constructor(implementation: { fuseToObservable(): io.reactivex.rxjava3.core.Observable<T> });
            public constructor();
            public fuseToObservable(): io.reactivex.rxjava3.core.Observable<T>;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module fuseable {
          export class HasUpstreamCompletableSource {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.HasUpstreamCompletableSource>;
            /**
             * Constructs a new instance of the io.reactivex.rxjava3.internal.fuseable.HasUpstreamCompletableSource interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
             */
            public constructor(implementation: { source(): io.reactivex.rxjava3.core.CompletableSource });
            public constructor();
            public source(): io.reactivex.rxjava3.core.CompletableSource;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module fuseable {
          export class HasUpstreamMaybeSource<T> extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.HasUpstreamMaybeSource<any>>;
            /**
             * Constructs a new instance of the io.reactivex.rxjava3.internal.fuseable.HasUpstreamMaybeSource<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
             */
            public constructor(implementation: { source(): io.reactivex.rxjava3.core.MaybeSource<T> });
            public constructor();
            public source(): io.reactivex.rxjava3.core.MaybeSource<T>;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module fuseable {
          export class HasUpstreamObservableSource<T> extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.HasUpstreamObservableSource<any>>;
            /**
             * Constructs a new instance of the io.reactivex.rxjava3.internal.fuseable.HasUpstreamObservableSource<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
             */
            public constructor(implementation: { source(): io.reactivex.rxjava3.core.ObservableSource<T> });
            public constructor();
            public source(): io.reactivex.rxjava3.core.ObservableSource<T>;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module fuseable {
          export class HasUpstreamPublisher<T> extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.HasUpstreamPublisher<any>>;
            /**
             * Constructs a new instance of the io.reactivex.rxjava3.internal.fuseable.HasUpstreamPublisher<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
             */
            public constructor(implementation: { source(): org.reactivestreams.Publisher<T> });
            public constructor();
            public source(): org.reactivestreams.Publisher<T>;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module fuseable {
          export class HasUpstreamSingleSource<T> extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.HasUpstreamSingleSource<any>>;
            /**
             * Constructs a new instance of the io.reactivex.rxjava3.internal.fuseable.HasUpstreamSingleSource<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
             */
            public constructor(implementation: { source(): io.reactivex.rxjava3.core.SingleSource<T> });
            public constructor();
            public source(): io.reactivex.rxjava3.core.SingleSource<T>;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module fuseable {
          export class QueueDisposable<T> extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.QueueDisposable<any>>;
            /**
             * Constructs a new instance of the io.reactivex.rxjava3.internal.fuseable.QueueDisposable<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
             */
            public constructor(implementation: {
              requestFusion(param0: number): number;
              dispose(): void;
              isDisposed(): boolean;
              fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              empty(): io.reactivex.rxjava3.disposables.Disposable;
              disposed(): io.reactivex.rxjava3.disposables.Disposable;
              offer(param0: T): boolean;
              offer(param0: T, param1: T): boolean;
              poll(): T;
              isEmpty(): boolean;
              clear(): void;
            });
            public constructor();
            public static BOUNDARY: number;
            public static NONE: number;
            public static SYNC: number;
            public static ANY: number;
            public static ASYNC: number;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public requestFusion(param0: number): number;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public offer(param0: T, param1: T): boolean;
            public dispose(): void;
            public offer(param0: T): boolean;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public isEmpty(): boolean;
            public clear(): void;
            public poll(): T;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module fuseable {
          export class QueueFuseable<T> extends io.reactivex.rxjava3.internal.fuseable.SimpleQueue<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.QueueFuseable<any>>;
            /**
             * Constructs a new instance of the io.reactivex.rxjava3.internal.fuseable.QueueFuseable<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
             */
            public constructor(implementation: { requestFusion(param0: number): number; offer(param0: any): boolean; offer(param0: any, param1: any): boolean; poll(): any; isEmpty(): boolean; clear(): void });
            public constructor();
            public static BOUNDARY: number;
            public static NONE: number;
            public static SYNC: number;
            public static ANY: number;
            public static ASYNC: number;
            public offer(param0: any): boolean;
            public offer(param0: any, param1: any): boolean;
            public requestFusion(param0: number): number;
            public poll(): any;
            public isEmpty(): boolean;
            public clear(): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module fuseable {
          export class QueueSubscription<T> extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.QueueSubscription<any>>;
            /**
             * Constructs a new instance of the io.reactivex.rxjava3.internal.fuseable.QueueSubscription<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
             */
            public constructor(implementation: { requestFusion(param0: number): number; offer(param0: T): boolean; offer(param0: T, param1: T): boolean; poll(): T; isEmpty(): boolean; clear(): void });
            public constructor();
            public static BOUNDARY: number;
            public static NONE: number;
            public static SYNC: number;
            public static ANY: number;
            public static ASYNC: number;
            public offer(param0: T): boolean;
            public requestFusion(param0: number): number;
            public isEmpty(): boolean;
            public clear(): void;
            public poll(): T;
            public offer(param0: T, param1: T): boolean;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module fuseable {
          export class ScalarSupplier<T> extends io.reactivex.rxjava3.functions.Supplier<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.ScalarSupplier<any>>;
            /**
             * Constructs a new instance of the io.reactivex.rxjava3.internal.fuseable.ScalarSupplier<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
             */
            public constructor(implementation: { get(): any; get(): any });
            public constructor();
            public get(): any;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module fuseable {
          export class SimplePlainQueue<T> extends io.reactivex.rxjava3.internal.fuseable.SimpleQueue<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue<any>>;
            /**
             * Constructs a new instance of the io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
             */
            public constructor(implementation: { poll(): any; offer(param0: any): boolean; offer(param0: any, param1: any): boolean; poll(): any; isEmpty(): boolean; clear(): void });
            public constructor();
            public offer(param0: any): boolean;
            public offer(param0: any, param1: any): boolean;
            public poll(): any;
            public isEmpty(): boolean;
            public clear(): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module fuseable {
          export class SimpleQueue<T> extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.SimpleQueue<any>>;
            /**
             * Constructs a new instance of the io.reactivex.rxjava3.internal.fuseable.SimpleQueue<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
             */
            public constructor(implementation: { offer(param0: T): boolean; offer(param0: T, param1: T): boolean; poll(): T; isEmpty(): boolean; clear(): void });
            public constructor();
            public offer(param0: T): boolean;
            public isEmpty(): boolean;
            public clear(): void;
            public poll(): T;
            public offer(param0: T, param1: T): boolean;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class CompletableFromCompletionStage<T> extends io.reactivex.rxjava3.core.Completable {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.CompletableFromCompletionStage<any>>;
            public constructor();
            public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public constructor(param0: java.util.concurrent.CompletionStage<any>);
            public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
          }
          export module CompletableFromCompletionStage {
            export class CompletionStageHandler<T> extends java.lang.Object {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.CompletableFromCompletionStage.CompletionStageHandler<any>>;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public accept(param0: T, param1: java.lang.Throwable): void;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class CompletionStageConsumer<T> extends java.util.concurrent.CompletableFuture<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.CompletionStageConsumer<any>>;
            public constructor(param0: boolean, param1: any);
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public onSuccess(param0: any): void;
            public completeExceptionally(param0: java.lang.Throwable): boolean;
            public complete(param0: any): boolean;
            public cancel(param0: boolean): boolean;
            public onComplete(): void;
            public onError(param0: java.lang.Throwable): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class FlowableCollectWithCollector<T, A, R> extends io.reactivex.rxjava3.core.Flowable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollector<any, any, any>>;
            public constructor();
            public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: java.util.stream.Collector<any, any, any>);
            public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
          }
          export module FlowableCollectWithCollector {
            export class CollectorSubscriber<T, A, R> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollector.CollectorSubscriber<any, any, any>>;
              public cancel(): void;
              public onNext(param0: any): void;
              public onError(param0: java.lang.Throwable): void;
              public onComplete(): void;
              public onSubscribe(param0: org.reactivestreams.Subscription): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class FlowableCollectWithCollectorSingle<T, A, R> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorSingle<any, any, any>>;
            public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
            public constructor();
            public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: java.util.stream.Collector<any, any, any>);
            public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
          }
          export module FlowableCollectWithCollectorSingle {
            export class CollectorSingleObserver<T, A, R> extends java.lang.Object {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorSingle.CollectorSingleObserver<any, any, any>>;
              public onComplete(): void;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public onNext(param0: T): void;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
              public onError(param0: java.lang.Throwable): void;
              public onSubscribe(param0: org.reactivestreams.Subscription): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class FlowableFirstStageSubscriber<T> extends io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriber<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableFirstStageSubscriber<any>>;
            public constructor(param0: boolean, param1: any);
            public onComplete(): void;
            public afterSubscribe(param0: org.reactivestreams.Subscription): void;
            public onNext(param0: any): void;
            public onSubscribe(param0: org.reactivestreams.Subscription): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class FlowableFlatMapStream<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream<any, any>>;
            public subscribe(param0: org.reactivestreams.Subscriber<any>): void;
            public constructor();
            public subscribe(param0: io.reactivex.rxjava3.core.FlowableSubscriber<any>): void;
            public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number);
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static subscribe(param0: org.reactivestreams.Subscriber, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number): org.reactivestreams.Subscriber;
            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
          }
          export module FlowableFlatMapStream {
            export class FlatMapStreamSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream.FlatMapStreamSubscriber<any, any>>;
              public cancel(): void;
              public onNext(param0: any): void;
              public onError(param0: java.lang.Throwable): void;
              public onComplete(): void;
              public onSubscribe(param0: org.reactivestreams.Subscription): void;
              public request(param0: number): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class FlowableFromCompletionStage<T> extends io.reactivex.rxjava3.core.Flowable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStage<any>>;
            public constructor();
            public constructor(param0: java.util.concurrent.CompletionStage<any>);
            public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
          }
          export module FlowableFromCompletionStage {
            // export class BiConsumerAtomicReference<T>  extends java.util.concurrent.atomic.AtomicReference<any<any,java.lang.Throwable>> implements any /* any<any,java.lang.Throwable>*/  {
            export class BiConsumerAtomicReference<T> extends java.util.concurrent.atomic.AtomicReference<any> implements any /* any<any,java.lang.Throwable>*/ {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStage.BiConsumerAtomicReference<any>>;
              public accept(param0: any, param1: java.lang.Throwable): void;
            }
            export class CompletionStageHandler<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> implements any /* any<any,java.lang.Throwable>*/ {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStage.CompletionStageHandler<any>>;
              public cancel(): void;
              public accept(param0: any, param1: java.lang.Throwable): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class FlowableFromStream<T> extends io.reactivex.rxjava3.core.Flowable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableFromStream<any>>;
            public static subscribeStream(param0: org.reactivestreams.Subscriber, param1: java.util.stream.Stream): void;
            public constructor();
            public constructor(param0: java.util.stream.Stream<any>);
            public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
          }
          export module FlowableFromStream {
            export abstract class AbstractStreamSubscription<T> extends java.util.concurrent.atomic.AtomicLong implements io.reactivex.rxjava3.internal.fuseable.QueueSubscription<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableFromStream.AbstractStreamSubscription<any>>;
              public cancel(): void;
              public offer(param0: any, param1: any): boolean;
              public clear(): void;
              public offer(param0: any): boolean;
              public request(param0: number): void;
              public requestFusion(param0: number): number;
              public poll(): any;
              public isEmpty(): boolean;
            }
            export class StreamConditionalSubscription<T> extends io.reactivex.rxjava3.internal.jdk8.FlowableFromStream.AbstractStreamSubscription<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableFromStream.StreamConditionalSubscription<any>>;
              public run(param0: number): void;
            }
            export class StreamSubscription<T> extends io.reactivex.rxjava3.internal.jdk8.FlowableFromStream.AbstractStreamSubscription<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableFromStream.StreamSubscription<any>>;
              public run(param0: number): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class FlowableLastStageSubscriber<T> extends io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriber<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableLastStageSubscriber<any>>;
            public constructor(param0: boolean, param1: any);
            public onComplete(): void;
            public afterSubscribe(param0: org.reactivestreams.Subscription): void;
            public onNext(param0: any): void;
            public onSubscribe(param0: org.reactivestreams.Subscription): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class FlowableMapOptional<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional<any, any>>;
            public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, java.util.Optional<any>>);
            public constructor();
            public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
          }
          export module FlowableMapOptional {
            export class MapOptionalConditionalSubscriber<T, R> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber<any, any>>;
              public onNext(param0: any): void;
              public tryOnNext(param0: any): boolean;
              public requestFusion(param0: number): number;
              public poll(): any;
            }
            export class MapOptionalSubscriber<T, R> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber<any, any> implements io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalSubscriber<any, any>>;
              public onNext(param0: any): void;
              public onSubscribe(param0: org.reactivestreams.Subscription): void;
              public tryOnNext(param0: any): boolean;
              public requestFusion(param0: number): number;
              public poll(): any;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class FlowableSingleStageSubscriber<T> extends io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriber<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableSingleStageSubscriber<any>>;
            public constructor(param0: boolean, param1: any);
            public onComplete(): void;
            public afterSubscribe(param0: org.reactivestreams.Subscription): void;
            public onNext(param0: any): void;
            public onSubscribe(param0: org.reactivestreams.Subscription): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export abstract class FlowableStageSubscriber<T> extends java.util.concurrent.CompletableFuture<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriber<any>>;
            public completeExceptionally(param0: java.lang.Throwable): boolean;
            public complete(param0: any): boolean;
            public cancel(param0: boolean): boolean;
            public afterSubscribe(param0: org.reactivestreams.Subscription): void;
            public onSubscribe(param0: org.reactivestreams.Subscription): void;
            public clear(): void;
            public cancelUpstream(): void;
            public onError(param0: java.lang.Throwable): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class MaybeFlattenStreamAsFlowable<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable<any, any>>;
            public constructor(param0: io.reactivex.rxjava3.core.Maybe<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
            public constructor();
            public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
          }
          export module MaybeFlattenStreamAsFlowable {
            export class FlattenStreamMultiObserver<T, R> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable.FlattenStreamMultiObserver<any, any>>;
              public cancel(): void;
              public onError(param0: java.lang.Throwable): void;
              public onComplete(): void;
              public onSuccess(param0: any): void;
              public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              public clear(): void;
              public request(param0: number): void;
              public requestFusion(param0: number): number;
              public poll(): any;
              public isEmpty(): boolean;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class MaybeFlattenStreamAsObservable<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable<any, any>>;
            public constructor(param0: io.reactivex.rxjava3.core.Maybe<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
            public constructor();
            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          }
          export module MaybeFlattenStreamAsObservable {
            export class FlattenStreamMultiObserver<T, R> extends io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver<any, any>>;
              public onError(param0: java.lang.Throwable): void;
              public onComplete(): void;
              public onSuccess(param0: any): void;
              public dispose(): void;
              public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              public clear(): void;
              public isDisposed(): boolean;
              public requestFusion(param0: number): number;
              public poll(): any;
              public isEmpty(): boolean;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class MaybeFromCompletionStage<T> extends io.reactivex.rxjava3.core.Maybe<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.MaybeFromCompletionStage<any>>;
            public constructor();
            public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
            public constructor(param0: java.util.concurrent.CompletionStage<any>);
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          }
          export module MaybeFromCompletionStage {
            export class CompletionStageHandler<T> extends java.lang.Object {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.MaybeFromCompletionStage.CompletionStageHandler<any>>;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public accept(param0: T, param1: java.lang.Throwable): void;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class MaybeMapOptional<T, R> extends io.reactivex.rxjava3.core.Maybe<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.MaybeMapOptional<any, any>>;
            public constructor();
            public constructor(param0: io.reactivex.rxjava3.core.Maybe<any>, param1: io.reactivex.rxjava3.functions.Function<any, java.util.Optional<any>>);
            public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          }
          export module MaybeMapOptional {
            export class MapOptionalMaybeObserver<T, R> extends java.lang.Object {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.MaybeMapOptional.MapOptionalMaybeObserver<any, any>>;
              public onComplete(): void;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public onSuccess(param0: T): void;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
              public onError(param0: java.lang.Throwable): void;
              public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class ObservableCollectWithCollector<T, A, R> extends io.reactivex.rxjava3.core.Observable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollector<any, any, any>>;
            public constructor();
            public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: java.util.stream.Collector<any, any, any>);
            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          }
          export module ObservableCollectWithCollector {
            export class CollectorObserver<T, A, R> extends io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable<any> implements io.reactivex.rxjava3.core.Observer<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollector.CollectorObserver<any, any, any>>;
              public onNext(param0: any): void;
              public onError(param0: java.lang.Throwable): void;
              public onComplete(): void;
              public dispose(): void;
              public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class ObservableCollectWithCollectorSingle<T, A, R> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.internal.fuseable.FuseToObservable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle<any, any, any>>;
            public constructor();
            public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: java.util.stream.Collector<any, any, any>);
            public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
            public fuseToObservable(): io.reactivex.rxjava3.core.Observable<any>;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
          }
          export module ObservableCollectWithCollectorSingle {
            export class CollectorSingleObserver<T, A, R> extends java.lang.Object {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver<any, any, any>>;
              public onComplete(): void;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public onNext(param0: T): void;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
              public onError(param0: java.lang.Throwable): void;
              public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class ObservableFirstStageObserver<T> extends io.reactivex.rxjava3.internal.jdk8.ObservableStageObserver<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableFirstStageObserver<any>>;
            public constructor(param0: boolean, param1: any);
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public onComplete(): void;
            public onNext(param0: any): void;
            public onError(param0: java.lang.Throwable): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class ObservableFlatMapStream<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStream<any, any>>;
            public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
            public constructor();
            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          }
          export module ObservableFlatMapStream {
            export class FlatMapStreamObserver<T, R> extends java.util.concurrent.atomic.AtomicInteger {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStream.FlatMapStreamObserver<any, any>>;
              public onComplete(): void;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
              public onNext(param0: any): void;
              public onError(param0: java.lang.Throwable): void;
              public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class ObservableFromCompletionStage<T> extends io.reactivex.rxjava3.core.Observable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage<any>>;
            public constructor();
            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
            public constructor(param0: java.util.concurrent.CompletionStage<any>);
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          }
          export module ObservableFromCompletionStage {
            // export class BiConsumerAtomicReference<T>  extends java.util.concurrent.atomic.AtomicReference<any<any,java.lang.Throwable>> implements any /* any<any,java.lang.Throwable>*/  {
            export class BiConsumerAtomicReference<T> extends java.util.concurrent.atomic.AtomicReference<any> implements any /* any<any,java.lang.Throwable>*/ {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference<any>>;
              public accept(param0: any, param1: java.lang.Throwable): void;
            }
            export class CompletionStageHandler<T> extends io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable<any> implements any /* any<any,java.lang.Throwable>*/ {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.CompletionStageHandler<any>>;
              public accept(param0: any, param1: java.lang.Throwable): void;
              public dispose(): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class ObservableFromStream<T> extends io.reactivex.rxjava3.core.Observable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableFromStream<any>>;
            public static subscribeStream(param0: io.reactivex.rxjava3.core.Observer<any>, param1: java.util.stream.Stream): void;
            public constructor();
            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
            public constructor(param0: java.util.stream.Stream<any>);
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          }
          export module ObservableFromStream {
            export class StreamDisposable<T> extends io.reactivex.rxjava3.internal.fuseable.QueueDisposable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableFromStream.StreamDisposable<any>>;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public offer(param0: any, param1: any): boolean;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public clear(): void;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public offer(param0: any): boolean;
              public poll(): any;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public requestFusion(param0: number): number;
              public isEmpty(): boolean;
              public run(): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class ObservableLastStageObserver<T> extends io.reactivex.rxjava3.internal.jdk8.ObservableStageObserver<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver<any>>;
            public constructor(param0: boolean, param1: any);
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public onComplete(): void;
            public onNext(param0: any): void;
            public onError(param0: java.lang.Throwable): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class ObservableMapOptional<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional<any, any>>;
            public constructor();
            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: io.reactivex.rxjava3.functions.Function<any, java.util.Optional<any>>);
            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          }
          export module ObservableMapOptional {
            export class MapOptionalObserver<T, R> extends io.reactivex.rxjava3.internal.observers.BasicFuseableObserver<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional.MapOptionalObserver<any, any>>;
              public onNext(param0: any): void;
              public onError(param0: java.lang.Throwable): void;
              public onComplete(): void;
              public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              public requestFusion(param0: number): number;
              public poll(): any;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class ObservableSingleStageObserver<T> extends io.reactivex.rxjava3.internal.jdk8.ObservableStageObserver<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableSingleStageObserver<any>>;
            public constructor(param0: boolean, param1: any);
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public onComplete(): void;
            public onNext(param0: any): void;
            public onError(param0: java.lang.Throwable): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export abstract class ObservableStageObserver<T> extends java.util.concurrent.CompletableFuture<any> implements io.reactivex.rxjava3.core.Observer<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableStageObserver<any>>;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public completeExceptionally(param0: java.lang.Throwable): boolean;
            public complete(param0: any): boolean;
            public cancel(param0: boolean): boolean;
            public onComplete(): void;
            public onNext(param0: any): void;
            public clear(): void;
            public disposeUpstream(): void;
            public onError(param0: java.lang.Throwable): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class ParallelCollector<T, A, R> extends io.reactivex.rxjava3.core.Flowable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ParallelCollector<any, any, any>>;
            public constructor();
            public constructor(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, param1: java.util.stream.Collector<any, any, any>);
            public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
          }
          export module ParallelCollector {
            export class ParallelCollectorInnerSubscriber<T, A, R> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber<any, any, any>>;
              public onNext(param0: any): void;
              public onError(param0: java.lang.Throwable): void;
              public onComplete(): void;
              public onSubscribe(param0: org.reactivestreams.Subscription): void;
            }
            export class ParallelCollectorSubscriber<T, A, R> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorSubscriber<any, any, any>>;
              public cancel(): void;
            }
            export class SlotPair<T> extends java.util.concurrent.atomic.AtomicInteger {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ParallelCollector.SlotPair<any>>;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class ParallelFlatMapStream<T, R> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ParallelFlatMapStream<any, any>>;
            public constructor();
            public subscribe(param0: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
            public parallelism(): number;
            public constructor(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number);
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class ParallelMapOptional<T, R> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ParallelMapOptional<any, any>>;
            public constructor();
            public subscribe(param0: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
            public constructor(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, java.util.Optional<any>>);
            public parallelism(): number;
          }
          export module ParallelMapOptional {
            export class ParallelMapConditionalSubscriber<T, R> extends java.lang.Object {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ParallelMapOptional.ParallelMapConditionalSubscriber<any, any>>;
              public cancel(): void;
              public tryOnNext(param0: T): boolean;
              public onError(param0: java.lang.Throwable): void;
              public onComplete(): void;
              public onNext(param0: T): void;
              public onSubscribe(param0: org.reactivestreams.Subscription): void;
              public request(param0: number): void;
            }
            export class ParallelMapSubscriber<T, R> extends java.lang.Object {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ParallelMapOptional.ParallelMapSubscriber<any, any>>;
              public cancel(): void;
              public tryOnNext(param0: T): boolean;
              public onError(param0: java.lang.Throwable): void;
              public onComplete(): void;
              public onNext(param0: T): void;
              public onSubscribe(param0: org.reactivestreams.Subscription): void;
              public request(param0: number): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class ParallelMapTryOptional<T, R> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional<any, any>>;
            public constructor(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, java.util.Optional<any>>, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, io.reactivex.rxjava3.parallel.ParallelFailureHandling>);
            public constructor();
            public subscribe(param0: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
            public parallelism(): number;
          }
          export module ParallelMapTryOptional {
            export class ParallelMapTryConditionalSubscriber<T, R> extends java.lang.Object {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTryConditionalSubscriber<any, any>>;
              public cancel(): void;
              public tryOnNext(param0: T): boolean;
              public onError(param0: java.lang.Throwable): void;
              public onComplete(): void;
              public onNext(param0: T): void;
              public onSubscribe(param0: org.reactivestreams.Subscription): void;
              public request(param0: number): void;
            }
            export class ParallelMapTrySubscriber<T, R> extends java.lang.Object {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber<any, any>>;
              public cancel(): void;
              public tryOnNext(param0: T): boolean;
              public onError(param0: java.lang.Throwable): void;
              public onComplete(): void;
              public onNext(param0: T): void;
              public onSubscribe(param0: org.reactivestreams.Subscription): void;
              public request(param0: number): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class SingleFlattenStreamAsFlowable<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowable<any, any>>;
            public constructor();
            public constructor(param0: io.reactivex.rxjava3.core.Single<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
            public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class SingleFlattenStreamAsObservable<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservable<any, any>>;
            public constructor();
            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
            public constructor(param0: io.reactivex.rxjava3.core.Single<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class SingleFromCompletionStage<T> extends io.reactivex.rxjava3.core.Single<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage<any>>;
            public constructor();
            public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
            public constructor(param0: java.util.concurrent.CompletionStage<any>);
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
          }
          export module SingleFromCompletionStage {
            export class CompletionStageHandler<T> extends java.lang.Object {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler<any>>;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public accept(param0: T, param1: java.lang.Throwable): void;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module jdk8 {
          export class SingleMapOptional<T, R> extends io.reactivex.rxjava3.core.Maybe<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.SingleMapOptional<any, any>>;
            public constructor();
            public constructor(param0: io.reactivex.rxjava3.core.Single<any>, param1: io.reactivex.rxjava3.functions.Function<any, java.util.Optional<any>>);
            public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
            public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          }
          export module SingleMapOptional {
            export class MapOptionalSingleObserver<T, R> extends java.lang.Object {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.SingleMapOptional.MapOptionalSingleObserver<any, any>>;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public onSuccess(param0: T): void;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
              public onError(param0: java.lang.Throwable): void;
              public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export abstract class BasicFuseableObserver<T, R> extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.BasicFuseableObserver<any, any>>;
            public downstream: io.reactivex.rxjava3.core.Observer<any>;
            public upstream: io.reactivex.rxjava3.disposables.Disposable;
            public qd: io.reactivex.rxjava3.internal.fuseable.QueueDisposable<T>;
            public done: boolean;
            public sourceMode: number;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public offer(param0: R, param1: R): boolean;
            public requestFusion(param0: number): number;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public offer(param0: T, param1: T): boolean;
            public onError(param0: java.lang.Throwable): void;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public onComplete(): void;
            public isEmpty(): boolean;
            public offer(param0: R): boolean;
            public onNext(param0: T): void;
            public afterDownstream(): void;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public beforeDownstream(): boolean;
            public fail(param0: java.lang.Throwable): void;
            public transitiveBoundaryFusion(param0: number): number;
            public dispose(): void;
            public offer(param0: T): boolean;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public clear(): void;
            public poll(): T;
            public constructor(param0: io.reactivex.rxjava3.core.Observer<any>);
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export abstract class BasicIntQueueDisposable<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.internal.fuseable.QueueDisposable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable<any>>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public constructor();
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public offer(param0: any): boolean;
            public requestFusion(param0: number): number;
            public poll(): any;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public dispose(): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public offer(param0: any, param1: any): boolean;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public isEmpty(): boolean;
            public clear(): void;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export abstract class BasicQueueDisposable<T> extends io.reactivex.rxjava3.internal.fuseable.QueueDisposable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.BasicQueueDisposable<any>>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public constructor();
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public offer(param0: any): boolean;
            public requestFusion(param0: number): number;
            public poll(): any;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public dispose(): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public offer(param0: any, param1: any): boolean;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public isEmpty(): boolean;
            public clear(): void;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export class BiConsumerSingleObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.BiConsumerSingleObserver<any>>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public constructor(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>);
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public onError(param0: java.lang.Throwable): void;
            public dispose(): void;
            public onSuccess(param0: any): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export abstract class BlockingBaseObserver<T> extends java.util.concurrent.CountDownLatch {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.BlockingBaseObserver<any>>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public constructor();
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public blockingGet(): any;
            public onNext(param0: any): void;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public onError(param0: java.lang.Throwable): void;
            public dispose(): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public onComplete(): void;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export class BlockingDisposableMultiObserver<T> extends java.util.concurrent.CountDownLatch {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver<any>>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public constructor();
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public onError(param0: java.lang.Throwable): void;
            public dispose(): void;
            public blockingConsume(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
            public onSuccess(param0: any): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public onComplete(): void;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public blockingConsume(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
            public blockingConsume(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export class BlockingFirstObserver<T> extends io.reactivex.rxjava3.internal.observers.BlockingBaseObserver<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.BlockingFirstObserver<any>>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public constructor();
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public onNext(param0: any): void;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public onError(param0: java.lang.Throwable): void;
            public dispose(): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public onComplete(): void;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export class BlockingLastObserver<T> extends io.reactivex.rxjava3.internal.observers.BlockingBaseObserver<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.BlockingLastObserver<any>>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public constructor();
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public onNext(param0: any): void;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public onError(param0: java.lang.Throwable): void;
            public dispose(): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public onComplete(): void;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export class BlockingMultiObserver<T> extends java.util.concurrent.CountDownLatch {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.BlockingMultiObserver<any>>;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public constructor();
            public onSuccess(param0: any): void;
            public onComplete(): void;
            public blockingGet(): any;
            public blockingGet(param0: any): any;
            public blockingConsume(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): void;
            public blockingAwait(param0: number, param1: java.util.concurrent.TimeUnit): boolean;
            public onError(param0: java.lang.Throwable): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export class BlockingObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.BlockingObserver<any>>;
            public static TERMINATED: any;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public onNext(param0: any): void;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public constructor(param0: java.util.Queue<any>);
            public onError(param0: java.lang.Throwable): void;
            public dispose(): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public onComplete(): void;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export class CallbackCompletableObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public accept(param0: any): void;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public constructor(param0: io.reactivex.rxjava3.functions.Action);
            public onError(param0: java.lang.Throwable): void;
            public dispose(): void;
            public hasCustomOnError(): boolean;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public accept(param0: java.lang.Throwable): void;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public onComplete(): void;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public constructor(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Action);
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export class ConsumerSingleObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.ConsumerSingleObserver<any>>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public constructor(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>);
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public onError(param0: java.lang.Throwable): void;
            public dispose(): void;
            public onSuccess(param0: any): void;
            public hasCustomOnError(): boolean;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export class DeferredScalarDisposable<T> extends io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable<any>>;
            public downstream: io.reactivex.rxjava3.core.Observer<any>;
            public value: any;
            public constructor();
            public error(param0: java.lang.Throwable): void;
            public complete(): void;
            public complete(param0: any): void;
            public isDisposed(): boolean;
            public requestFusion(param0: number): number;
            public poll(): any;
            public isEmpty(): boolean;
            public clear(): void;
            public tryDispose(): boolean;
            public constructor(param0: io.reactivex.rxjava3.core.Observer<any>);
            public dispose(): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export abstract class DeferredScalarObserver<T, R> extends io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable<any> implements io.reactivex.rxjava3.core.Observer<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.DeferredScalarObserver<any, any>>;
            public upstream: io.reactivex.rxjava3.disposables.Disposable;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public constructor();
            public onComplete(): void;
            public onNext(param0: any): void;
            public onError(param0: java.lang.Throwable): void;
            public constructor(param0: io.reactivex.rxjava3.core.Observer<any>);
            public dispose(): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export class DisposableLambdaObserver<T> extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver<any>>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public isDisposed(): boolean;
            public constructor(param0: io.reactivex.rxjava3.core.Observer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action);
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public onError(param0: java.lang.Throwable): void;
            public dispose(): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public onComplete(): void;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public onNext(param0: T): void;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export class EmptyCompletableObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.EmptyCompletableObserver>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public constructor();
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public onError(param0: java.lang.Throwable): void;
            public dispose(): void;
            public hasCustomOnError(): boolean;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public onComplete(): void;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export class ForEachWhileObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.ForEachWhileObserver<any>>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public constructor(param0: io.reactivex.rxjava3.functions.Predicate<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action);
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public onNext(param0: any): void;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public onError(param0: java.lang.Throwable): void;
            public dispose(): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public onComplete(): void;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export class FutureMultiObserver<T> extends java.util.concurrent.CountDownLatch {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.FutureMultiObserver<any>>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public constructor();
            public isDisposed(): boolean;
            public isCancelled(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public cancel(param0: boolean): boolean;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public get(): any;
            public onError(param0: java.lang.Throwable): void;
            public dispose(): void;
            public isDone(): boolean;
            public onSuccess(param0: any): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public onComplete(): void;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public get(param0: number, param1: java.util.concurrent.TimeUnit): any;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export class FutureObserver<T> extends java.util.concurrent.CountDownLatch {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.FutureObserver<any>>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public constructor();
            public isDisposed(): boolean;
            public isCancelled(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public cancel(param0: boolean): boolean;
            public onNext(param0: any): void;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public get(): any;
            public onError(param0: java.lang.Throwable): void;
            public dispose(): void;
            public isDone(): boolean;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public onComplete(): void;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public get(param0: number, param1: java.util.concurrent.TimeUnit): any;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export class InnerQueuedObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.InnerQueuedObserver<any>>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public isDisposed(): boolean;
            public setDone(): void;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public onNext(param0: any): void;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public queue(): io.reactivex.rxjava3.internal.fuseable.SimpleQueue<any>;
            public constructor(param0: io.reactivex.rxjava3.internal.observers.InnerQueuedObserverSupport<any>, param1: number);
            public onError(param0: java.lang.Throwable): void;
            public dispose(): void;
            public isDone(): boolean;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public onComplete(): void;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export class InnerQueuedObserverSupport<T> extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.InnerQueuedObserverSupport<any>>;
            /**
             * Constructs a new instance of the io.reactivex.rxjava3.internal.observers.InnerQueuedObserverSupport<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
             */
            public constructor(implementation: { innerNext(param0: io.reactivex.rxjava3.internal.observers.InnerQueuedObserver<T>, param1: T): void; innerError(param0: io.reactivex.rxjava3.internal.observers.InnerQueuedObserver<T>, param1: java.lang.Throwable): void; innerComplete(param0: io.reactivex.rxjava3.internal.observers.InnerQueuedObserver<T>): void; drain(): void });
            public constructor();
            public innerComplete(param0: io.reactivex.rxjava3.internal.observers.InnerQueuedObserver<T>): void;
            public drain(): void;
            public innerError(param0: io.reactivex.rxjava3.internal.observers.InnerQueuedObserver<T>, param1: java.lang.Throwable): void;
            public innerNext(param0: io.reactivex.rxjava3.internal.observers.InnerQueuedObserver<T>, param1: T): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export class LambdaObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.LambdaObserver<any>>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public onNext(param0: any): void;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public constructor(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action, param3: io.reactivex.rxjava3.functions.Consumer<any>);
            public onError(param0: java.lang.Throwable): void;
            public dispose(): void;
            public hasCustomOnError(): boolean;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public onComplete(): void;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export abstract class QueueDrainObserver<T, U, V> extends io.reactivex.rxjava3.internal.observers.QueueDrainSubscriberPad2 {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.QueueDrainObserver<any, any, any>>;
            public downstream: io.reactivex.rxjava3.core.Observer<any>;
            public queue: io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue<any>;
            public enter(): boolean;
            public fastPathEmit(param0: any, param1: boolean, param2: io.reactivex.rxjava3.disposables.Disposable): void;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public fastPathOrderedEmit(param0: any, param1: boolean, param2: io.reactivex.rxjava3.disposables.Disposable): void;
            public done(): boolean;
            public onNext(param0: any): void;
            public accept(param0: io.reactivex.rxjava3.core.Observer<any>, param1: any): void;
            public cancelled(): boolean;
            public onError(param0: java.lang.Throwable): void;
            public leave(param0: number): number;
            public onComplete(): void;
            public error(): java.lang.Throwable;
            public constructor(param0: io.reactivex.rxjava3.core.Observer<any>, param1: io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue<any>);
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export class QueueDrainSubscriberPad0 {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.QueueDrainSubscriberPad0>;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export class QueueDrainSubscriberPad2 extends io.reactivex.rxjava3.internal.observers.QueueDrainSubscriberWip {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.QueueDrainSubscriberPad2>;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export class QueueDrainSubscriberWip extends io.reactivex.rxjava3.internal.observers.QueueDrainSubscriberPad0 {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.QueueDrainSubscriberWip>;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export class ResumeSingleObserver<T> extends io.reactivex.rxjava3.core.SingleObserver<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.ResumeSingleObserver<any>>;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public onSuccess(param0: any): void;
            public constructor(param0: java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable>, param1: io.reactivex.rxjava3.core.SingleObserver<any>);
            public onError(param0: java.lang.Throwable): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export class SafeCompletableObserver extends io.reactivex.rxjava3.core.CompletableObserver {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.SafeCompletableObserver>;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public onComplete(): void;
            public constructor(param0: io.reactivex.rxjava3.core.CompletableObserver);
            public onError(param0: java.lang.Throwable): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export class SafeMaybeObserver<T> extends io.reactivex.rxjava3.core.MaybeObserver<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.SafeMaybeObserver<any>>;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public onSuccess(param0: any): void;
            public onComplete(): void;
            public constructor(param0: io.reactivex.rxjava3.core.MaybeObserver<any>);
            public onError(param0: java.lang.Throwable): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module observers {
          export class SafeSingleObserver<T> extends io.reactivex.rxjava3.core.SingleObserver<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.SafeSingleObserver<any>>;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public constructor(param0: io.reactivex.rxjava3.core.SingleObserver<any>);
            public onSuccess(param0: any): void;
            public onError(param0: java.lang.Throwable): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableAmb extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableAmb>;
              public constructor();
              public constructor(param0: androidNative.Array<io.reactivex.rxjava3.core.CompletableSource>, param1: java.lang.Iterable<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableAmb {
              export class Amb extends io.reactivex.rxjava3.core.CompletableObserver {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableAmb.Amb>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableAndThenCompletable extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletable>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource, param1: io.reactivex.rxjava3.core.CompletableSource);
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableAndThenCompletable {
              export class NextObserver extends io.reactivex.rxjava3.core.CompletableObserver {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletable.NextObserver>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              }
              export class SourceObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletable.SourceObserver>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableCache extends io.reactivex.rxjava3.core.Completable implements io.reactivex.rxjava3.core.CompletableObserver {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableCache>;
              public constructor();
              public onError(param0: java.lang.Throwable): void;
              public onComplete(): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource);
              public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableCache {
              export class InnerCompletableCache implements io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableCache.InnerCompletableCache>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableConcat extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableConcat>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public constructor(param0: org.reactivestreams.Publisher<any>, param1: number);
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableConcat {
              export class CompletableConcatSubscriber extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: io.reactivex.rxjava3.core.CompletableSource): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export module CompletableConcatSubscriber {
                export class ConcatInnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.CompletableObserver {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.ConcatInnerObserver>;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableConcatArray extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableConcatArray>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: androidNative.Array<io.reactivex.rxjava3.core.CompletableSource>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableConcatArray {
              export class ConcatInnerObserver implements io.reactivex.rxjava3.core.CompletableObserver {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableConcatArray.ConcatInnerObserver>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableConcatIterable extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public constructor(param0: java.lang.Iterable<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableConcatIterable {
              export class ConcatInnerObserver implements io.reactivex.rxjava3.core.CompletableObserver {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableCreate extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableCreate>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.CompletableOnSubscribe);
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableCreate {
              export class Emitter extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter>;
                public dispose(): void;
                public toString(): string;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                public onError(param0: java.lang.Throwable): void;
                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public tryOnError(param0: java.lang.Throwable): boolean;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableDefer extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableDefer>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableDelay extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableDelay>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: boolean);
            }
            export module CompletableDelay {
              export class Delay extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableDelay.Delay>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableDetach extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableDetach>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource);
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableDetach {
              export class DetachCompletableObserver implements io.reactivex.rxjava3.core.CompletableObserver, io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableDetach.DetachCompletableObserver>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableDisposeOn extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOn>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource, param1: io.reactivex.rxjava3.core.Scheduler);
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableDisposeOn {
              export class DisposeOnObserver implements io.reactivex.rxjava3.core.CompletableObserver, io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOn.DisposeOnObserver>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableDoFinally extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinally>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource, param1: io.reactivex.rxjava3.functions.Action);
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableDoFinally {
              export class DoFinallyObserver implements io.reactivex.rxjava3.core.CompletableObserver, io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinally.DoFinallyObserver>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableDoOnEvent extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource, param1: io.reactivex.rxjava3.functions.Consumer<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableDoOnEvent {
              export class DoOnEvent extends io.reactivex.rxjava3.core.CompletableObserver {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableEmpty extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableEmpty>;
              public static INSTANCE: io.reactivex.rxjava3.core.Completable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableError extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableError>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: java.lang.Throwable);
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableErrorSupplier extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableErrorSupplier>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableFromAction extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableFromAction>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public constructor(param0: io.reactivex.rxjava3.functions.Action);
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableFromCallable extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableFromCallable>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: java.util.concurrent.Callable<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableFromObservable<T> extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableFromObservable {
              export class CompletableFromObservableObserver<T> extends io.reactivex.rxjava3.core.Observer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable.CompletableFromObservableObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableFromPublisher<T> extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public constructor(param0: org.reactivestreams.Publisher<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableFromPublisher {
              export class FromPublisherSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher.FromPublisherSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableFromRunnable extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnable>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public constructor(param0: java.lang.Runnable);
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableFromSingle<T> extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableFromSingle {
              export class CompletableFromSingleObserver<T> extends io.reactivex.rxjava3.core.SingleObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle.CompletableFromSingleObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableFromSupplier extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableFromSupplier>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableFromUnsafeSource extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableFromUnsafeSource>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource);
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableHide extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableHide>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource);
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableHide {
              export class HideCompletableObserver implements io.reactivex.rxjava3.core.CompletableObserver, io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableHide.HideCompletableObserver>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableLift extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableLift>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource, param1: io.reactivex.rxjava3.core.CompletableOperator);
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableMaterialize<T> extends io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.core.Notification<any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableMaterialize<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Completable);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableMerge extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableMerge>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: org.reactivestreams.Publisher<any>, param1: number, param2: boolean);
            }
            export module CompletableMerge {
              export class CompletableMergeSubscriber extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber>;
                public dispose(): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: io.reactivex.rxjava3.core.CompletableSource): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export module CompletableMergeSubscriber {
                export class MergeInnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.MergeInnerObserver>;
                  public onComplete(): void;
                  public dispose(): void;
                  public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                  public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                  public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                  public isDisposed(): boolean;
                  public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableMergeArray extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArray>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: androidNative.Array<io.reactivex.rxjava3.core.CompletableSource>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableMergeArray {
              export class InnerCompletableObserver implements io.reactivex.rxjava3.core.CompletableObserver, io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArray.InnerCompletableObserver>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableMergeArrayDelayError extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: androidNative.Array<io.reactivex.rxjava3.core.CompletableSource>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableMergeArrayDelayError {
              export class MergeInnerCompletableObserver extends io.reactivex.rxjava3.core.CompletableObserver {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.MergeInnerCompletableObserver>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              }
              export class TryTerminateAndReportDisposable extends io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableMergeDelayErrorIterable extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableMergeDelayErrorIterable>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public constructor(param0: java.lang.Iterable<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableMergeIterable extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public constructor(param0: java.lang.Iterable<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableMergeIterable {
              export class MergeCompletableObserver implements io.reactivex.rxjava3.core.CompletableObserver, io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableNever extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableNever>;
              public static INSTANCE: io.reactivex.rxjava3.core.Completable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableObserveOn extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableObserveOn>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource, param1: io.reactivex.rxjava3.core.Scheduler);
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableObserveOn {
              export class ObserveOnCompletableObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableObserveOn.ObserveOnCompletableObserver>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableOnErrorComplete extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorComplete>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource, param1: io.reactivex.rxjava3.functions.Predicate<any>);
            }
            export module CompletableOnErrorComplete {
              export class OnError extends io.reactivex.rxjava3.core.CompletableObserver {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorComplete.OnError>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableOnErrorReturn<T> extends io.reactivex.rxjava3.core.Maybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorReturn<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableOnErrorReturn {
              export class OnErrorReturnMaybeObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorReturn.OnErrorReturnMaybeObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletablePeek extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletablePeek>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Consumer<any>, param3: io.reactivex.rxjava3.functions.Action, param4: io.reactivex.rxjava3.functions.Action, param5: io.reactivex.rxjava3.functions.Action, param6: io.reactivex.rxjava3.functions.Action);
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletablePeek {
              export class CompletableObserverImplementation implements io.reactivex.rxjava3.core.CompletableObserver, io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletablePeek.CompletableObserverImplementation>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableResumeNext extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableResumeNext {
              export class ResumeNextObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext.ResumeNextObserver>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableSubscribeOn extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource, param1: io.reactivex.rxjava3.core.Scheduler);
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableSubscribeOn {
              export class SubscribeOnObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn.SubscribeOnObserver>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableTakeUntilCompletable extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Completable, param1: io.reactivex.rxjava3.core.CompletableSource);
            }
            export module CompletableTakeUntilCompletable {
              export class TakeUntilMainObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export module TakeUntilMainObserver {
                export class OtherObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.CompletableObserver {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver>;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableTimeout extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: io.reactivex.rxjava3.core.CompletableSource);
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableTimeout {
              export class DisposeTask {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout.DisposeTask>;
                public run(): void;
              }
              export module DisposeTask {
                export class DisposeObserver extends io.reactivex.rxjava3.core.CompletableObserver {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout.DisposeTask.DisposeObserver>;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                }
              }
              export class TimeOutObserver extends io.reactivex.rxjava3.core.CompletableObserver {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout.TimeOutObserver>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableTimer extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableTimer>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler);
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableTimer {
              export class TimerDisposable extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableTimer.TimerDisposable>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableToFlowable<T> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableToFlowable<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableToObservable<T> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableToObservable<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource);
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableToSingle<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableToSingle<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource, param1: io.reactivex.rxjava3.functions.Supplier<any>, param2: any);
            }
            export module CompletableToSingle {
              export class ToSingle extends io.reactivex.rxjava3.core.CompletableObserver {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableToSingle.ToSingle>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module completable {
            export class CompletableUsing<R> extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableUsing<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Consumer<any>, param3: boolean);
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module CompletableUsing {
              export class UsingObserver<R> extends java.util.concurrent.atomic.AtomicReference<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableUsing.UsingObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export abstract class AbstractBackpressureThrottlingSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.AbstractBackpressureThrottlingSubscriber<any, any>>;
              public cancel(): void;
              public onNext(param0: any): void;
              public onError(param0: java.lang.Throwable): void;
              public onComplete(): void;
              public onSubscribe(param0: org.reactivestreams.Subscription): void;
              public request(param0: number): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export abstract class AbstractFlowableWithUpstream<T, R> extends io.reactivex.rxjava3.core.Flowable<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamPublisher<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any>>;
              public source(): org.reactivestreams.Publisher<any>;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class BlockingFlowableIterable<T> extends java.lang.Iterable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable<any>>;
              public iterator(): java.util.Iterator<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number);
            }
            export module BlockingFlowableIterable {
              export class BlockingFlowableIterator<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable.BlockingFlowableIterator<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public next(): any;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public hasNext(): boolean;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public remove(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class BlockingFlowableLatest<T> extends java.lang.Iterable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest<any>>;
              public iterator(): java.util.Iterator<any>;
              public constructor(param0: org.reactivestreams.Publisher<any>);
            }
            export module BlockingFlowableLatest {
              export class LatestSubscriberIterator<T> extends io.reactivex.rxjava3.subscribers.DisposableSubscriber<io.reactivex.rxjava3.core.Notification<any>> implements java.util.Iterator<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest.LatestSubscriberIterator<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public next(): any;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: io.reactivex.rxjava3.core.Notification<any>): void;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public hasNext(): boolean;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public remove(): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class BlockingFlowableMostRecent<T> extends java.lang.Iterable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent<any>>;
              public iterator(): java.util.Iterator<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: any);
            }
            export module BlockingFlowableMostRecent {
              export class MostRecentSubscriber<T> extends io.reactivex.rxjava3.subscribers.DefaultSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent.MostRecentSubscriber<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onComplete(): void;
                public getIterable(): io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent.MostRecentSubscriber.Iterator;
                public onNext(param0: any): void;
              }
              export module MostRecentSubscriber {
                export class Iterator extends java.util.Iterator<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent.MostRecentSubscriber.Iterator>;
                  public hasNext(): boolean;
                  public remove(): void;
                  public next(): any;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class BlockingFlowableNext<T> extends java.lang.Iterable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext<any>>;
              public iterator(): java.util.Iterator<any>;
              public constructor(param0: org.reactivestreams.Publisher<any>);
            }
            export module BlockingFlowableNext {
              export class NextIterator<T> extends java.util.Iterator<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext.NextIterator<any>>;
                public next(): any;
                public hasNext(): boolean;
                public remove(): void;
              }
              export class NextSubscriber<T> extends io.reactivex.rxjava3.subscribers.DisposableSubscriber<io.reactivex.rxjava3.core.Notification<any>> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext.NextSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public onNext(param0: io.reactivex.rxjava3.core.Notification<any>): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public takeNext(): io.reactivex.rxjava3.core.Notification<any>;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableAll<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, java.lang.Boolean> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableAll<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableAll {
              export class AllSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<java.lang.Boolean> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableAll.AllSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableAllSingle<T> extends io.reactivex.rxjava3.core.Single<java.lang.Boolean> implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<java.lang.Boolean> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
              public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<java.lang.Boolean>;
            }
            export module FlowableAllSingle {
              export class AllSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle.AllSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableAmb<T> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb<any>>;
              public constructor();
              public constructor(param0: androidNative.Array<org.reactivestreams.Publisher<any>>, param1: java.lang.Iterable<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableAmb {
              export class AmbCoordinator<T> extends org.reactivestreams.Subscription {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb.AmbCoordinator<any>>;
                public cancel(): void;
                public win(param0: number): boolean;
                public request(param0: number): void;
                public subscribe(param0: androidNative.Array<org.reactivestreams.Publisher<any>>): void;
              }
              export class AmbInnerSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb.AmbInnerSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableAny<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, java.lang.Boolean> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableAny<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableAny {
              export class AnySubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<java.lang.Boolean> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableAny.AnySubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableAnySingle<T> extends io.reactivex.rxjava3.core.Single<java.lang.Boolean> implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<java.lang.Boolean> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableAnySingle<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
              public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<java.lang.Boolean>;
            }
            export module FlowableAnySingle {
              export class AnySubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableAnySingle.AnySubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableAutoConnect<T> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableAutoConnect<any>>;
              public constructor();
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.flowables.ConnectableFlowable<any>, param1: number, param2: io.reactivex.rxjava3.functions.Consumer<any>);
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableBlockingSubscribe {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingSubscribe>;
              public static subscribe(param0: org.reactivestreams.Publisher): void;
              public static subscribe(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Subscriber): void;
              public static subscribe(param0: org.reactivestreams.Publisher, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Consumer<any>, param3: io.reactivex.rxjava3.functions.Action): void;
              public static subscribe(param0: org.reactivestreams.Publisher, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Consumer<any>, param3: io.reactivex.rxjava3.functions.Action, param4: number): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableBuffer<T, C> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer<any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number, param2: number, param3: io.reactivex.rxjava3.functions.Supplier<any>);
            }
            export module FlowableBuffer {
              export class PublisherBufferExactSubscriber<T, C> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
              }
              export class PublisherBufferOverlappingSubscriber<T, C> extends java.util.concurrent.atomic.AtomicLong {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferOverlappingSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public getAsBoolean(): boolean;
                public onNext(param0: any): void;
              }
              export class PublisherBufferSkipSubscriber<T, C> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferSkipSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableBufferBoundary<T, U, Open, Close> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary<any, any, any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: org.reactivestreams.Publisher<any>, param2: io.reactivex.rxjava3.functions.Function<any, any>, param3: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableBufferBoundary {
              export class BufferBoundarySubscriber<T, C, Open, Close> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary.BufferBoundarySubscriber<any, any, any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
              export module BufferBoundarySubscriber {
                export class BufferOpenSubscriber<Open> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary.BufferBoundarySubscriber.BufferOpenSubscriber<any>>;
                  public onNext(param0: any): void;
                  public onComplete(): void;
                  public dispose(): void;
                  public onSubscribe(param0: org.reactivestreams.Subscription): void;
                  public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                  public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                  public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                  public onError(param0: java.lang.Throwable): void;
                  public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                  public isDisposed(): boolean;
                  public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                }
              }
              export class BufferCloseSubscriber<T, C> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary.BufferCloseSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableBufferExactBoundary<T, U, B> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary<any, any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: org.reactivestreams.Publisher<any>, param2: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableBufferExactBoundary {
              export class BufferBoundarySubscriber<T, U, B> extends io.reactivex.rxjava3.subscribers.DisposableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary.BufferBoundarySubscriber<any, any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class BufferExactBoundarySubscriber<T, U, B> extends io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber<any, any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary.BufferExactBoundarySubscriber<any, any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public done(): boolean;
                public onComplete(): void;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public requested(): number;
                public produced(param0: number): number;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public requested(param0: number): void;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public request(param0: number): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
                public cancelled(): boolean;
                public leave(param0: number): number;
                public isDisposed(): boolean;
                public cancel(): void;
                public enter(): boolean;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public accept(param0: org.reactivestreams.Subscriber<any>, param1: any): boolean;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public error(): java.lang.Throwable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableBufferTimed<T, U> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed<any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number, param2: number, param3: java.util.concurrent.TimeUnit, param4: io.reactivex.rxjava3.core.Scheduler, param5: io.reactivex.rxjava3.functions.Supplier<any>, param6: number, param7: boolean);
            }
            export module FlowableBufferTimed {
              export class BufferExactBoundedSubscriber<T, U> extends io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber<any, any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferExactBoundedSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public done(): boolean;
                public onComplete(): void;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public requested(): number;
                public produced(param0: number): number;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public requested(param0: number): void;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public request(param0: number): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
                public cancelled(): boolean;
                public leave(param0: number): number;
                public isDisposed(): boolean;
                public cancel(): void;
                public enter(): boolean;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public accept(param0: org.reactivestreams.Subscriber<any>, param1: any): boolean;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public error(): java.lang.Throwable;
              }
              export class BufferExactUnboundedSubscriber<T, U> extends io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber<any, any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferExactUnboundedSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public done(): boolean;
                public onComplete(): void;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public requested(): number;
                public produced(param0: number): number;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public requested(param0: number): void;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public request(param0: number): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
                public cancelled(): boolean;
                public leave(param0: number): number;
                public isDisposed(): boolean;
                public cancel(): void;
                public enter(): boolean;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public accept(param0: org.reactivestreams.Subscriber<any>, param1: any): boolean;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public error(): java.lang.Throwable;
              }
              export class BufferSkipBoundedSubscriber<T, U> extends io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber<any, any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferSkipBoundedSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public cancelled(): boolean;
                public leave(param0: number): number;
                public done(): boolean;
                public cancel(): void;
                public enter(): boolean;
                public onComplete(): void;
                public requested(): number;
                public produced(param0: number): number;
                public requested(param0: number): void;
                public onError(param0: java.lang.Throwable): void;
                public accept(param0: org.reactivestreams.Subscriber<any>, param1: any): boolean;
                public run(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
                public error(): java.lang.Throwable;
              }
              export module BufferSkipBoundedSubscriber {
                export class RemoveFromBuffer {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferSkipBoundedSubscriber.RemoveFromBuffer>;
                  public run(): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableCache<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCache<any>>;
              public constructor();
              public onNext(param0: any): void;
              public onError(param0: java.lang.Throwable): void;
              public onComplete(): void;
              public source(): org.reactivestreams.Publisher<any>;
              public onSubscribe(param0: org.reactivestreams.Subscription): void;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number);
            }
            export module FlowableCache {
              export class CacheSubscription<T> extends java.util.concurrent.atomic.AtomicInteger implements org.reactivestreams.Subscription {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.CacheSubscription<any>>;
                public cancel(): void;
                public request(param0: number): void;
              }
              export class Node<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.Node<any>>;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableCollect<T, U> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect<any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Supplier<any>, param2: io.reactivex.rxjava3.functions.BiConsumer<any, any>);
            }
            export module FlowableCollect {
              export class CollectSubscriber<T, U> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect.CollectSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableCollectSingle<T, U> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Supplier<any>, param2: io.reactivex.rxjava3.functions.BiConsumer<any, any>);
              public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
            }
            export module FlowableCollectSingle {
              export class CollectSubscriber<T, U> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle.CollectSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableCombineLatest<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest<any, any>>;
              public constructor();
              public constructor(param0: androidNative.Array<org.reactivestreams.Publisher<any>>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number, param3: boolean);
              public constructor(param0: java.lang.Iterable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number, param3: boolean);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableCombineLatest {
              export class CombineLatestCoordinator<T, R> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest.CombineLatestCoordinator<any, any>>;
                public requestFusion(param0: number): number;
                public clear(): void;
                public cancel(): void;
                public isEmpty(): boolean;
                public request(param0: number): void;
                public poll(): any;
              }
              export class CombineLatestInnerSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest.CombineLatestInnerSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public requestOne(): void;
                public onNext(param0: any): void;
              }
              export class SingletonArrayFunc extends io.reactivex.rxjava3.functions.Function<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest.SingletonArrayFunc>;
                public apply(param0: any): any;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableConcatArray<T> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray<any>>;
              public constructor();
              public constructor(param0: androidNative.Array<org.reactivestreams.Publisher<any>>, param1: boolean);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableConcatArray {
              export class ConcatArraySubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray.ConcatArraySubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableConcatMap<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number, param3: io.reactivex.rxjava3.internal.util.ErrorMode);
              public source(): org.reactivestreams.Publisher<any>;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public static subscribe(param0: org.reactivestreams.Subscriber, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number, param3: io.reactivex.rxjava3.internal.util.ErrorMode): org.reactivestreams.Subscriber;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: org.reactivestreams.Subscriber<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.FlowableSubscriber<any>): void;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module FlowableConcatMap {
              export abstract class BaseConcatMapSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.BaseConcatMapSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public innerError(param0: java.lang.Throwable): void;
                public innerComplete(): void;
                public innerNext(param0: any): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
              export class ConcatMapDelayed<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.BaseConcatMapSubscriber<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.ConcatMapDelayed<any, any>>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public innerError(param0: java.lang.Throwable): void;
                public innerComplete(): void;
                public innerNext(param0: any): void;
                public cancel(): void;
                public request(param0: number): void;
              }
              export class ConcatMapImmediate<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.BaseConcatMapSubscriber<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.ConcatMapImmediate<any, any>>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public innerError(param0: java.lang.Throwable): void;
                public innerComplete(): void;
                public innerNext(param0: any): void;
                public cancel(): void;
                public request(param0: number): void;
              }
              export class ConcatMapInner<R> extends io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.ConcatMapInner<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
              export class ConcatMapSupport<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.ConcatMapSupport<any>>;
                /**
                 * Constructs a new instance of the io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$ConcatMapSupport interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                 */
                public constructor(implementation: { innerNext(param0: T): void; innerComplete(): void; innerError(param0: java.lang.Throwable): void });
                public constructor();
                public innerError(param0: java.lang.Throwable): void;
                public innerComplete(): void;
                public innerNext(param0: T): void;
              }
              export class SimpleScalarSubscription<T> extends java.util.concurrent.atomic.AtomicBoolean implements org.reactivestreams.Subscription {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.SimpleScalarSubscription<any>>;
                public cancel(): void;
                public request(param0: number): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableConcatMapEager<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager<any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number, param3: number, param4: io.reactivex.rxjava3.internal.util.ErrorMode);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableConcatMapEager {
              export class ConcatMapEagerDelayErrorSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager.ConcatMapEagerDelayErrorSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public innerNext(param0: io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber<any>, param1: any): void;
                public innerError(param0: io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber<any>, param1: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public drain(): void;
                public onNext(param0: any): void;
                public innerComplete(param0: io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber<any>): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableConcatMapEagerPublisher<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEagerPublisher<any, any>>;
              public constructor();
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: org.reactivestreams.Publisher<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number, param3: number, param4: io.reactivex.rxjava3.internal.util.ErrorMode);
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableConcatMapScheduler<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number, param3: io.reactivex.rxjava3.internal.util.ErrorMode, param4: io.reactivex.rxjava3.core.Scheduler);
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableConcatMapScheduler {
              export abstract class BaseConcatMapSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler.BaseConcatMapSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public innerError(param0: java.lang.Throwable): void;
                public innerComplete(): void;
                public innerNext(param0: any): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
              export class ConcatMapDelayed<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler.BaseConcatMapSubscriber<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler.ConcatMapDelayed<any, any>>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public innerError(param0: java.lang.Throwable): void;
                public innerComplete(): void;
                public innerNext(param0: any): void;
                public cancel(): void;
                public run(): void;
                public request(param0: number): void;
              }
              export class ConcatMapImmediate<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler.BaseConcatMapSubscriber<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler.ConcatMapImmediate<any, any>>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public innerError(param0: java.lang.Throwable): void;
                public innerComplete(): void;
                public innerNext(param0: any): void;
                public cancel(): void;
                public run(): void;
                public request(param0: number): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableConcatWithCompletable<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.core.CompletableSource);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableConcatWithCompletable {
              export class ConcatWithSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableConcatWithMaybe<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybe<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>);
            }
            export module FlowableConcatWithMaybe {
              export class ConcatWithSubscriber<T> extends io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber<any, any> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybe.ConcatWithSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableConcatWithSingle<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingle<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableConcatWithSingle {
              export class ConcatWithSubscriber<T> extends io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber<any, any> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingle.ConcatWithSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableCount<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, java.lang.Long> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCount<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>);
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableCount {
              export class CountSubscriber extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<java.lang.Long> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCount.CountSubscriber>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableCountSingle<T> extends io.reactivex.rxjava3.core.Single<java.lang.Long> implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<java.lang.Long> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCountSingle<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
              public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<java.lang.Long>;
            }
            export module FlowableCountSingle {
              export class CountSubscriber extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCountSingle.CountSubscriber>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableCreate<T> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.FlowableOnSubscribe<any>, param1: io.reactivex.rxjava3.core.BackpressureStrategy);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableCreate {
              export abstract class BaseEmitter<T> extends java.util.concurrent.atomic.AtomicLong {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.BaseEmitter<any>>;
                public toString(): string;
                public signalError(param0: java.lang.Throwable): boolean;
                public cancel(): void;
                public completeDownstream(): void;
                public onComplete(): void;
                public requested(): number;
                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                public onError(param0: java.lang.Throwable): void;
                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public tryOnError(param0: java.lang.Throwable): boolean;
                public isCancelled(): boolean;
                public serialize(): io.reactivex.rxjava3.core.FlowableEmitter<any>;
                public request(param0: number): void;
                public errorDownstream(param0: java.lang.Throwable): boolean;
                public onNext(param0: any): void;
              }
              export class BufferAsyncEmitter<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.BaseEmitter<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.BufferAsyncEmitter<any>>;
                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public tryOnError(param0: java.lang.Throwable): boolean;
                public signalError(param0: java.lang.Throwable): boolean;
                public isCancelled(): boolean;
                public serialize(): io.reactivex.rxjava3.core.FlowableEmitter<any>;
                public onComplete(): void;
                public requested(): number;
                public onNext(param0: any): void;
                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
              }
              export class DropAsyncEmitter<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.NoOverflowBaseAsyncEmitter<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter<any>>;
                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public tryOnError(param0: java.lang.Throwable): boolean;
                public isCancelled(): boolean;
                public serialize(): io.reactivex.rxjava3.core.FlowableEmitter<any>;
                public requested(): number;
                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
              }
              export class ErrorAsyncEmitter<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.NoOverflowBaseAsyncEmitter<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.ErrorAsyncEmitter<any>>;
                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public tryOnError(param0: java.lang.Throwable): boolean;
                public isCancelled(): boolean;
                public serialize(): io.reactivex.rxjava3.core.FlowableEmitter<any>;
                public requested(): number;
                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
              }
              export class LatestAsyncEmitter<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.BaseEmitter<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.LatestAsyncEmitter<any>>;
                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public tryOnError(param0: java.lang.Throwable): boolean;
                public signalError(param0: java.lang.Throwable): boolean;
                public isCancelled(): boolean;
                public serialize(): io.reactivex.rxjava3.core.FlowableEmitter<any>;
                public onComplete(): void;
                public requested(): number;
                public onNext(param0: any): void;
                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
              }
              export class MissingEmitter<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.BaseEmitter<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.MissingEmitter<any>>;
                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public tryOnError(param0: java.lang.Throwable): boolean;
                public isCancelled(): boolean;
                public serialize(): io.reactivex.rxjava3.core.FlowableEmitter<any>;
                public requested(): number;
                public onNext(param0: any): void;
                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
              }
              export abstract class NoOverflowBaseAsyncEmitter<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.BaseEmitter<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.NoOverflowBaseAsyncEmitter<any>>;
                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public tryOnError(param0: java.lang.Throwable): boolean;
                public isCancelled(): boolean;
                public serialize(): io.reactivex.rxjava3.core.FlowableEmitter<any>;
                public requested(): number;
                public onNext(param0: any): void;
                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
              }
              export class SerializedEmitter<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.FlowableEmitter<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.SerializedEmitter<any>>;
                public onError(param0: java.lang.Throwable): void;
                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public tryOnError(param0: java.lang.Throwable): boolean;
                public toString(): string;
                public isCancelled(): boolean;
                public serialize(): io.reactivex.rxjava3.core.FlowableEmitter<any>;
                public onComplete(): void;
                public requested(): number;
                public onNext(param0: any): void;
                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableDebounce<T, U> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce<any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableDebounce {
              export class DebounceSubscriber<T, U> extends java.util.concurrent.atomic.AtomicLong {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
              export module DebounceSubscriber {
                export class DebounceInnerSubscriber<T, U> extends io.reactivex.rxjava3.subscribers.DisposableSubscriber<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber.DebounceInnerSubscriber<any, any>>;
                  public onNext(param0: any): void;
                  public onComplete(): void;
                  public dispose(): void;
                  public onSubscribe(param0: org.reactivestreams.Subscription): void;
                  public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                  public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                  public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                  public onError(param0: java.lang.Throwable): void;
                  public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                  public isDisposed(): boolean;
                  public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableDebounceTimed<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler);
            }
            export module FlowableDebounceTimed {
              export class DebounceEmitter<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public setResource(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export class DebounceTimedSubscriber<T> extends java.util.concurrent.atomic.AtomicLong {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceTimedSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableDefer<T> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDefer<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableDelay<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: boolean);
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableDelay {
              export class DelaySubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
              }
              export module DelaySubscriber {
                export class OnComplete {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnComplete>;
                  public run(): void;
                }
                export class OnError {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError>;
                  public run(): void;
                }
                export class OnNext {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnNext>;
                  public run(): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableDelaySubscriptionOther<T, U> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther<any, any>>;
              public constructor();
              public constructor(param0: org.reactivestreams.Publisher<any>, param1: org.reactivestreams.Publisher<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableDelaySubscriptionOther {
              export class MainSubscriber<T> extends java.util.concurrent.atomic.AtomicLong {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
              export module MainSubscriber {
                export class OtherSubscriber extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber.OtherSubscriber>;
                  public onNext(param0: any): void;
                  public onComplete(): void;
                  public onSubscribe(param0: org.reactivestreams.Subscription): void;
                  public onError(param0: java.lang.Throwable): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableDematerialize<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize<any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableDematerialize {
              export class DematerializeSubscriber<T, R> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize.DematerializeSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableDetach<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>);
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableDetach {
              export class DetachSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach.DetachSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableDistinct<T, K> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct<any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableDistinct {
              export class DistinctSubscriber<T, K> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct.DistinctSubscriber<any, any>>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public requestFusion(param0: number): number;
                public clear(): void;
                public onComplete(): void;
                public poll(): any;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableDistinctUntilChanged<T, K> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged<any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.BiPredicate<any, any>);
            }
            export module FlowableDistinctUntilChanged {
              export class DistinctUntilChangedConditionalSubscriber<T, K> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber<any, any>>;
                public requestFusion(param0: number): number;
                public poll(): any;
                public onNext(param0: any): void;
                public tryOnNext(param0: any): boolean;
              }
              export class DistinctUntilChangedSubscriber<T, K> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber<any, any> implements io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public requestFusion(param0: number): number;
                public poll(): any;
                public onNext(param0: any): void;
                public tryOnNext(param0: any): boolean;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableDoAfterNext<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>);
            }
            export module FlowableDoAfterNext {
              export class DoAfterConditionalSubscriber<T> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber<any>>;
                public requestFusion(param0: number): number;
                public poll(): any;
                public onNext(param0: any): void;
                public tryOnNext(param0: any): boolean;
              }
              export class DoAfterSubscriber<T> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public requestFusion(param0: number): number;
                public poll(): any;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableDoFinally<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Action);
            }
            export module FlowableDoFinally {
              export class DoFinallyConditionalSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> implements io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally.DoFinallyConditionalSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public requestFusion(param0: number): number;
                public clear(): void;
                public cancel(): void;
                public isEmpty(): boolean;
                public onComplete(): void;
                public request(param0: number): void;
                public poll(): any;
                public onNext(param0: any): void;
                public tryOnNext(param0: any): boolean;
              }
              export class DoFinallySubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally.DoFinallySubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public requestFusion(param0: number): number;
                public clear(): void;
                public cancel(): void;
                public isEmpty(): boolean;
                public onComplete(): void;
                public request(param0: number): void;
                public poll(): any;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableDoOnEach<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Consumer<any>, param3: io.reactivex.rxjava3.functions.Action, param4: io.reactivex.rxjava3.functions.Action);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableDoOnEach {
              export class DoOnEachConditionalSubscriber<T> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach.DoOnEachConditionalSubscriber<any>>;
                public onError(param0: java.lang.Throwable): void;
                public requestFusion(param0: number): number;
                public onComplete(): void;
                public poll(): any;
                public onNext(param0: any): void;
                public tryOnNext(param0: any): boolean;
              }
              export class DoOnEachSubscriber<T> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach.DoOnEachSubscriber<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public requestFusion(param0: number): number;
                public onComplete(): void;
                public poll(): any;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableDoOnLifecycle<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.LongConsumer, param3: io.reactivex.rxjava3.functions.Action);
            }
            export module FlowableDoOnLifecycle {
              export class SubscriptionLambdaSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableElementAt<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number, param2: any, param3: boolean);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableElementAt {
              export class ElementAtSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableElementAtMaybe<T> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number);
              public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
            }
            export module FlowableElementAtMaybe {
              export class ElementAtSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableElementAtMaybePublisher<T> extends io.reactivex.rxjava3.core.Maybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybePublisher<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: org.reactivestreams.Publisher<any>, param1: number);
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableElementAtSingle<T> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number, param2: any);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
            }
            export module FlowableElementAtSingle {
              export class ElementAtSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableEmpty extends io.reactivex.rxjava3.core.Flowable<any> implements io.reactivex.rxjava3.internal.fuseable.ScalarSupplier<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty>;
              public static INSTANCE: io.reactivex.rxjava3.core.Flowable<any>;
              public get(): any;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableError<T> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableError<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableFilter<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableFilter {
              export class FilterConditionalSubscriber<T> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber<any>>;
                public requestFusion(param0: number): number;
                public poll(): any;
                public onNext(param0: any): void;
                public tryOnNext(param0: any): boolean;
              }
              export class FilterSubscriber<T> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber<any, any> implements io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public requestFusion(param0: number): number;
                public poll(): any;
                public onNext(param0: any): void;
                public tryOnNext(param0: any): boolean;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableFlatMap<T, U> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap<any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static subscribe(param0: org.reactivestreams.Subscriber, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean, param3: number, param4: number): io.reactivex.rxjava3.core.FlowableSubscriber<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean, param3: number, param4: number);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: org.reactivestreams.Subscriber<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.FlowableSubscriber<any>): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module FlowableFlatMap {
              export class InnerSubscriber<T, U> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class MergeSubscriber<T, U> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.MergeSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableFlatMapCompletable<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean, param3: number);
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableFlatMapCompletable {
              export class FlatMapCompletableMainSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable.FlatMapCompletableMainSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public clear(): void;
                public requestFusion(param0: number): number;
                public cancel(): void;
                public isEmpty(): boolean;
                public onComplete(): void;
                public request(param0: number): void;
                public poll(): any;
                public onNext(param0: any): void;
              }
              export module FlatMapCompletableMainSubscriber {
                export class InnerConsumer extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable.FlatMapCompletableMainSubscriber.InnerConsumer>;
                  public onComplete(): void;
                  public dispose(): void;
                  public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                  public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                  public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                  public isDisposed(): boolean;
                  public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableFlatMapCompletableCompletable<T> extends io.reactivex.rxjava3.core.Completable implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean, param3: number);
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
            }
            export module FlowableFlatMapCompletableCompletable {
              export class FlatMapCompletableMainSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module FlatMapCompletableMainSubscriber {
                export class InnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver>;
                  public onComplete(): void;
                  public dispose(): void;
                  public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                  public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                  public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                  public isDisposed(): boolean;
                  public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableFlatMapMaybe<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean, param3: number);
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableFlatMapMaybe {
              export class FlatMapMaybeSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe.FlatMapMaybeSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
              export module FlatMapMaybeSubscriber {
                export class InnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe.FlatMapMaybeSubscriber.InnerObserver>;
                  public onComplete(): void;
                  public dispose(): void;
                  public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                  public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                  public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                  public isDisposed(): boolean;
                  public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                  public onSuccess(param0: any): void;
                  public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableFlatMapMaybePublisher<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybePublisher<any, any>>;
              public constructor();
              public constructor(param0: org.reactivestreams.Publisher<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean, param3: number);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableFlatMapSingle<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean, param3: number);
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableFlatMapSingle {
              export class FlatMapSingleSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle.FlatMapSingleSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
              export module FlatMapSingleSubscriber {
                export class InnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle.FlatMapSingleSubscriber.InnerObserver>;
                  public dispose(): void;
                  public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                  public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                  public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                  public isDisposed(): boolean;
                  public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                  public onSuccess(param0: any): void;
                  public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableFlatMapSinglePublisher<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSinglePublisher<any, any>>;
              public constructor();
              public constructor(param0: org.reactivestreams.Publisher<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean, param3: number);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableFlattenIterable<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable<any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public static subscribe(param0: org.reactivestreams.Subscriber, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number): org.reactivestreams.Subscriber;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: org.reactivestreams.Subscriber<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.FlowableSubscriber<any>): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number);
            }
            export module FlowableFlattenIterable {
              export class FlattenIterableSubscriber<T, R> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable.FlattenIterableSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public clear(): void;
                public requestFusion(param0: number): number;
                public cancel(): void;
                public isEmpty(): boolean;
                public onComplete(): void;
                public request(param0: number): void;
                public poll(): any;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableFromAction<T> extends io.reactivex.rxjava3.core.Flowable<any> implements io.reactivex.rxjava3.functions.Supplier<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromAction<any>>;
              public constructor();
              public get(): any;
              public constructor(param0: io.reactivex.rxjava3.functions.Action);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableFromArray<T> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray<any>>;
              public constructor();
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: androidNative.Array<any>);
            }
            export module FlowableFromArray {
              export class ArrayConditionalSubscription<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.BaseArraySubscription<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArrayConditionalSubscription<any>>;
              }
              export class ArraySubscription<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.BaseArraySubscription<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription<any>>;
              }
              export abstract class BaseArraySubscription<T> extends io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.BaseArraySubscription<any>>;
                public requestFusion(param0: number): number;
                public clear(): void;
                public cancel(): void;
                public isEmpty(): boolean;
                public request(param0: number): void;
                public poll(): any;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableFromCallable<T> extends io.reactivex.rxjava3.core.Flowable<any> implements io.reactivex.rxjava3.functions.Supplier<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCallable<any>>;
              public constructor();
              public get(): any;
              public constructor(param0: java.util.concurrent.Callable<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableFromCompletable<T> extends io.reactivex.rxjava3.core.Flowable<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamCompletableSource {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource);
              public source(): io.reactivex.rxjava3.core.CompletableSource;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableFromCompletable {
              export class FromCompletableObserver<T> extends io.reactivex.rxjava3.internal.fuseable.AbstractEmptyQueueFuseable<any> implements io.reactivex.rxjava3.core.CompletableObserver {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public constructor();
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public constructor(param0: org.reactivestreams.Subscriber<any>);
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableFromFuture<T> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromFuture<any>>;
              public constructor();
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: java.util.concurrent.Future<any>, param1: number, param2: java.util.concurrent.TimeUnit);
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableFromIterable<T> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public static subscribe(param0: org.reactivestreams.Subscriber, param1: java.util.Iterator<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: java.lang.Iterable<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: org.reactivestreams.Subscriber<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.FlowableSubscriber<any>): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module FlowableFromIterable {
              export abstract class BaseRangeSubscription<T> extends io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription<any>>;
                public requestFusion(param0: number): number;
                public clear(): void;
                public cancel(): void;
                public isEmpty(): boolean;
                public request(param0: number): void;
                public poll(): any;
              }
              export class IteratorConditionalSubscription<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription<any>>;
              }
              export class IteratorSubscription<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription<any>>;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableFromObservable<T> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromObservable<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableFromObservable {
              export class SubscriberObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromObservable.SubscriberObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableFromPublisher<T> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromPublisher<any>>;
              public constructor();
              public constructor(param0: org.reactivestreams.Publisher<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableFromRunnable<T> extends io.reactivex.rxjava3.core.Flowable<any> implements io.reactivex.rxjava3.functions.Supplier<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnable<any>>;
              public constructor();
              public get(): any;
              public constructor(param0: java.lang.Runnable);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableFromSupplier<T> extends io.reactivex.rxjava3.core.Flowable<any> implements io.reactivex.rxjava3.functions.Supplier<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplier<any>>;
              public constructor();
              public get(): any;
              public constructor(param0: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableGenerate<T, S> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, io.reactivex.rxjava3.core.Emitter<any>, any>, param2: io.reactivex.rxjava3.functions.Consumer<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableGenerate {
              export class GeneratorSubscription<T, S> extends java.util.concurrent.atomic.AtomicLong {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate.GeneratorSubscription<any, any>>;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableGroupBy<T, K, V> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, io.reactivex.rxjava3.flowables.GroupedFlowable<any, any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy<any, any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Function<any, any>, param3: number, param4: boolean, param5: io.reactivex.rxjava3.functions.Function<any, any>);
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableGroupBy {
              export class EvictionAction<K, V> extends io.reactivex.rxjava3.functions.Consumer<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.GroupedUnicast<any, any>> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.EvictionAction<any, any>>;
                public accept(param0: any): void;
                public accept(param0: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.GroupedUnicast<any, any>): void;
              }
              export class GroupBySubscriber<T, K, V> extends java.util.concurrent.atomic.AtomicLong {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.GroupBySubscriber<any, any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public constructor(param0: org.reactivestreams.Subscriber<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Function<any, any>, param3: number, param4: boolean, param5: java.util.Map<any, io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.GroupedUnicast<any, any>>, param6: java.util.Queue<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.GroupedUnicast<any, any>>);
                public onComplete(): void;
                public request(param0: number): void;
                public cancel(param0: any): void;
                public onNext(param0: any): void;
              }
              export class GroupedUnicast<K, T> extends io.reactivex.rxjava3.flowables.GroupedFlowable<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.GroupedUnicast<any, any>>;
                public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
                public onError(param0: java.lang.Throwable): void;
                public constructor(param0: any);
                public constructor(param0: any, param1: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.State<any, any>);
                public static createWith(param0: any, param1: number, param2: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.GroupBySubscriber<any, any, any>, param3: boolean): io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.GroupedUnicast<any, any>;
                public onComplete(): void;
                public constructor();
                public onNext(param0: any): void;
              }
              export class State<T, K> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> implements org.reactivestreams.Publisher<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.State<any, any>>;
                public subscribe(param0: org.reactivestreams.Subscriber<any>): void;
                public onError(param0: java.lang.Throwable): void;
                public requestFusion(param0: number): number;
                public clear(): void;
                public cancel(): void;
                public isEmpty(): boolean;
                public onComplete(): void;
                public request(param0: number): void;
                public poll(): any;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableGroupJoin<TLeft, TRight, TLeftEnd, TRightEnd, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin<any, any, any, any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: org.reactivestreams.Publisher<any>, param2: io.reactivex.rxjava3.functions.Function<any, any>, param3: io.reactivex.rxjava3.functions.Function<any, any>, param4: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableGroupJoin {
              export class GroupJoinSubscription<TLeft, TRight, TLeftEnd, TRightEnd, R> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.GroupJoinSubscription<any, any, any, any, any>>;
                public innerComplete(param0: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightSubscriber): void;
                public innerValue(param0: boolean, param1: any): void;
                public innerError(param0: java.lang.Throwable): void;
                public innerCloseError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public innerClose(param0: boolean, param1: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber): void;
                public request(param0: number): void;
              }
              export class JoinSupport {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.JoinSupport>;
                /**
                 * Constructs a new instance of the io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$JoinSupport interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                 */
                public constructor(implementation: { innerError(param0: java.lang.Throwable): void; innerComplete(param0: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightSubscriber): void; innerValue(param0: boolean, param1: any): void; innerClose(param0: boolean, param1: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber): void; innerCloseError(param0: java.lang.Throwable): void });
                public constructor();
                public innerComplete(param0: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightSubscriber): void;
                public innerValue(param0: boolean, param1: any): void;
                public innerError(param0: java.lang.Throwable): void;
                public innerCloseError(param0: java.lang.Throwable): void;
                public innerClose(param0: boolean, param1: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber): void;
              }
              export class LeftRightEndSubscriber extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber>;
                public dispose(): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class LeftRightSubscriber extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightSubscriber>;
                public dispose(): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableHide<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableHide<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>);
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableHide {
              export class HideSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableHide.HideSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableIgnoreElements<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>);
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableIgnoreElements {
              export class IgnoreElementsSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public offer(param0: T): boolean;
                public clear(): void;
                public requestFusion(param0: number): number;
                public poll(): T;
                public cancel(): void;
                public isEmpty(): boolean;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
                public offer(param0: T, param1: T): boolean;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableIgnoreElementsCompletable<T> extends io.reactivex.rxjava3.core.Completable implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
            }
            export module FlowableIgnoreElementsCompletable {
              export class IgnoreElementsSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable.IgnoreElementsSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableInternalHelper {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper>;
              public static replaySupplier(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: boolean): io.reactivex.rxjava3.functions.Supplier<any>;
              public static subscriberOnNext(param0: org.reactivestreams.Subscriber): io.reactivex.rxjava3.functions.Consumer<any>;
              public static subscriberOnComplete(param0: org.reactivestreams.Subscriber): io.reactivex.rxjava3.functions.Action;
              public static simpleBiGenerator(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.functions.BiFunction<any, any, any>;
              public static itemDelay(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
              public static replaySupplier(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number, param2: boolean): io.reactivex.rxjava3.functions.Supplier<any>;
              public static simpleGenerator(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.functions.BiFunction<any, any, any>;
              public static flatMapWithCombiner(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
              public static replaySupplier(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number, param2: number, param3: java.util.concurrent.TimeUnit, param4: io.reactivex.rxjava3.core.Scheduler, param5: boolean): io.reactivex.rxjava3.functions.Supplier<any>;
              public static replaySupplier(param0: io.reactivex.rxjava3.core.Flowable<any>): io.reactivex.rxjava3.functions.Supplier<any>;
              public static subscriberOnError(param0: org.reactivestreams.Subscriber): io.reactivex.rxjava3.functions.Consumer<any>;
              public static flatMapIntoIterable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
            }
            export module FlowableInternalHelper {
              export class BufferedReplaySupplier<T> extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.flowables.ConnectableFlowable<any>> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier<any>>;
                public get(): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
                public get(): any;
              }
              export class BufferedTimedReplay<T> extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.flowables.ConnectableFlowable<any>> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedTimedReplay<any>>;
                public get(): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
                public get(): any;
              }
              export class FlatMapIntoIterable<T, U> extends io.reactivex.rxjava3.functions.Function<any, org.reactivestreams.Publisher<any>> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapIntoIterable<any, any>>;
                public apply(param0: any): org.reactivestreams.Publisher<any>;
                public apply(param0: any): any;
              }
              export class FlatMapWithCombinerInner<U, R, T> extends io.reactivex.rxjava3.functions.Function<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner<any, any, any>>;
                public apply(param0: any): any;
              }
              export class FlatMapWithCombinerOuter<T, R, U> extends io.reactivex.rxjava3.functions.Function<any, org.reactivestreams.Publisher<any>> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerOuter<any, any, any>>;
                public apply(param0: any): org.reactivestreams.Publisher<any>;
                public apply(param0: any): any;
              }
              export class ItemDelayFunction<T, U> extends io.reactivex.rxjava3.functions.Function<any, org.reactivestreams.Publisher<any>> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.ItemDelayFunction<any, any>>;
                public apply(param0: any): org.reactivestreams.Publisher<any>;
                public apply(param0: any): any;
              }
              export class ReplaySupplier<T> extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.flowables.ConnectableFlowable<any>> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.ReplaySupplier<any>>;
                public get(): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
                public get(): any;
              }
              export class RequestMax extends io.reactivex.rxjava3.functions.Consumer<org.reactivestreams.Subscription> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.RequestMax>;
                public static INSTANCE: io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.RequestMax;
                public accept(param0: org.reactivestreams.Subscription): void;
                public accept(param0: any): void;
                public static valueOf(param0: string): io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.RequestMax;
                public static values(): androidNative.Array<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.RequestMax>;
              }
              export class SimpleBiGenerator<T, S> extends io.reactivex.rxjava3.functions.BiFunction<any, io.reactivex.rxjava3.core.Emitter<any>, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator<any, any>>;
                public apply(param0: any, param1: io.reactivex.rxjava3.core.Emitter<any>): any;
                public apply(param0: any, param1: any): any;
              }
              export class SimpleGenerator<T, S> extends io.reactivex.rxjava3.functions.BiFunction<any, io.reactivex.rxjava3.core.Emitter<any>, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleGenerator<any, any>>;
                public apply(param0: any, param1: io.reactivex.rxjava3.core.Emitter<any>): any;
                public apply(param0: any, param1: any): any;
              }
              export class SubscriberOnComplete<T> extends io.reactivex.rxjava3.functions.Action {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnComplete<any>>;
                public run(): void;
              }
              export class SubscriberOnError<T> extends io.reactivex.rxjava3.functions.Consumer<java.lang.Throwable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnError<any>>;
                public accept(param0: any): void;
                public accept(param0: java.lang.Throwable): void;
              }
              export class SubscriberOnNext<T> extends io.reactivex.rxjava3.functions.Consumer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnNext<any>>;
                public accept(param0: any): void;
              }
              export class TimedReplay<T> extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.flowables.ConnectableFlowable<any>> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.TimedReplay<any>>;
                public get(): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
                public get(): any;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableInterval extends io.reactivex.rxjava3.core.Flowable<java.lang.Long> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval>;
              public constructor();
              public constructor(param0: number, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableInterval {
              export class IntervalSubscriber {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber>;
                public cancel(): void;
                public setResource(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public run(): void;
                public request(param0: number): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableIntervalRange extends io.reactivex.rxjava3.core.Flowable<java.lang.Long> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange>;
              public constructor();
              public constructor(param0: number, param1: number, param2: number, param3: number, param4: java.util.concurrent.TimeUnit, param5: io.reactivex.rxjava3.core.Scheduler);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableIntervalRange {
              export class IntervalRangeSubscriber {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber>;
                public cancel(): void;
                public setResource(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public run(): void;
                public request(param0: number): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableJoin<TLeft, TRight, TLeftEnd, TRightEnd, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin<any, any, any, any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: org.reactivestreams.Publisher<any>, param2: io.reactivex.rxjava3.functions.Function<any, any>, param3: io.reactivex.rxjava3.functions.Function<any, any>, param4: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableJoin {
              export class JoinSubscription<TLeft, TRight, TLeftEnd, TRightEnd, R> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin.JoinSubscription<any, any, any, any, any>>;
                public innerComplete(param0: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightSubscriber): void;
                public innerValue(param0: boolean, param1: any): void;
                public innerError(param0: java.lang.Throwable): void;
                public innerCloseError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public innerClose(param0: boolean, param1: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber): void;
                public request(param0: number): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableJust<T> extends io.reactivex.rxjava3.core.Flowable<any> implements io.reactivex.rxjava3.internal.fuseable.ScalarSupplier<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableJust<any>>;
              public constructor();
              public get(): any;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: any);
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableLastMaybe<T> extends io.reactivex.rxjava3.core.Maybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public constructor(param0: org.reactivestreams.Publisher<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module FlowableLastMaybe {
              export class LastSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe.LastSubscriber<any>>;
                public dispose(): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableLastSingle<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle<any>>;
              public constructor();
              public constructor(param0: org.reactivestreams.Publisher<any>, param1: any);
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module FlowableLastSingle {
              export class LastSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber<any>>;
                public dispose(): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableLift<R, T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableLift<any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.core.FlowableOperator<any, any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableMap<T, U> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMap<any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableMap {
              export class MapConditionalSubscriber<T, U> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMap.MapConditionalSubscriber<any, any>>;
                public requestFusion(param0: number): number;
                public poll(): any;
                public onNext(param0: any): void;
                public tryOnNext(param0: any): boolean;
              }
              export class MapSubscriber<T, U> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMap.MapSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public requestFusion(param0: number): number;
                public poll(): any;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableMapNotification<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotification<any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Function<any, any>, param3: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableMapNotification {
              export class MapNotificationSubscriber<T, R> extends io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotification.MapNotificationSubscriber<any, any>>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableMapPublisher<T, U> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMapPublisher<any, any>>;
              public constructor();
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: org.reactivestreams.Publisher<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableMaterialize<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, io.reactivex.rxjava3.core.Notification<any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterialize<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>);
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableMaterialize {
              export class MaterializeSubscriber<T> extends io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber<any, io.reactivex.rxjava3.core.Notification<any>> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterialize.MaterializeSubscriber<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onDrop(param0: io.reactivex.rxjava3.core.Notification<any>): void;
                public onComplete(): void;
                public onDrop(param0: any): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableMergeWithCompletable<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.core.CompletableSource);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableMergeWithCompletable {
              export class MergeWithSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
              export module MergeWithSubscriber {
                export class OtherObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.CompletableObserver {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver>;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableMergeWithMaybe<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>);
            }
            export module FlowableMergeWithMaybe {
              export class MergeWithObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe.MergeWithObserver<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
              export module MergeWithObserver {
                export class OtherObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe.MergeWithObserver.OtherObserver<any>>;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public onSuccess(param0: any): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableMergeWithSingle<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableMergeWithSingle {
              export class MergeWithObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle.MergeWithObserver<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
              export module MergeWithObserver {
                export class OtherObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle.MergeWithObserver.OtherObserver<any>>;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public onSuccess(param0: any): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableNever extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableNever>;
              public static INSTANCE: io.reactivex.rxjava3.core.Flowable<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableObserveOn<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.core.Scheduler, param2: boolean, param3: number);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableObserveOn {
              export abstract class BaseObserveOnSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.BaseObserveOnSubscriber<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public requestFusion(param0: number): number;
                public clear(): void;
                public cancel(): void;
                public isEmpty(): boolean;
                public onComplete(): void;
                public run(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
              export class ObserveOnConditionalSubscriber<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.BaseObserveOnSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.ObserveOnConditionalSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public poll(): any;
              }
              export class ObserveOnSubscriber<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.BaseObserveOnSubscriber<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.ObserveOnSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public poll(): any;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableOnBackpressureBuffer<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number, param2: boolean, param3: boolean, param4: io.reactivex.rxjava3.functions.Action);
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableOnBackpressureBuffer {
              export class BackpressureBufferSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer.BackpressureBufferSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public requestFusion(param0: number): number;
                public clear(): void;
                public cancel(): void;
                public isEmpty(): boolean;
                public onComplete(): void;
                public request(param0: number): void;
                public poll(): any;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableOnBackpressureBufferStrategy<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number, param2: io.reactivex.rxjava3.functions.Action, param3: io.reactivex.rxjava3.core.BackpressureOverflowStrategy);
            }
            export module FlowableOnBackpressureBufferStrategy {
              export class OnBackpressureBufferStrategySubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy.OnBackpressureBufferStrategySubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableOnBackpressureDrop<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> implements io.reactivex.rxjava3.functions.Consumer<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>);
              public source(): org.reactivestreams.Publisher<any>;
              public accept(param0: any): void;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>);
            }
            export module FlowableOnBackpressureDrop {
              export class BackpressureDropSubscriber<T> extends java.util.concurrent.atomic.AtomicLong {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableOnBackpressureError<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureError<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>);
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableOnBackpressureError {
              export class BackpressureErrorSubscriber<T> extends java.util.concurrent.atomic.AtomicLong {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureError.BackpressureErrorSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableOnBackpressureLatest<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>);
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableOnBackpressureLatest {
              export class BackpressureLatestSubscriber<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractBackpressureThrottlingSubscriber<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest.BackpressureLatestSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableOnBackpressureReduce<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
            }
            export module FlowableOnBackpressureReduce {
              export class BackpressureReduceSubscriber<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractBackpressureThrottlingSubscriber<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableOnBackpressureReduceWith<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduceWith<any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Supplier<any>, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
            }
            export module FlowableOnBackpressureReduceWith {
              export class BackpressureReduceWithSubscriber<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractBackpressureThrottlingSubscriber<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduceWith.BackpressureReduceWithSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableOnErrorComplete<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorComplete<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableOnErrorComplete {
              export class OnErrorCompleteSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorComplete.OnErrorCompleteSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public constructor(param0: org.reactivestreams.Subscriber<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableOnErrorNext<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableOnErrorNext {
              export class OnErrorNextSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext.OnErrorNextSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableOnErrorReturn<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableOnErrorReturn {
              export class OnErrorReturnSubscriber<T> extends io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn.OnErrorReturnSubscriber<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowablePublish<T> extends io.reactivex.rxjava3.flowables.ConnectableFlowable<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamPublisher<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: org.reactivestreams.Publisher<any>, param1: number);
              public connect(param0: io.reactivex.rxjava3.functions.Consumer<any>): void;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public connect(): io.reactivex.rxjava3.disposables.Disposable;
              public reset(): void;
            }
            export module FlowablePublish {
              export class InnerSubscription<T> extends java.util.concurrent.atomic.AtomicLong implements org.reactivestreams.Subscription {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.InnerSubscription<any>>;
                public cancel(): void;
                public isCancelled(): boolean;
                public request(param0: number): void;
              }
              export class PublishConnection<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.PublishConnection<any>>;
                public dispose(): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowablePublishMulticast<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast<any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number, param3: boolean);
            }
            export module FlowablePublishMulticast {
              export class MulticastProcessor<T> extends io.reactivex.rxjava3.core.Flowable<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
              export class MulticastSubscription<T> extends java.util.concurrent.atomic.AtomicLong implements org.reactivestreams.Subscription {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription<any>>;
                public cancel(): void;
                public isCancelled(): boolean;
                public request(param0: number): void;
              }
              export class OutputCanceller<R> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.OutputCanceller<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: R): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableRange extends io.reactivex.rxjava3.core.Flowable<java.lang.Integer> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRange>;
              public constructor();
              public constructor(param0: number, param1: number);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableRange {
              export abstract class BaseRangeSubscription extends io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription<java.lang.Integer> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.BaseRangeSubscription>;
                public requestFusion(param0: number): number;
                public clear(): void;
                public cancel(): void;
                public poll(): java.lang.Integer;
                public isEmpty(): boolean;
                public request(param0: number): void;
              }
              export class RangeConditionalSubscription extends io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.BaseRangeSubscription {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription>;
              }
              export class RangeSubscription extends io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.BaseRangeSubscription {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeSubscription>;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableRangeLong extends io.reactivex.rxjava3.core.Flowable<java.lang.Long> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong>;
              public constructor();
              public constructor(param0: number, param1: number);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableRangeLong {
              export abstract class BaseRangeSubscription extends io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription<java.lang.Long> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong.BaseRangeSubscription>;
                public requestFusion(param0: number): number;
                public clear(): void;
                public cancel(): void;
                public isEmpty(): boolean;
                public poll(): java.lang.Long;
                public request(param0: number): void;
              }
              export class RangeConditionalSubscription extends io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong.BaseRangeSubscription {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong.RangeConditionalSubscription>;
              }
              export class RangeSubscription extends io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong.BaseRangeSubscription {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong.RangeSubscription>;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableReduce<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
            }
            export module FlowableReduce {
              export class ReduceSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce.ReduceSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableReduceMaybe<T> extends io.reactivex.rxjava3.core.Maybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
              public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
            }
            export module FlowableReduceMaybe {
              export class ReduceSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe.ReduceSubscriber<any>>;
                public dispose(): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableReduceSeedSingle<T, R> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceSeedSingle<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: org.reactivestreams.Publisher<any>, param1: any, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module FlowableReduceSeedSingle {
              export class ReduceSeedObserver<T, R> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceSeedSingle.ReduceSeedObserver<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableReduceWithSingle<T, R> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceWithSingle<any, any>>;
              public constructor();
              public constructor(param0: org.reactivestreams.Publisher<any>, param1: io.reactivex.rxjava3.functions.Supplier<any>, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableRefCount<T> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.flowables.ConnectableFlowable<any>);
              public constructor(param0: io.reactivex.rxjava3.flowables.ConnectableFlowable<any>, param1: number, param2: number, param3: java.util.concurrent.TimeUnit, param4: io.reactivex.rxjava3.core.Scheduler);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableRefCount {
              export class RefConnection extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.RefConnection>;
                public accept(param0: any): void;
                public accept(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public run(): void;
              }
              export class RefCountSubscriber<T> extends java.util.concurrent.atomic.AtomicBoolean {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.RefCountSubscriber<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableRepeat<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number);
            }
            export module FlowableRepeat {
              export class RepeatSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat.RepeatSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableRepeatUntil<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.BooleanSupplier);
            }
            export module FlowableRepeatUntil {
              export class RepeatSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableRepeatWhen<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableRepeatWhen {
              export class RepeatWhenSubscriber<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen.WhenSourceSubscriber<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen.RepeatWhenSubscriber<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onComplete(): void;
              }
              export class WhenReceiver<T, U> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen.WhenReceiver<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
              export abstract class WhenSourceSubscriber<T, U> extends io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen.WhenSourceSubscriber<any, any>>;
                public downstream: org.reactivestreams.Subscriber<any>;
                public processor: io.reactivex.rxjava3.processors.FlowableProcessor<any>;
                public receiver: org.reactivestreams.Subscription;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public again(param0: any): void;
                public cancel(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableReplay<T> extends io.reactivex.rxjava3.flowables.ConnectableFlowable<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamPublisher<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay<any>>;
              public static multicastSelector(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
              public source(): org.reactivestreams.Publisher<any>;
              public static create(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number, param2: boolean): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
              public static createFrom(param0: io.reactivex.rxjava3.core.Flowable<any>): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
              public static create(param0: io.reactivex.rxjava3.core.FlowableOnSubscribe<any>, param1: io.reactivex.rxjava3.core.BackpressureStrategy): io.reactivex.rxjava3.core.Flowable<any>;
              public static create(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: number, param5: boolean): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public connect(param0: io.reactivex.rxjava3.functions.Consumer<any>): void;
              public connect(): io.reactivex.rxjava3.disposables.Disposable;
              public static create(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: boolean): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
              public reset(): void;
            }
            export module FlowableReplay {
              export abstract class BoundedReplayBuffer<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.Node> implements io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayBuffer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.BoundedReplayBuffer<any>>;
                public next(param0: any): void;
                public error(param0: java.lang.Throwable): void;
                public complete(): void;
                public replay(param0: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.InnerSubscription<any>): void;
              }
              export class DefaultUnboundedFactory extends io.reactivex.rxjava3.functions.Supplier<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.DefaultUnboundedFactory>;
                public get(): any;
              }
              export class InnerSubscription<T> extends java.util.concurrent.atomic.AtomicLong {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.InnerSubscription<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public cancel(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public produced(param0: number): number;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public request(param0: number): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export class MulticastFlowable<R, U> extends io.reactivex.rxjava3.core.Flowable<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.MulticastFlowable<any, any>>;
                public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              }
              export module MulticastFlowable {
                export class DisposableConsumer extends io.reactivex.rxjava3.functions.Consumer<io.reactivex.rxjava3.disposables.Disposable> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.MulticastFlowable.DisposableConsumer>;
                  public accept(param0: any): void;
                  public accept(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                }
              }
              export class Node extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.Node> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.Node>;
              }
              export class ReplayBuffer<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayBuffer<any>>;
                /**
                 * Constructs a new instance of the io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$ReplayBuffer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                 */
                public constructor(implementation: { next(param0: T): void; error(param0: java.lang.Throwable): void; complete(): void; replay(param0: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.InnerSubscription<T>): void });
                public constructor();
                public error(param0: java.lang.Throwable): void;
                public complete(): void;
                public replay(param0: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.InnerSubscription<T>): void;
                public next(param0: T): void;
              }
              export class ReplayBufferSupplier<T> extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayBuffer<any>> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayBufferSupplier<any>>;
                public get(): io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayBuffer<any>;
                public get(): any;
              }
              export class ReplayPublisher<T> extends org.reactivestreams.Publisher<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher<any>>;
                public subscribe(param0: org.reactivestreams.Subscriber<any>): void;
              }
              export class ReplaySubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplaySubscriber<any>>;
                public dispose(): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class ScheduledReplayBufferSupplier<T> extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayBuffer<any>> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ScheduledReplayBufferSupplier<any>>;
                public get(): io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayBuffer<any>;
                public get(): any;
              }
              export class SizeAndTimeBoundReplayBuffer<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.BoundedReplayBuffer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeAndTimeBoundReplayBuffer<any>>;
                public next(param0: any): void;
                public error(param0: java.lang.Throwable): void;
                public complete(): void;
                public replay(param0: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.InnerSubscription<any>): void;
              }
              export class SizeBoundReplayBuffer<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.BoundedReplayBuffer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer<any>>;
                public next(param0: any): void;
                public error(param0: java.lang.Throwable): void;
                public complete(): void;
                public replay(param0: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.InnerSubscription<any>): void;
              }
              export class UnboundedReplayBuffer<T> extends java.util.ArrayList<any> implements io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayBuffer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer<any>>;
                public next(param0: any): void;
                public error(param0: java.lang.Throwable): void;
                public complete(): void;
                public replay(param0: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.InnerSubscription<any>): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableRetryBiPredicate<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.BiPredicate<any, any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableRetryBiPredicate {
              export class RetryBiSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate.RetryBiSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableRetryPredicate<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number, param2: io.reactivex.rxjava3.functions.Predicate<any>);
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableRetryPredicate {
              export class RetrySubscriber<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate.RetrySubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableRetryWhen<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableRetryWhen {
              export class RetryWhenSubscriber<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen.WhenSourceSubscriber<any, java.lang.Throwable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onComplete(): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableSamplePublisher<T> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher<any>>;
              public constructor();
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: org.reactivestreams.Publisher<any>, param1: org.reactivestreams.Publisher<any>, param2: boolean);
            }
            export module FlowableSamplePublisher {
              export class SampleMainEmitLast<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SampleMainEmitLast<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
              }
              export class SampleMainNoLast<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SampleMainNoLast<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
              }
              export abstract class SamplePublisherSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public error(param0: java.lang.Throwable): void;
                public complete(): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
              export class SamplerSubscriber<T> extends io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplerSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableSampleTimed<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: boolean);
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableSampleTimed {
              export class SampleTimedEmitLast<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed.SampleTimedSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed.SampleTimedEmitLast<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public run(): void;
              }
              export class SampleTimedNoLast<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed.SampleTimedSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed.SampleTimedNoLast<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public run(): void;
              }
              export abstract class SampleTimedSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed.SampleTimedSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableScalarXMap {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMap>;
              public static scalarXMap(param0: any, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
              public static tryScalarXMapSubscribe(param0: org.reactivestreams.Publisher, param1: org.reactivestreams.Subscriber, param2: io.reactivex.rxjava3.functions.Function<any, any>): boolean;
            }
            export module FlowableScalarXMap {
              export class ScalarXMapFlowable<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMap.ScalarXMapFlowable<any, any>>;
                public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableScan<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableScan<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
            }
            export module FlowableScan {
              export class ScanSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableScan.ScanSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableScanSeed<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed<any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Supplier<any>, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
            }
            export module FlowableScanSeed {
              export class ScanSeedSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableSequenceEqual<T> extends io.reactivex.rxjava3.core.Flowable<java.lang.Boolean> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual<any>>;
              public constructor();
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: org.reactivestreams.Publisher<any>, param1: org.reactivestreams.Publisher<any>, param2: io.reactivex.rxjava3.functions.BiPredicate<any, any>, param3: number);
            }
            export module FlowableSequenceEqual {
              export class EqualCoordinator<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<java.lang.Boolean> implements io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual.EqualCoordinatorHelper {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual.EqualCoordinator<any>>;
                public innerError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public drain(): void;
              }
              export class EqualCoordinatorHelper {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual.EqualCoordinatorHelper>;
                /**
                 * Constructs a new instance of the io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinatorHelper interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                 */
                public constructor(implementation: { drain(): void; innerError(param0: java.lang.Throwable): void });
                public constructor();
                public innerError(param0: java.lang.Throwable): void;
                public drain(): void;
              }
              export class EqualSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual.EqualSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableSequenceEqualSingle<T> extends io.reactivex.rxjava3.core.Single<java.lang.Boolean> implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<java.lang.Boolean> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: org.reactivestreams.Publisher<any>, param1: org.reactivestreams.Publisher<any>, param2: io.reactivex.rxjava3.functions.BiPredicate<any, any>, param3: number);
              public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
              public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<java.lang.Boolean>;
            }
            export module FlowableSequenceEqualSingle {
              export class EqualCoordinator<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle.EqualCoordinator<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public innerError(param0: java.lang.Throwable): void;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public drain(): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableSerialized<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSerialized<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>);
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableSingle<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: any, param2: boolean);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableSingle {
              export class SingleElementSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableSingleMaybe<T> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
            }
            export module FlowableSingleMaybe {
              export class SingleElementSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableSingleSingle<T> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: any);
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
            }
            export module FlowableSingleSingle {
              export class SingleElementSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle.SingleElementSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableSkip<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number);
            }
            export module FlowableSkip {
              export class SkipSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip.SkipSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableSkipLast<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number);
            }
            export module FlowableSkipLast {
              export class SkipLastSubscriber<T> extends java.util.ArrayDeque<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast.SkipLastSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableSkipLastTimed<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimed<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: number, param5: boolean);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableSkipLastTimed {
              export class SkipLastTimedSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimed.SkipLastTimedSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableSkipUntil<T, U> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil<any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: org.reactivestreams.Publisher<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableSkipUntil {
              export class SkipUntilMainSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil.SkipUntilMainSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
                public tryOnNext(param0: any): boolean;
              }
              export module SkipUntilMainSubscriber {
                export class OtherSubscriber extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil.SkipUntilMainSubscriber.OtherSubscriber>;
                  public onNext(param0: any): void;
                  public onComplete(): void;
                  public onSubscribe(param0: org.reactivestreams.Subscription): void;
                  public onError(param0: java.lang.Throwable): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableSkipWhile<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableSkipWhile {
              export class SkipWhileSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile.SkipWhileSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableSubscribeOn<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.core.Scheduler, param2: boolean);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableSubscribeOn {
              export class SubscribeOnSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<java.lang.Thread> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn.SubscribeOnSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public run(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
              export module SubscribeOnSubscriber {
                export class Request {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn.SubscribeOnSubscriber.Request>;
                  public run(): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableSwitchIfEmpty<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: org.reactivestreams.Publisher<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableSwitchIfEmpty {
              export class SwitchIfEmptySubscriber<T> extends io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty.SwitchIfEmptySubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableSwitchMap<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap<any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number, param3: boolean);
            }
            export module FlowableSwitchMap {
              export class SwitchMapInnerSubscriber<T, R> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap.SwitchMapInnerSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
              export class SwitchMapSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap.SwitchMapSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableTake<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTake<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number);
            }
            export module FlowableTake {
              export class TakeSubscriber<T> extends java.util.concurrent.atomic.AtomicLong {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTake.TakeSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableTakeLast<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number);
            }
            export module FlowableTakeLast {
              export class TakeLastSubscriber<T> extends java.util.ArrayDeque<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast.TakeLastSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableTakeLastOne<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOne<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>);
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableTakeLastOne {
              export class TakeLastOneSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOne.TakeLastOneSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableTakeLastTimed<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number, param2: number, param3: java.util.concurrent.TimeUnit, param4: io.reactivex.rxjava3.core.Scheduler, param5: number, param6: boolean);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableTakeLastTimed {
              export class TakeLastTimedSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed.TakeLastTimedSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableTakePublisher<T> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakePublisher<any>>;
              public constructor();
              public constructor(param0: org.reactivestreams.Publisher<any>, param1: number);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableTakeUntil<T, U> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil<any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: org.reactivestreams.Publisher<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableTakeUntil {
              export class TakeUntilMainSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil.TakeUntilMainSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
              export module TakeUntilMainSubscriber {
                export class OtherSubscriber extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil.TakeUntilMainSubscriber.OtherSubscriber>;
                  public onNext(param0: any): void;
                  public onComplete(): void;
                  public onSubscribe(param0: org.reactivestreams.Subscription): void;
                  public onError(param0: java.lang.Throwable): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableTakeUntilPredicate<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableTakeUntilPredicate {
              export class InnerSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableTakeWhile<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableTakeWhile {
              export class TakeWhileSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile.TakeWhileSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableThrottleFirstTimed<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler);
            }
            export module FlowableThrottleFirstTimed {
              export class DebounceTimedSubscriber<T> extends java.util.concurrent.atomic.AtomicLong {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed.DebounceTimedSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public run(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableThrottleLatest<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: boolean);
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableThrottleLatest {
              export class ThrottleLatestSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest.ThrottleLatestSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public run(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableTimeInterval<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, io.reactivex.rxjava3.schedulers.Timed<any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeInterval<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler);
            }
            export module FlowableTimeInterval {
              export class TimeIntervalSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeInterval.TimeIntervalSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableTimeout<T, U, V> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout<any, any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: org.reactivestreams.Publisher<any>, param2: io.reactivex.rxjava3.functions.Function<any, any>, param3: org.reactivestreams.Publisher<any>);
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableTimeout {
              export class TimeoutConsumer extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout.TimeoutConsumer>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class TimeoutFallbackSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout.TimeoutFallbackSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public onTimeout(param0: number): void;
                public onTimeoutError(param0: number, param1: java.lang.Throwable): void;
                public onNext(param0: any): void;
              }
              export class TimeoutSelectorSupport extends io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutSupport {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout.TimeoutSelectorSupport>;
                /**
                 * Constructs a new instance of the io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$TimeoutSelectorSupport interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                 */
                public constructor(implementation: { onTimeoutError(param0: number, param1: java.lang.Throwable): void; onTimeout(param0: number): void });
                public constructor();
                public onTimeout(param0: number): void;
                public onTimeoutError(param0: number, param1: java.lang.Throwable): void;
              }
              export class TimeoutSubscriber<T> extends java.util.concurrent.atomic.AtomicLong {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout.TimeoutSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public onTimeout(param0: number): void;
                public onTimeoutError(param0: number, param1: java.lang.Throwable): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableTimeoutTimed<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: org.reactivestreams.Publisher<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableTimeoutTimed {
              export class FallbackSubscriber<T> extends io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
              export class TimeoutFallbackSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutFallbackSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public onTimeout(param0: number): void;
                public onNext(param0: any): void;
              }
              export class TimeoutSubscriber<T> extends java.util.concurrent.atomic.AtomicLong {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public onTimeout(param0: number): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
              export class TimeoutSupport {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutSupport>;
                /**
                 * Constructs a new instance of the io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSupport interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                 */
                public constructor(implementation: { onTimeout(param0: number): void });
                public constructor();
                public onTimeout(param0: number): void;
              }
              export class TimeoutTask {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask>;
                public run(): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableTimer extends io.reactivex.rxjava3.core.Flowable<java.lang.Long> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer>;
              public constructor();
              public constructor(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableTimer {
              export class TimerSubscriber extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer.TimerSubscriber>;
                public cancel(): void;
                public setResource(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public run(): void;
                public request(param0: number): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableToList<T, U> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableToList<any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableToList {
              export class ToListSubscriber<T, U> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableToList.ToListSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableToListSingle<T, U> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableToListSingle<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
            }
            export module FlowableToListSingle {
              export class ToListSubscriber<T, U> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableToListSingle.ToListSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableUnsubscribeOn<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.core.Scheduler);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableUnsubscribeOn {
              export class UnsubscribeSubscriber<T> extends java.util.concurrent.atomic.AtomicBoolean {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn.UnsubscribeSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
              export module UnsubscribeSubscriber {
                export class Cancellation {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn.UnsubscribeSubscriber.Cancellation>;
                  public run(): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableUsing<T, D> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Consumer<any>, param3: boolean);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableUsing {
              export class UsingSubscriber<T, D> extends java.util.concurrent.atomic.AtomicBoolean {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing.UsingSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableWindow<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, io.reactivex.rxjava3.core.Flowable<any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number, param2: number, param3: number);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableWindow {
              export class WindowExactSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.WindowExactSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public run(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
              export class WindowOverlapSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.WindowOverlapSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public run(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
              export class WindowSkipSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.WindowSkipSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public run(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableWindowBoundary<T, B> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, io.reactivex.rxjava3.core.Flowable<any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary<any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: org.reactivestreams.Publisher<any>, param2: number);
            }
            export module FlowableWindowBoundary {
              export class WindowBoundaryInnerSubscriber<T, B> extends io.reactivex.rxjava3.subscribers.DisposableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryInnerSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class WindowBoundaryMainSubscriber<T, B> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public run(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableWindowBoundarySelector<T, B, V> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, io.reactivex.rxjava3.core.Flowable<any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector<any, any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: org.reactivestreams.Publisher<any>, param2: io.reactivex.rxjava3.functions.Function<any, any>, param3: number);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableWindowBoundarySelector {
              export class WindowBoundaryMainSubscriber<T, B, V> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector.WindowBoundaryMainSubscriber<any, any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public run(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
              export module WindowBoundaryMainSubscriber {
                export class WindowEndSubscriberIntercept<T, V> extends io.reactivex.rxjava3.core.Flowable<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector.WindowBoundaryMainSubscriber.WindowEndSubscriberIntercept<any, any>>;
                  public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.core.Flowable<any>;
                  public onNext(param0: any): void;
                  public onComplete(): void;
                  public dispose(): void;
                  public onSubscribe(param0: org.reactivestreams.Subscription): void;
                  public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                  public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Flowable<any>;
                  public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.core.Flowable<any>;
                  public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                  public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
                  public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
                  public onError(param0: java.lang.Throwable): void;
                  public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                  public static empty(): io.reactivex.rxjava3.core.Flowable<any>;
                  public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                  public isDisposed(): boolean;
                  public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                }
                export class WindowStartItem<B> extends java.lang.Object {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector.WindowBoundaryMainSubscriber.WindowStartItem<any>>;
                }
                export class WindowStartSubscriber<B> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector.WindowBoundaryMainSubscriber.WindowStartSubscriber<any>>;
                  public onNext(param0: any): void;
                  public onComplete(): void;
                  public onSubscribe(param0: org.reactivestreams.Subscription): void;
                  public onError(param0: java.lang.Throwable): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableWindowSubscribeIntercept<T> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowSubscribeIntercept<any>>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableWindowTimed<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, io.reactivex.rxjava3.core.Flowable<any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed<any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: number, param2: number, param3: java.util.concurrent.TimeUnit, param4: io.reactivex.rxjava3.core.Scheduler, param5: number, param6: number, param7: boolean);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableWindowTimed {
              export abstract class AbstractWindowSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.AbstractWindowSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
              export class WindowExactBoundedSubscriber<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.AbstractWindowSubscriber<any> implements java.lang.Runnable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.WindowExactBoundedSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public run(): void;
              }
              export module WindowExactBoundedSubscriber {
                export class WindowBoundaryRunnable {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.WindowExactBoundedSubscriber.WindowBoundaryRunnable>;
                  public run(): void;
                }
              }
              export class WindowExactUnboundedSubscriber<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.AbstractWindowSubscriber<any> implements java.lang.Runnable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.WindowExactUnboundedSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public run(): void;
              }
              export module WindowExactUnboundedSubscriber {
                export class WindowRunnable {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.WindowExactUnboundedSubscriber.WindowRunnable>;
                  public run(): void;
                }
              }
              export class WindowSkipSubscriber<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.AbstractWindowSubscriber<any> implements java.lang.Runnable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.WindowSkipSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public run(): void;
              }
              export module WindowSkipSubscriber {
                export class WindowBoundaryRunnable {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.WindowSkipSubscriber.WindowBoundaryRunnable>;
                  public run(): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableWithLatestFrom<T, U, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFrom<any, any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, param2: org.reactivestreams.Publisher<any>);
              public source(): org.reactivestreams.Publisher<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableWithLatestFrom {
              export class FlowableWithLatestSubscriber extends io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFrom.FlowableWithLatestSubscriber>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
              export class WithLatestFromSubscriber<T, U, R> extends java.util.concurrent.atomic.AtomicReference<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFrom.WithLatestFromSubscriber<any, any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public setOther(param0: org.reactivestreams.Subscription): boolean;
                public otherError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
                public tryOnNext(param0: any): boolean;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableWithLatestFromMany<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: androidNative.Array<org.reactivestreams.Publisher<any>>, param2: io.reactivex.rxjava3.functions.Function<any, any>);
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: java.lang.Iterable<any>, param2: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableWithLatestFromMany {
              export class SingletonArrayFunc extends io.reactivex.rxjava3.functions.Function<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany.SingletonArrayFunc>;
                public apply(param0: any): any;
              }
              export class WithLatestFromSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany.WithLatestFromSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
                public tryOnNext(param0: any): boolean;
              }
              export class WithLatestInnerSubscriber extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany.WithLatestInnerSubscriber>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableZip<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableZip<any, any>>;
              public constructor();
              public constructor(param0: androidNative.Array<org.reactivestreams.Publisher<any>>, param1: java.lang.Iterable<any>, param2: io.reactivex.rxjava3.functions.Function<any, any>, param3: number, param4: boolean);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableZip {
              export class ZipCoordinator<T, R> extends java.util.concurrent.atomic.AtomicInteger implements org.reactivestreams.Subscription {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipCoordinator<any, any>>;
                public cancel(): void;
                public request(param0: number): void;
              }
              export class ZipSubscriber<T, R> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module flowable {
            export class FlowableZipIterable<T, U, V> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable<any, any, any>>;
              public constructor();
              public source(): org.reactivestreams.Publisher<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: java.lang.Iterable<any>, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableZipIterable {
              export class ZipIterableSubscriber<T, U, V> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable.ZipIterableSubscriber<any, any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export abstract class AbstractMaybeWithUpstream<T, R> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamMaybeSource<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any>>;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeAmb<T> extends io.reactivex.rxjava3.core.Maybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>, param1: java.lang.Iterable<any>);
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeAmb {
              export class AmbMaybeObserver<T> extends io.reactivex.rxjava3.core.MaybeObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb.AmbMaybeObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeCache<T> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeCache<any>>;
              public constructor();
              public onError(param0: java.lang.Throwable): void;
              public onComplete(): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>);
              public onSuccess(param0: any): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeCache {
              export class CacheDisposable<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.internal.operators.maybe.MaybeCache<any>> implements io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.CacheDisposable<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeCallbackObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver<any>>;
              public onComplete(): void;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action);
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public hasCustomOnError(): boolean;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
              public onError(param0: java.lang.Throwable): void;
              public onSuccess(param0: any): void;
              public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeConcatArray<T> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray<any>>;
              public constructor();
              public constructor(param0: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module MaybeConcatArray {
              export class ConcatMaybeObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray.ConcatMaybeObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeConcatArrayDelayError<T> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError<any>>;
              public constructor();
              public constructor(param0: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module MaybeConcatArrayDelayError {
              export class ConcatMaybeObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError.ConcatMaybeObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeConcatIterable<T> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable<any>>;
              public constructor();
              public constructor(param0: java.lang.Iterable<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module MaybeConcatIterable {
              export class ConcatMaybeObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable.ConcatMaybeObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeContains<T> extends io.reactivex.rxjava3.core.Single<java.lang.Boolean> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamMaybeSource<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeContains<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: any);
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeContains {
              export class ContainsMaybeObserver extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeContains.ContainsMaybeObserver>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeCount<T> extends io.reactivex.rxjava3.core.Single<java.lang.Long> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamMaybeSource<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeCount<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>);
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeCount {
              export class CountMaybeObserver extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeCount.CountMaybeObserver>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeCreate<T> extends io.reactivex.rxjava3.core.Maybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeOnSubscribe<any>);
            }
            export module MaybeCreate {
              export class Emitter<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter<any>>;
                public dispose(): void;
                public toString(): string;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                public onError(param0: java.lang.Throwable): void;
                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public tryOnError(param0: java.lang.Throwable): boolean;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeDefer<T> extends io.reactivex.rxjava3.core.Maybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDefer<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeDelay<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: boolean);
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeDelay {
              export class DelayMaybeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeDelayOtherPublisher<T, U> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: org.reactivestreams.Publisher<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeDelayOtherPublisher {
              export class DelayMaybeObserver<T, U> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export class OtherSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.OtherSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeDelaySubscriptionOtherPublisher<T, U> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: org.reactivestreams.Publisher<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeDelaySubscriptionOtherPublisher {
              export class DelayMaybeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher.DelayMaybeObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
              export class OtherSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher.OtherSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeDelayWithCompletable<T> extends io.reactivex.rxjava3.core.Maybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.CompletableSource);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeDelayWithCompletable {
              export class DelayWithMainObserver<T> extends io.reactivex.rxjava3.core.MaybeObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable.DelayWithMainObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
              export class OtherObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable.OtherObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeDematerialize<T, R> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerialize<any, any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Maybe<any>, param1: io.reactivex.rxjava3.functions.Function<any, io.reactivex.rxjava3.core.Notification<any>>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeDematerialize {
              export class DematerializeObserver<T, R> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerialize.DematerializeObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeDetach<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeDetach {
              export class DetachMaybeObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeDoAfterSuccess<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeDoAfterSuccess {
              export class DoAfterObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess.DoAfterObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeDoFinally<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinally<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.functions.Action);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeDoFinally {
              export class DoFinallyObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinally.DoFinallyObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeDoOnEvent<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEvent<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.functions.BiConsumer<any, any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeDoOnEvent {
              export class DoOnEventMaybeObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEvent.DoOnEventMaybeObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeDoOnLifecycle<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnLifecycle<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Maybe<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action);
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeDoOnLifecycle {
              export class MaybeLifecycleObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnLifecycle.MaybeLifecycleObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeDoOnTerminate<T> extends io.reactivex.rxjava3.core.Maybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.functions.Action);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeDoOnTerminate {
              export class DoOnTerminate extends io.reactivex.rxjava3.core.MaybeObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeEmpty extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.internal.fuseable.ScalarSupplier<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty>;
              public static INSTANCE: io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty;
              public constructor();
              public get(): any;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeEqualSingle<T> extends io.reactivex.rxjava3.core.Single<java.lang.Boolean> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>, param2: io.reactivex.rxjava3.functions.BiPredicate<any, any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeEqualSingle {
              export class EqualCoordinator<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle.EqualCoordinator<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              }
              export class EqualObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle.EqualObserver<any>>;
                public dispose(): void;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeError<T> extends io.reactivex.rxjava3.core.Maybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeError<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: java.lang.Throwable);
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeErrorCallable<T> extends io.reactivex.rxjava3.core.Maybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeErrorCallable<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeFilter<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeFilter {
              export class FilterMaybeObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter.FilterMaybeObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeFilterSingle<T> extends io.reactivex.rxjava3.core.Maybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
            }
            export module MaybeFilterSingle {
              export class FilterMaybeObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle.FilterMaybeObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeFlatMapBiSelector<T, U, R> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelector<any, any, any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeFlatMapBiSelector {
              export class FlatMapBiMainObserver<T, U, R> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelector.FlatMapBiMainObserver<any, any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export module FlatMapBiMainObserver {
                export class InnerObserver<T, U, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelector.FlatMapBiMainObserver.InnerObserver<any, any, any>>;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public onSuccess(param0: any): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeFlatMapCompletable<T> extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeFlatMapCompletable {
              export class FlatMapCompletableObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable.FlatMapCompletableObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeFlatMapIterableFlowable<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable<any, any>>;
              public constructor();
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
            }
            export module MaybeFlatMapIterableFlowable {
              export class FlatMapIterableObserver<T, R> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable.FlatMapIterableObserver<any, any>>;
                public onError(param0: java.lang.Throwable): void;
                public requestFusion(param0: number): number;
                public clear(): void;
                public cancel(): void;
                public isEmpty(): boolean;
                public onComplete(): void;
                public request(param0: number): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public poll(): any;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeFlatMapIterableObservable<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeFlatMapIterableObservable {
              export class FlatMapIterableObserver<T, R> extends io.reactivex.rxjava3.internal.observers.BasicQueueDisposable<any> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver<any, any>>;
                public onError(param0: java.lang.Throwable): void;
                public dispose(): void;
                public requestFusion(param0: number): number;
                public clear(): void;
                public isDisposed(): boolean;
                public isEmpty(): boolean;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public poll(): any;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeFlatMapNotification<T, R> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification<any, any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Function<any, any>, param3: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeFlatMapNotification {
              export class FlatMapMaybeObserver<T, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export module FlatMapMaybeObserver {
                export class InnerObserver extends io.reactivex.rxjava3.core.MaybeObserver<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver>;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public onSuccess(param0: any): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeFlatMapSingle<T, R> extends io.reactivex.rxjava3.core.Maybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle<any, any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeFlatMapSingle {
              export class FlatMapMaybeObserver<T, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle.FlatMapMaybeObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export class FlatMapSingleObserver<R> extends io.reactivex.rxjava3.core.SingleObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle.FlatMapSingleObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeFlatten<T, R> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten<any, any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeFlatten {
              export class FlatMapMaybeObserver<T, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export module FlatMapMaybeObserver {
                export class InnerObserver extends io.reactivex.rxjava3.core.MaybeObserver<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver>;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public onSuccess(param0: any): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeFromAction<T> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.functions.Supplier<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFromAction<any>>;
              public constructor();
              public get(): any;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.functions.Action);
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeFromCallable<T> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.functions.Supplier<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallable<any>>;
              public constructor();
              public get(): any;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: java.util.concurrent.Callable<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeFromCompletable<T> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamCompletableSource {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource);
              public source(): io.reactivex.rxjava3.core.CompletableSource;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeFromCompletable {
              export class FromCompletableObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable.FromCompletableObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeFromFuture<T> extends io.reactivex.rxjava3.core.Maybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFuture<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: java.util.concurrent.Future<any>, param1: number, param2: java.util.concurrent.TimeUnit);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeFromRunnable<T> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.functions.Supplier<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnable<any>>;
              public constructor();
              public get(): any;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public constructor(param0: java.lang.Runnable);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeFromSingle<T> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamSingleSource<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.SingleSource<any>;
            }
            export module MaybeFromSingle {
              export class FromSingleObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle.FromSingleObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeFromSupplier<T> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.functions.Supplier<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSupplier<any>>;
              public constructor();
              public get(): any;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeHide<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeHide<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeHide {
              export class HideMaybeObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeHide.HideMaybeObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeIgnoreElement<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElement<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeIgnoreElement {
              export class IgnoreMaybeObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElement.IgnoreMaybeObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeIgnoreElementCompletable<T> extends io.reactivex.rxjava3.core.Completable implements io.reactivex.rxjava3.internal.fuseable.FuseToMaybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable<any>>;
              public constructor();
              public fuseToMaybe(): io.reactivex.rxjava3.core.Maybe<any>;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>);
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeIgnoreElementCompletable {
              export class IgnoreMaybeObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable.IgnoreMaybeObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeIsEmpty<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, java.lang.Boolean> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeIsEmpty {
              export class IsEmptyMaybeObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty.IsEmptyMaybeObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeIsEmptySingle<T> extends io.reactivex.rxjava3.core.Single<java.lang.Boolean> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle<any>>;
              public constructor();
              public fuseToMaybe(): io.reactivex.rxjava3.core.Maybe<any>;
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>);
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public fuseToMaybe(): io.reactivex.rxjava3.core.Maybe<java.lang.Boolean>;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeIsEmptySingle {
              export class IsEmptyMaybeObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle.IsEmptyMaybeObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeJust<T> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.internal.fuseable.ScalarSupplier<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeJust<any>>;
              public constructor();
              public get(): any;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: any);
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeLift<T, R> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeLift<any, any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeOperator<any, any>);
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeMap<T, R> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeMap<any, any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeMap {
              export class MapMaybeObserver<T, R> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeMap.MapMaybeObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeMaterialize<T> extends io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.core.Notification<any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterialize<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Maybe<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeMergeArray<T> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray<any>>;
              public constructor();
              public constructor(param0: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module MaybeMergeArray {
              export class ClqSimpleQueue<T> extends java.util.concurrent.ConcurrentLinkedQueue<any> implements io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray.SimpleQueueWithConsumerIndex<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray.ClqSimpleQueue<any>>;
                public offer(param0: any): boolean;
                public clear(): void;
                public drop(): void;
                public peek(): any;
                public offer(param0: any, param1: any): boolean;
                public isEmpty(): boolean;
                public consumerIndex(): number;
                public producerIndex(): number;
                public poll(): any;
              }
              export class MergeMaybeObserver<T> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray.MergeMaybeObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public requestFusion(param0: number): number;
                public clear(): void;
                public cancel(): void;
                public isEmpty(): boolean;
                public onComplete(): void;
                public request(param0: number): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public poll(): any;
                public onSuccess(param0: any): void;
              }
              export class MpscFillOnceSimpleQueue<T> extends java.util.concurrent.atomic.AtomicReferenceArray<any> implements io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray.SimpleQueueWithConsumerIndex<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray.MpscFillOnceSimpleQueue<any>>;
                public offer(param0: any): boolean;
                public clear(): void;
                public peek(): any;
                public drop(): void;
                public offer(param0: any, param1: any): boolean;
                public isEmpty(): boolean;
                public consumerIndex(): number;
                public producerIndex(): number;
                public poll(): any;
              }
              export class SimpleQueueWithConsumerIndex<T> extends io.reactivex.rxjava3.internal.fuseable.SimpleQueue<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray.SimpleQueueWithConsumerIndex<any>>;
                /**
                 * Constructs a new instance of the io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$SimpleQueueWithConsumerIndex interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                 */
                public constructor(implementation: { poll(): any; peek(): any; drop(): void; consumerIndex(): number; producerIndex(): number; offer(param0: any): boolean; offer(param0: any, param1: any): boolean; poll(): any; isEmpty(): boolean; clear(): void });
                public constructor();
                public offer(param0: any): boolean;
                public clear(): void;
                public peek(): any;
                public drop(): void;
                public offer(param0: any, param1: any): boolean;
                public isEmpty(): boolean;
                public consumerIndex(): number;
                public producerIndex(): number;
                public poll(): any;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeNever extends io.reactivex.rxjava3.core.Maybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeNever>;
              public static INSTANCE: io.reactivex.rxjava3.internal.operators.maybe.MaybeNever;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeObserveOn<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.Scheduler);
            }
            export module MaybeObserveOn {
              export class ObserveOnMaybeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeOnErrorComplete<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeOnErrorComplete {
              export class OnErrorCompleteMultiObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete.OnErrorCompleteMultiObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public constructor(param0: io.reactivex.rxjava3.core.MaybeObserver<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeOnErrorNext<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeOnErrorNext {
              export class OnErrorNextMaybeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext.OnErrorNextMaybeObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export module OnErrorNextMaybeObserver {
                export class NextMaybeObserver<T> extends io.reactivex.rxjava3.core.MaybeObserver<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext.OnErrorNextMaybeObserver.NextMaybeObserver<any>>;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public onSuccess(param0: any): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeOnErrorReturn<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeOnErrorReturn {
              export class OnErrorReturnMaybeObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn.OnErrorReturnMaybeObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybePeek<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybePeek<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Consumer<any>, param3: io.reactivex.rxjava3.functions.Consumer<any>, param4: io.reactivex.rxjava3.functions.Action, param5: io.reactivex.rxjava3.functions.Action, param6: io.reactivex.rxjava3.functions.Action);
            }
            export module MaybePeek {
              export class MaybePeekObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybePeek.MaybePeekObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeSubscribeOn<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.Scheduler);
            }
            export module MaybeSubscribeOn {
              export class SubscribeOnMaybeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn.SubscribeOnMaybeObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export class SubscribeTask<T> extends java.lang.Runnable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn.SubscribeTask<any>>;
                public run(): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeSwitchIfEmpty<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>);
            }
            export module MaybeSwitchIfEmpty {
              export class SwitchIfEmptyMaybeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty.SwitchIfEmptyMaybeObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export module SwitchIfEmptyMaybeObserver {
                export class OtherMaybeObserver<T> extends io.reactivex.rxjava3.core.MaybeObserver<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty.SwitchIfEmptyMaybeObserver.OtherMaybeObserver<any>>;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public onSuccess(param0: any): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeSwitchIfEmptySingle<T> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamMaybeSource<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>);
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeSwitchIfEmptySingle {
              export class SwitchIfEmptyMaybeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle.SwitchIfEmptyMaybeObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export module SwitchIfEmptyMaybeObserver {
                export class OtherSingleObserver<T> extends io.reactivex.rxjava3.core.SingleObserver<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle.SwitchIfEmptyMaybeObserver.OtherSingleObserver<any>>;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public onSuccess(param0: any): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeTakeUntilMaybe<T, U> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe<any, any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>);
            }
            export module MaybeTakeUntilMaybe {
              export class TakeUntilMainMaybeObserver<T, U> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export module TakeUntilMainMaybeObserver {
                export class TakeUntilOtherMaybeObserver<U> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver<any>>;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public onSuccess(param0: any): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeTakeUntilPublisher<T, U> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: org.reactivestreams.Publisher<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeTakeUntilPublisher {
              export class TakeUntilMainMaybeObserver<T, U> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export module TakeUntilMainMaybeObserver {
                export class TakeUntilOtherMaybeObserver<U> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver<any>>;
                  public onNext(param0: any): void;
                  public onComplete(): void;
                  public onSubscribe(param0: org.reactivestreams.Subscription): void;
                  public onError(param0: java.lang.Throwable): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeTimeInterval<T> extends io.reactivex.rxjava3.core.Maybe<io.reactivex.rxjava3.schedulers.Timed<any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: boolean);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeTimeInterval {
              export class TimeIntervalMaybeObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval.TimeIntervalMaybeObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeTimeoutMaybe<T, U> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe<any, any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>, param2: io.reactivex.rxjava3.core.MaybeSource<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeTimeoutMaybe {
              export class TimeoutFallbackMaybeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
              export class TimeoutMainMaybeObserver<T, U> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public otherComplete(): void;
                public otherError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export class TimeoutOtherMaybeObserver<T, U> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutOtherMaybeObserver<any, any>>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeTimeoutPublisher<T, U> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher<any, any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: org.reactivestreams.Publisher<any>, param2: io.reactivex.rxjava3.core.MaybeSource<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeTimeoutPublisher {
              export class TimeoutFallbackMaybeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutFallbackMaybeObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
              export class TimeoutMainMaybeObserver<T, U> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public otherComplete(): void;
                public otherError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export class TimeoutOtherMaybeObserver<T, U> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutOtherMaybeObserver<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeTimer extends io.reactivex.rxjava3.core.Maybe<java.lang.Long> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTimer>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler);
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeTimer {
              export class TimerDisposable extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTimer.TimerDisposable>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeToFlowable<T> extends io.reactivex.rxjava3.core.Flowable<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamMaybeSource<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeToFlowable<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>);
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module MaybeToFlowable {
              export class MaybeToFlowableSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeToFlowable.MaybeToFlowableSubscriber<any>>;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeToObservable<T> extends io.reactivex.rxjava3.core.Observable<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamMaybeSource<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeToObservable<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public static create(param0: io.reactivex.rxjava3.core.Observer<any>): io.reactivex.rxjava3.core.MaybeObserver<any>;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public static create(param0: io.reactivex.rxjava3.core.ObservableOnSubscribe<any>): io.reactivex.rxjava3.core.Observable<any>;
            }
            export module MaybeToObservable {
              export class MaybeToObservableObserver<T> extends io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable<any> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeToObservable.MaybeToObservableObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public dispose(): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeToPublisher extends io.reactivex.rxjava3.functions.Function<io.reactivex.rxjava3.core.MaybeSource<any>, org.reactivestreams.Publisher<any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeToPublisher>;
              public static INSTANCE: io.reactivex.rxjava3.internal.operators.maybe.MaybeToPublisher;
              public static instance(): io.reactivex.rxjava3.functions.Function<any, any>;
              public static values(): androidNative.Array<io.reactivex.rxjava3.internal.operators.maybe.MaybeToPublisher>;
              public apply(param0: any): any;
              public static valueOf(param0: string): io.reactivex.rxjava3.internal.operators.maybe.MaybeToPublisher;
              public apply(param0: io.reactivex.rxjava3.core.MaybeSource<any>): org.reactivestreams.Publisher<any>;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeToSingle<T> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamMaybeSource<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: any);
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeToSingle {
              export class ToSingleMaybeSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle.ToSingleMaybeSubscriber<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeUnsafeCreate<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsafeCreate<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeUnsubscribeOn<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.core.Scheduler);
            }
            export module MaybeUnsubscribeOn {
              export class UnsubscribeOnMaybeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn.UnsubscribeOnMaybeObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeUsing<T, D> extends io.reactivex.rxjava3.core.Maybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Consumer<any>, param3: boolean);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeUsing {
              export class UsingObserver<T, D> extends java.util.concurrent.atomic.AtomicReference<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeZipArray<T, R> extends io.reactivex.rxjava3.core.Maybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray<any, any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public constructor(param0: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeZipArray {
              export class SingletonArrayFunc extends io.reactivex.rxjava3.functions.Function<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.SingletonArrayFunc>;
                public apply(param0: any): any;
              }
              export class ZipCoordinator<T, R> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              }
              export class ZipMaybeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipMaybeObserver<any>>;
                public dispose(): void;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module maybe {
            export class MaybeZipIterable<T, R> extends io.reactivex.rxjava3.core.Maybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterable<any, any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: java.lang.Iterable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeZipIterable {
              export class SingletonArrayFunc extends io.reactivex.rxjava3.functions.Function<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterable.SingletonArrayFunc>;
                public apply(param0: any): any;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export class CompletableAndThenObservable<R> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservable<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource, param1: io.reactivex.rxjava3.core.ObservableSource<any>);
            }
            export module CompletableAndThenObservable {
              export class AndThenObservableObserver<R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservable.AndThenObservableObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export class CompletableAndThenPublisher<R> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher<any>>;
              public constructor();
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource, param1: org.reactivestreams.Publisher<any>);
            }
            export module CompletableAndThenPublisher {
              export class AndThenPublisherSubscriber<R> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher.AndThenPublisherSubscriber<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export abstract class ConcatMapXMainObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainObserver<any>>;
              public onComplete(): void;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public constructor(param0: number, param1: io.reactivex.rxjava3.internal.util.ErrorMode);
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
              public onNext(param0: any): void;
              public onError(param0: java.lang.Throwable): void;
              public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export abstract class ConcatMapXMainSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber<any>>;
              public onNext(param0: any): void;
              public onError(param0: java.lang.Throwable): void;
              public onComplete(): void;
              public onSubscribe(param0: org.reactivestreams.Subscription): void;
              public constructor(param0: number, param1: io.reactivex.rxjava3.internal.util.ErrorMode);
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export class FlowableConcatMapCompletable<T> extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.internal.util.ErrorMode, param3: number);
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module FlowableConcatMapCompletable {
              export class ConcatMapCompletableObserver<T> extends io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber<any> implements io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable.ConcatMapCompletableObserver<any>>;
                public dispose(): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              }
              export module ConcatMapCompletableObserver {
                export class ConcatMapInnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.CompletableObserver {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable.ConcatMapCompletableObserver.ConcatMapInnerObserver>;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export class FlowableConcatMapMaybe<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.internal.util.ErrorMode, param3: number);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableConcatMapMaybe {
              export class ConcatMapMaybeSubscriber<T, R> extends io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber<any> implements org.reactivestreams.Subscription {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public cancel(): void;
                public request(param0: number): void;
              }
              export module ConcatMapMaybeSubscriber {
                export class ConcatMapMaybeObserver<R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver<any>>;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public onSuccess(param0: any): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export class FlowableConcatMapMaybePublisher<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybePublisher<any, any>>;
              public constructor();
              public constructor(param0: org.reactivestreams.Publisher<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.internal.util.ErrorMode, param3: number);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export class FlowableConcatMapSingle<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.internal.util.ErrorMode, param3: number);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableConcatMapSingle {
              export class ConcatMapSingleSubscriber<T, R> extends io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber<any> implements org.reactivestreams.Subscription {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle.ConcatMapSingleSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public cancel(): void;
                public request(param0: number): void;
              }
              export module ConcatMapSingleSubscriber {
                export class ConcatMapSingleObserver<R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle.ConcatMapSingleSubscriber.ConcatMapSingleObserver<any>>;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public onSuccess(param0: any): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export class FlowableConcatMapSinglePublisher<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSinglePublisher<any, any>>;
              public constructor();
              public constructor(param0: org.reactivestreams.Publisher<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.internal.util.ErrorMode, param3: number);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export class FlowableSwitchMapCompletable<T> extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean);
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module FlowableSwitchMapCompletable {
              export class SwitchMapCompletableObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export module SwitchMapCompletableObserver {
                export class SwitchMapInnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.CompletableObserver {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.SwitchMapInnerObserver>;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export class FlowableSwitchMapCompletablePublisher<T> extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletablePublisher<any>>;
              public constructor();
              public constructor(param0: org.reactivestreams.Publisher<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean);
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export class FlowableSwitchMapMaybe<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableSwitchMapMaybe {
              export class SwitchMapMaybeSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
              export module SwitchMapMaybeSubscriber {
                export class SwitchMapMaybeObserver<R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver<any>>;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public onSuccess(param0: any): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export class FlowableSwitchMapMaybePublisher<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybePublisher<any, any>>;
              public constructor();
              public constructor(param0: org.reactivestreams.Publisher<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export class FlowableSwitchMapSingle<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module FlowableSwitchMapSingle {
              export class SwitchMapSingleSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle.SwitchMapSingleSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
              export module SwitchMapSingleSubscriber {
                export class SwitchMapSingleObserver<R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle.SwitchMapSingleSubscriber.SwitchMapSingleObserver<any>>;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public onSuccess(param0: any): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export class FlowableSwitchMapSinglePublisher<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSinglePublisher<any, any>>;
              public constructor();
              public constructor(param0: org.reactivestreams.Publisher<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export class MaterializeSingleObserver<T> extends java.lang.Object {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.MaterializeSingleObserver<any>>;
              public onComplete(): void;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public onSuccess(param0: T): void;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
              public onError(param0: java.lang.Throwable): void;
              public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              public constructor(param0: io.reactivex.rxjava3.core.SingleObserver<any>);
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export class MaybeFlatMapObservable<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module MaybeFlatMapObservable {
              export class FlatMapObserver<T, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable.FlatMapObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export class MaybeFlatMapPublisher<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher<any, any>>;
              public constructor();
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.MaybeSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
            }
            export module MaybeFlatMapPublisher {
              export class FlatMapPublisherSubscriber<T, R> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher.FlatMapPublisherSubscriber<any, any>>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export class ObservableConcatMapCompletable<T> extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.internal.util.ErrorMode, param3: number);
            }
            export module ObservableConcatMapCompletable {
              export class ConcatMapCompletableObserver<T> extends io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable.ConcatMapCompletableObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module ConcatMapCompletableObserver {
                export class ConcatMapInnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.CompletableObserver {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable.ConcatMapCompletableObserver.ConcatMapInnerObserver>;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export class ObservableConcatMapMaybe<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.internal.util.ErrorMode, param3: number);
            }
            export module ObservableConcatMapMaybe {
              export class ConcatMapMaybeMainObserver<T, R> extends io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe.ConcatMapMaybeMainObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module ConcatMapMaybeMainObserver {
                export class ConcatMapMaybeObserver<R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe.ConcatMapMaybeMainObserver.ConcatMapMaybeObserver<any>>;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public onSuccess(param0: any): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export class ObservableConcatMapSingle<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.internal.util.ErrorMode, param3: number);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableConcatMapSingle {
              export class ConcatMapSingleMainObserver<T, R> extends io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle.ConcatMapSingleMainObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module ConcatMapSingleMainObserver {
                export class ConcatMapSingleObserver<R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle.ConcatMapSingleMainObserver.ConcatMapSingleObserver<any>>;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public onSuccess(param0: any): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export class ObservableSwitchMapCompletable<T> extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean);
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableSwitchMapCompletable {
              export class SwitchMapCompletableObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export module SwitchMapCompletableObserver {
                export class SwitchMapInnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.CompletableObserver {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.SwitchMapInnerObserver>;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export class ObservableSwitchMapMaybe<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableSwitchMapMaybe {
              export class SwitchMapMaybeMainObserver<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module SwitchMapMaybeMainObserver {
                export class SwitchMapMaybeObserver<R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver.SwitchMapMaybeObserver<any>>;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public onSuccess(param0: any): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export class ObservableSwitchMapSingle<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableSwitchMapSingle {
              export class SwitchMapSingleMainObserver<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle.SwitchMapSingleMainObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module SwitchMapSingleMainObserver {
                export class SwitchMapSingleObserver<R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle.SwitchMapSingleMainObserver.SwitchMapSingleObserver<any>>;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public onSuccess(param0: any): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export class ScalarXMapZHelper {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ScalarXMapZHelper>;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module mixed {
            export class SingleFlatMapObservable<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
            }
            export module SingleFlatMapObservable {
              export class FlatMapObserver<T, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable.FlatMapObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export abstract class AbstractObservableWithUpstream<T, U> extends io.reactivex.rxjava3.core.Observable<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamObservableSource<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any>>;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class BlockingObservableIterable<T> extends java.lang.Iterable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable<any>>;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number);
              public iterator(): java.util.Iterator<any>;
            }
            export module BlockingObservableIterable {
              export class BlockingObservableIterator<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable.BlockingObservableIterator<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public next(): any;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public hasNext(): boolean;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public remove(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class BlockingObservableLatest<T> extends java.lang.Iterable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest<any>>;
              public iterator(): java.util.Iterator<any>;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>);
            }
            export module BlockingObservableLatest {
              export class BlockingObservableLatestIterator<T> extends io.reactivex.rxjava3.observers.DisposableObserver<io.reactivex.rxjava3.core.Notification<any>> implements java.util.Iterator<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest.BlockingObservableLatestIterator<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public next(): any;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: io.reactivex.rxjava3.core.Notification<any>): void;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public hasNext(): boolean;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public remove(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class BlockingObservableMostRecent<T> extends java.lang.Iterable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecent<any>>;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: any);
              public iterator(): java.util.Iterator<any>;
            }
            export module BlockingObservableMostRecent {
              export class MostRecentObserver<T> extends io.reactivex.rxjava3.observers.DefaultObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecent.MostRecentObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public getIterable(): io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecent.MostRecentObserver.MostRecentIterator;
                public onNext(param0: any): void;
              }
              export module MostRecentObserver {
                export class MostRecentIterator extends java.util.Iterator<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecent.MostRecentObserver.MostRecentIterator>;
                  public hasNext(): boolean;
                  public remove(): void;
                  public next(): any;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class BlockingObservableNext<T> extends java.lang.Iterable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext<any>>;
              public iterator(): java.util.Iterator<any>;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>);
            }
            export module BlockingObservableNext {
              export class NextIterator<T> extends java.util.Iterator<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext.NextIterator<any>>;
                public next(): any;
                public hasNext(): boolean;
                public remove(): void;
              }
              export class NextObserver<T> extends io.reactivex.rxjava3.observers.DisposableObserver<io.reactivex.rxjava3.core.Notification<any>> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext.NextObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public onNext(param0: io.reactivex.rxjava3.core.Notification<any>): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public takeNext(): io.reactivex.rxjava3.core.Notification<any>;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableAll<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, java.lang.Boolean> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableAll<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableAll {
              export class AllObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableAll.AllObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableAllSingle<T> extends io.reactivex.rxjava3.core.Single<java.lang.Boolean> implements io.reactivex.rxjava3.internal.fuseable.FuseToObservable<java.lang.Boolean> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public fuseToObservable(): io.reactivex.rxjava3.core.Observable<java.lang.Boolean>;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public fuseToObservable(): io.reactivex.rxjava3.core.Observable<any>;
            }
            export module ObservableAllSingle {
              export class AllObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle.AllObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableAmb<T> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableAmb<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>, param1: java.lang.Iterable<any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableAmb {
              export class AmbCoordinator<T> extends io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public win(param0: number): boolean;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public subscribe(param0: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export class AmbInnerObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public dispose(): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableAny<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, java.lang.Boolean> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableAny<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableAny {
              export class AnyObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableAny.AnyObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableAnySingle<T> extends io.reactivex.rxjava3.core.Single<java.lang.Boolean> implements io.reactivex.rxjava3.internal.fuseable.FuseToObservable<java.lang.Boolean> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public fuseToObservable(): io.reactivex.rxjava3.core.Observable<java.lang.Boolean>;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public fuseToObservable(): io.reactivex.rxjava3.core.Observable<any>;
            }
            export module ObservableAnySingle {
              export class AnyObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle.AnyObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableAutoConnect<T> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableAutoConnect<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.observables.ConnectableObservable<any>, param1: number, param2: io.reactivex.rxjava3.functions.Consumer<any>);
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableBlockingSubscribe {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe>;
              public static subscribe(param0: io.reactivex.rxjava3.core.ObservableSource<any>): void;
              public static subscribe(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Consumer<any>, param3: io.reactivex.rxjava3.functions.Action): void;
              public static subscribe(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.Observer<any>): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableBuffer<T, U> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number, param2: number, param3: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableBuffer {
              export class BufferExactObserver<T, U> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer.BufferExactObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export class BufferSkipObserver<T, U> extends java.util.concurrent.atomic.AtomicBoolean {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer.BufferSkipObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableBufferBoundary<T, U, Open, Close> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary<any, any, any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.functions.Function<any, any>, param3: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableBufferBoundary {
              export class BufferBoundaryObserver<T, C, Open, Close> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary.BufferBoundaryObserver<any, any, any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module BufferBoundaryObserver {
                export class BufferOpenObserver<Open> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary.BufferBoundaryObserver.BufferOpenObserver<any>>;
                  public onNext(param0: any): void;
                  public onComplete(): void;
                  public dispose(): void;
                  public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                  public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                  public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                  public isDisposed(): boolean;
                  public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                }
              }
              export class BufferCloseObserver<T, C> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary.BufferCloseObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableBufferExactBoundary<T, U, B> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary<any, any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableBufferExactBoundary {
              export class BufferBoundaryObserver<T, U, B> extends io.reactivex.rxjava3.observers.DisposableObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferBoundaryObserver<any, any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class BufferExactBoundaryObserver<T, U, B> extends io.reactivex.rxjava3.internal.observers.QueueDrainObserver<any, any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver<any, any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public cancelled(): boolean;
                public leave(param0: number): number;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public done(): boolean;
                public enter(): boolean;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public accept(param0: io.reactivex.rxjava3.core.Observer<any>, param1: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
                public error(): java.lang.Throwable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableBufferTimed<T, U> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number, param2: number, param3: java.util.concurrent.TimeUnit, param4: io.reactivex.rxjava3.core.Scheduler, param5: io.reactivex.rxjava3.functions.Supplier<any>, param6: number, param7: boolean);
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableBufferTimed {
              export class BufferExactBoundedObserver<T, U> extends io.reactivex.rxjava3.internal.observers.QueueDrainObserver<any, any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed.BufferExactBoundedObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public cancelled(): boolean;
                public leave(param0: number): number;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public done(): boolean;
                public enter(): boolean;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public accept(param0: io.reactivex.rxjava3.core.Observer<any>, param1: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
                public error(): java.lang.Throwable;
              }
              export class BufferExactUnboundedObserver<T, U> extends io.reactivex.rxjava3.internal.observers.QueueDrainObserver<any, any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed.BufferExactUnboundedObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public cancelled(): boolean;
                public leave(param0: number): number;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public done(): boolean;
                public enter(): boolean;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public accept(param0: io.reactivex.rxjava3.core.Observer<any>, param1: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
                public error(): java.lang.Throwable;
              }
              export class BufferSkipBoundedObserver<T, U> extends io.reactivex.rxjava3.internal.observers.QueueDrainObserver<any, any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed.BufferSkipBoundedObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public cancelled(): boolean;
                public leave(param0: number): number;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public done(): boolean;
                public enter(): boolean;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public accept(param0: io.reactivex.rxjava3.core.Observer<any>, param1: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
                public error(): java.lang.Throwable;
              }
              export module BufferSkipBoundedObserver {
                export class RemoveFromBuffer {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed.BufferSkipBoundedObserver.RemoveFromBuffer>;
                  public run(): void;
                }
                export class RemoveFromBufferEmit {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed.BufferSkipBoundedObserver.RemoveFromBufferEmit>;
                  public run(): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableCache<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> implements io.reactivex.rxjava3.core.Observer<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCache<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: number);
              public onComplete(): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
              public onNext(param0: any): void;
              public onError(param0: java.lang.Throwable): void;
              public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableCache {
              export class CacheDisposable<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCache.CacheDisposable<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              }
              export class Node<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCache.Node<any>>;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableCollect<T, U> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCollect<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Supplier<any>, param2: io.reactivex.rxjava3.functions.BiConsumer<any, any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableCollect {
              export class CollectObserver<T, U> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableCollectSingle<T, U> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.internal.fuseable.FuseToObservable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Supplier<any>, param2: io.reactivex.rxjava3.functions.BiConsumer<any, any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public fuseToObservable(): io.reactivex.rxjava3.core.Observable<any>;
            }
            export module ObservableCollectSingle {
              export class CollectObserver<T, U> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableCombineLatest<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public constructor(param0: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>, param1: java.lang.Iterable<any>, param2: io.reactivex.rxjava3.functions.Function<any, any>, param3: number, param4: boolean);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableCombineLatest {
              export class CombinerObserver<T, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest.CombinerObserver<any, any>>;
                public onError(param0: java.lang.Throwable): void;
                public dispose(): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
              }
              export class LatestCoordinator<T, R> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest.LatestCoordinator<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public subscribe(param0: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableConcatMap<T, U> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number, param3: io.reactivex.rxjava3.internal.util.ErrorMode);
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableConcatMap {
              export class ConcatMapDelayErrorObserver<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap.ConcatMapDelayErrorObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module ConcatMapDelayErrorObserver {
                export class DelayErrorInnerObserver<R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap.ConcatMapDelayErrorObserver.DelayErrorInnerObserver<any>>;
                  public onNext(param0: any): void;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                }
              }
              export class SourceObserver<T, U> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap.SourceObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module SourceObserver {
                export class InnerObserver<U> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap.SourceObserver.InnerObserver<any>>;
                  public onNext(param0: any): void;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableConcatMapEager<T, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.internal.util.ErrorMode, param3: number, param4: number);
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableConcatMapEager {
              export class ConcatMapEagerMainObserver<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public innerComplete(param0: io.reactivex.rxjava3.internal.observers.InnerQueuedObserver<any>): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public innerNext(param0: io.reactivex.rxjava3.internal.observers.InnerQueuedObserver<any>, param1: any): void;
                public innerError(param0: io.reactivex.rxjava3.internal.observers.InnerQueuedObserver<any>, param1: java.lang.Throwable): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public drain(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableConcatMapScheduler<T, U> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number, param3: io.reactivex.rxjava3.internal.util.ErrorMode, param4: io.reactivex.rxjava3.core.Scheduler);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableConcatMapScheduler {
              export class ConcatMapDelayErrorObserver<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler.ConcatMapDelayErrorObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module ConcatMapDelayErrorObserver {
                export class DelayErrorInnerObserver<R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler.ConcatMapDelayErrorObserver.DelayErrorInnerObserver<any>>;
                  public onNext(param0: any): void;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                }
              }
              export class ConcatMapObserver<T, U> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler.ConcatMapObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module ConcatMapObserver {
                export class InnerObserver<U> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler.ConcatMapObserver.InnerObserver<any>>;
                  public onNext(param0: any): void;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableConcatWithCompletable<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletable<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: io.reactivex.rxjava3.core.CompletableSource);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableConcatWithCompletable {
              export class ConcatWithObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletable.ConcatWithObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableConcatWithMaybe<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>);
            }
            export module ObservableConcatWithMaybe {
              export class ConcatWithObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe.ConcatWithObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableConcatWithSingle<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableConcatWithSingle {
              export class ConcatWithObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle.ConcatWithObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableCount<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, java.lang.Long> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCount<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableCount {
              export class CountObserver extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCount.CountObserver>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableCountSingle<T> extends io.reactivex.rxjava3.core.Single<java.lang.Long> implements io.reactivex.rxjava3.internal.fuseable.FuseToObservable<java.lang.Long> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCountSingle<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>);
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public fuseToObservable(): io.reactivex.rxjava3.core.Observable<java.lang.Long>;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public fuseToObservable(): io.reactivex.rxjava3.core.Observable<any>;
            }
            export module ObservableCountSingle {
              export class CountObserver extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCountSingle.CountObserver>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableCreate<T> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCreate<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.ObservableOnSubscribe<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableCreate {
              export class CreateEmitter<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCreate.CreateEmitter<any>>;
                public dispose(): void;
                public toString(): string;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                public serialize(): io.reactivex.rxjava3.core.ObservableEmitter<any>;
                public onError(param0: java.lang.Throwable): void;
                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public tryOnError(param0: java.lang.Throwable): boolean;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class SerializedEmitter<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.ObservableEmitter<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCreate.SerializedEmitter<any>>;
                public onError(param0: java.lang.Throwable): void;
                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public tryOnError(param0: java.lang.Throwable): boolean;
                public toString(): string;
                public isDisposed(): boolean;
                public onComplete(): void;
                public onNext(param0: any): void;
                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                public serialize(): io.reactivex.rxjava3.core.ObservableEmitter<any>;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableDebounce<T, U> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableDebounce {
              export class DebounceObserver<T, U> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce.DebounceObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export module DebounceObserver {
                export class DebounceInnerObserver<T, U> extends io.reactivex.rxjava3.observers.DisposableObserver<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce.DebounceObserver.DebounceInnerObserver<any, any>>;
                  public onNext(param0: any): void;
                  public onComplete(): void;
                  public dispose(): void;
                  public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                  public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                  public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                  public isDisposed(): boolean;
                  public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableDebounceTimed<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTimed<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableDebounceTimed {
              export class DebounceEmitter<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTimed.DebounceEmitter<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public setResource(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export class DebounceTimedObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTimed.DebounceTimedObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableDefer<T> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDefer<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableDelay<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDelay<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: boolean);
            }
            export module ObservableDelay {
              export class DelayObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export module DelayObserver {
                export class OnComplete {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnComplete>;
                  public run(): void;
                }
                export class OnError {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnError>;
                  public run(): void;
                }
                export class OnNext {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext>;
                  public run(): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableDelaySubscriptionOther<T, U> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOther<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>);
            }
            export module ObservableDelaySubscriptionOther {
              export class DelayObserver extends io.reactivex.rxjava3.core.Observer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOther.DelayObserver>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
              }
              export module DelayObserver {
                export class OnComplete extends io.reactivex.rxjava3.core.Observer<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOther.DelayObserver.OnComplete>;
                  public onNext(param0: any): void;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableDematerialize<T, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableDematerialize {
              export class DematerializeObserver<T, R> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize.DematerializeObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableDetach<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDetach<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableDetach {
              export class DetachObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDetach.DetachObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableDistinct<T, K> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableDistinct {
              export class DistinctObserver<T, K> extends io.reactivex.rxjava3.internal.observers.BasicFuseableObserver<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver<any, any>>;
                public onError(param0: java.lang.Throwable): void;
                public requestFusion(param0: number): number;
                public clear(): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public poll(): any;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableDistinctUntilChanged<T, K> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.BiPredicate<any, any>);
            }
            export module ObservableDistinctUntilChanged {
              export class DistinctUntilChangedObserver<T, K> extends io.reactivex.rxjava3.internal.observers.BasicFuseableObserver<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged.DistinctUntilChangedObserver<any, any>>;
                public onError(param0: java.lang.Throwable): void;
                public requestFusion(param0: number): number;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public poll(): any;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableDoAfterNext<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableDoAfterNext {
              export class DoAfterObserver<T> extends io.reactivex.rxjava3.internal.observers.BasicFuseableObserver<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext.DoAfterObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public requestFusion(param0: number): number;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public poll(): any;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableDoFinally<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinally<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Action);
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableDoFinally {
              export class DoFinallyObserver<T> extends io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable<any> implements io.reactivex.rxjava3.core.Observer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinally.DoFinallyObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public dispose(): void;
                public requestFusion(param0: number): number;
                public clear(): void;
                public isDisposed(): boolean;
                public isEmpty(): boolean;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public poll(): any;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableDoOnEach<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Consumer<any>, param3: io.reactivex.rxjava3.functions.Action, param4: io.reactivex.rxjava3.functions.Action);
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableDoOnEach {
              export class DoOnEachObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach.DoOnEachObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableDoOnLifecycle<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnLifecycle<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableElementAt<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number, param2: any, param3: boolean);
            }
            export module ObservableElementAt {
              export class ElementAtObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableElementAtMaybe<T> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.internal.fuseable.FuseToObservable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public fuseToObservable(): io.reactivex.rxjava3.core.Observable<any>;
            }
            export module ObservableElementAtMaybe {
              export class ElementAtObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe.ElementAtObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableElementAtSingle<T> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.internal.fuseable.FuseToObservable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number, param2: any);
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public fuseToObservable(): io.reactivex.rxjava3.core.Observable<any>;
            }
            export module ObservableElementAtSingle {
              export class ElementAtObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle.ElementAtObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableEmpty extends io.reactivex.rxjava3.core.Observable<any> implements io.reactivex.rxjava3.internal.fuseable.ScalarSupplier<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableEmpty>;
              public static INSTANCE: io.reactivex.rxjava3.core.Observable<any>;
              public get(): any;
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableError<T> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableError<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableFilter<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFilter<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableFilter {
              export class FilterObserver<T> extends io.reactivex.rxjava3.internal.observers.BasicFuseableObserver<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFilter.FilterObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public requestFusion(param0: number): number;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public poll(): any;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableFlatMap<T, U> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean, param3: number, param4: number);
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableFlatMap {
              export class InnerObserver<T, U> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap.InnerObserver<any, any>>;
                public onError(param0: java.lang.Throwable): void;
                public dispose(): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
              }
              export class MergeObserver<T, U> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap.MergeObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableFlatMapCompletable<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableFlatMapCompletable {
              export class FlatMapCompletableMainObserver<T> extends io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable<any> implements io.reactivex.rxjava3.core.Observer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable.FlatMapCompletableMainObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public dispose(): void;
                public clear(): void;
                public requestFusion(param0: number): number;
                public isDisposed(): boolean;
                public isEmpty(): boolean;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public poll(): any;
                public onNext(param0: any): void;
              }
              export module FlatMapCompletableMainObserver {
                export class InnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable.FlatMapCompletableMainObserver.InnerObserver>;
                  public onComplete(): void;
                  public dispose(): void;
                  public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                  public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                  public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                  public isDisposed(): boolean;
                  public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableFlatMapCompletableCompletable<T> extends io.reactivex.rxjava3.core.Completable implements io.reactivex.rxjava3.internal.fuseable.FuseToObservable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean);
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public fuseToObservable(): io.reactivex.rxjava3.core.Observable<any>;
            }
            export module ObservableFlatMapCompletableCompletable {
              export class FlatMapCompletableMainObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable.FlatMapCompletableMainObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module FlatMapCompletableMainObserver {
                export class InnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable.FlatMapCompletableMainObserver.InnerObserver>;
                  public onComplete(): void;
                  public dispose(): void;
                  public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                  public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                  public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                  public isDisposed(): boolean;
                  public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableFlatMapMaybe<T, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableFlatMapMaybe {
              export class FlatMapMaybeObserver<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe.FlatMapMaybeObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module FlatMapMaybeObserver {
                export class InnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe.FlatMapMaybeObserver.InnerObserver>;
                  public onComplete(): void;
                  public dispose(): void;
                  public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                  public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                  public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                  public isDisposed(): boolean;
                  public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                  public onSuccess(param0: any): void;
                  public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableFlatMapSingle<T, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableFlatMapSingle {
              export class FlatMapSingleObserver<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module FlatMapSingleObserver {
                export class InnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver.InnerObserver>;
                  public dispose(): void;
                  public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                  public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                  public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                  public isDisposed(): boolean;
                  public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                  public onSuccess(param0: any): void;
                  public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableFlattenIterable<T, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableFlattenIterable {
              export class FlattenIterableObserver<T, R> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableFromAction<T> extends io.reactivex.rxjava3.core.Observable<any> implements io.reactivex.rxjava3.functions.Supplier<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromAction<any>>;
              public constructor();
              public get(): any;
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.functions.Action);
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableFromArray<T> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: androidNative.Array<any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableFromArray {
              export class FromArrayDisposable<T> extends io.reactivex.rxjava3.internal.observers.BasicQueueDisposable<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable<any>>;
                public dispose(): void;
                public requestFusion(param0: number): number;
                public clear(): void;
                public isDisposed(): boolean;
                public isEmpty(): boolean;
                public poll(): any;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableFromCallable<T> extends io.reactivex.rxjava3.core.Observable<any> implements io.reactivex.rxjava3.functions.Supplier<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallable<any>>;
              public constructor();
              public get(): any;
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: java.util.concurrent.Callable<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableFromCompletable<T> extends io.reactivex.rxjava3.core.Observable<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamCompletableSource {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletable<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.CompletableSource);
              public source(): io.reactivex.rxjava3.core.CompletableSource;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableFromCompletable {
              export class FromCompletableObserver<T> extends io.reactivex.rxjava3.internal.fuseable.AbstractEmptyQueueFuseable<any> implements io.reactivex.rxjava3.core.CompletableObserver {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletable.FromCompletableObserver<any>>;
                public dispose(): void;
                public onError(param0: java.lang.Throwable): void;
                public isDisposed(): boolean;
                public onComplete(): void;
                public constructor();
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public constructor(param0: io.reactivex.rxjava3.core.Observer<any>);
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableFromFuture<T> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromFuture<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: java.util.concurrent.Future<any>, param1: number, param2: java.util.concurrent.TimeUnit);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableFromIterable<T> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: java.lang.Iterable<any>);
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableFromIterable {
              export class FromIterableDisposable<T> extends io.reactivex.rxjava3.internal.observers.BasicQueueDisposable<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable.FromIterableDisposable<any>>;
                public dispose(): void;
                public requestFusion(param0: number): number;
                public clear(): void;
                public isDisposed(): boolean;
                public isEmpty(): boolean;
                public poll(): any;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableFromPublisher<T> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromPublisher<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public constructor(param0: org.reactivestreams.Publisher<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableFromPublisher {
              export class PublisherSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromPublisher.PublisherSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableFromRunnable<T> extends io.reactivex.rxjava3.core.Observable<any> implements io.reactivex.rxjava3.functions.Supplier<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromRunnable<any>>;
              public constructor();
              public get(): any;
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public constructor(param0: java.lang.Runnable);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableFromSupplier<T> extends io.reactivex.rxjava3.core.Observable<any> implements io.reactivex.rxjava3.functions.Supplier<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplier<any>>;
              public constructor();
              public get(): any;
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableFromUnsafeSource<T> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromUnsafeSource<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableGenerate<T, S> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, io.reactivex.rxjava3.core.Emitter<any>, any>, param2: io.reactivex.rxjava3.functions.Consumer<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableGenerate {
              export class GeneratorDisposable<T, S> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate.GeneratorDisposable<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableGroupBy<T, K, V> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, io.reactivex.rxjava3.observables.GroupedObservable<any, any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy<any, any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Function<any, any>, param3: number, param4: boolean);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableGroupBy {
              export class GroupByObserver<T, K, V> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.GroupByObserver<any, any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public constructor(param0: io.reactivex.rxjava3.core.Observer<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Function<any, any>, param3: number, param4: boolean);
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public cancel(param0: any): void;
                public onNext(param0: any): void;
              }
              export class GroupedUnicast<K, T> extends io.reactivex.rxjava3.observables.GroupedObservable<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.GroupedUnicast<any, any>>;
                public constructor(param0: any);
                public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public constructor();
                public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                public constructor(param0: any, param1: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.State<any, any>);
                public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                public static createWith(param0: any, param1: number, param2: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.GroupByObserver<any, any, any>, param3: boolean): io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.GroupedUnicast<any, any>;
                public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class State<T, K> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.State<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableGroupJoin<TLeft, TRight, TLeftEnd, TRightEnd, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin<any, any, any, any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.functions.Function<any, any>, param3: io.reactivex.rxjava3.functions.Function<any, any>, param4: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableGroupJoin {
              export class GroupJoinDisposable<TLeft, TRight, TLeftEnd, TRightEnd, R> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.GroupJoinDisposable<any, any, any, any, any>>;
                public dispose(): void;
                public innerValue(param0: boolean, param1: any): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public innerError(param0: java.lang.Throwable): void;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public innerClose(param0: boolean, param1: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.LeftRightEndObserver): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public innerComplete(param0: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.LeftRightObserver): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public innerCloseError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export class JoinSupport {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.JoinSupport>;
                /**
                 * Constructs a new instance of the io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$JoinSupport interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                 */
                public constructor(implementation: { innerError(param0: java.lang.Throwable): void; innerComplete(param0: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.LeftRightObserver): void; innerValue(param0: boolean, param1: any): void; innerClose(param0: boolean, param1: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.LeftRightEndObserver): void; innerCloseError(param0: java.lang.Throwable): void });
                public constructor();
                public innerValue(param0: boolean, param1: any): void;
                public innerError(param0: java.lang.Throwable): void;
                public innerCloseError(param0: java.lang.Throwable): void;
                public innerClose(param0: boolean, param1: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.LeftRightEndObserver): void;
                public innerComplete(param0: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.LeftRightObserver): void;
              }
              export class LeftRightEndObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.LeftRightEndObserver>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class LeftRightObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.LeftRightObserver>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableHide<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableHide<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableHide {
              export class HideDisposable<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableHide.HideDisposable<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableIgnoreElements<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElements<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableIgnoreElements {
              export class IgnoreObservable<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElements.IgnoreObservable<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableIgnoreElementsCompletable<T> extends io.reactivex.rxjava3.core.Completable implements io.reactivex.rxjava3.internal.fuseable.FuseToObservable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public fuseToObservable(): io.reactivex.rxjava3.core.Observable<any>;
            }
            export module ObservableIgnoreElementsCompletable {
              export class IgnoreObservable<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable.IgnoreObservable<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableInternalHelper {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper>;
              public static simpleBiGenerator(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.functions.BiFunction<any, any, any>;
              public static itemDelay(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
              public static observerOnNext(param0: io.reactivex.rxjava3.core.Observer<any>): io.reactivex.rxjava3.functions.Consumer<any>;
              public static replaySupplier(param0: io.reactivex.rxjava3.core.Observable<any>, param1: number, param2: boolean): io.reactivex.rxjava3.functions.Supplier<any>;
              public static simpleGenerator(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.functions.BiFunction<any, any, any>;
              public static observerOnError(param0: io.reactivex.rxjava3.core.Observer<any>): io.reactivex.rxjava3.functions.Consumer<any>;
              public static flatMapWithCombiner(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
              public static replaySupplier(param0: io.reactivex.rxjava3.core.Observable<any>, param1: number, param2: number, param3: java.util.concurrent.TimeUnit, param4: io.reactivex.rxjava3.core.Scheduler, param5: boolean): io.reactivex.rxjava3.functions.Supplier<any>;
              public static replaySupplier(param0: io.reactivex.rxjava3.core.Observable<any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: boolean): io.reactivex.rxjava3.functions.Supplier<any>;
              public static flatMapIntoIterable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
              public static replaySupplier(param0: io.reactivex.rxjava3.core.Observable<any>): io.reactivex.rxjava3.functions.Supplier<any>;
              public static observerOnComplete(param0: io.reactivex.rxjava3.core.Observer<any>): io.reactivex.rxjava3.functions.Action;
            }
            export module ObservableInternalHelper {
              export class BufferedReplaySupplier<T> extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.observables.ConnectableObservable<any>> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier<any>>;
                public get(): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
                public get(): any;
              }
              export class BufferedTimedReplaySupplier<T> extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.observables.ConnectableObservable<any>> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedTimedReplaySupplier<any>>;
                public get(): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
                public get(): any;
              }
              export class FlatMapIntoIterable<T, U> extends io.reactivex.rxjava3.functions.Function<any, io.reactivex.rxjava3.core.ObservableSource<any>> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapIntoIterable<any, any>>;
                public apply(param0: any): io.reactivex.rxjava3.core.ObservableSource<any>;
                public apply(param0: any): any;
              }
              export class FlatMapWithCombinerInner<U, R, T> extends io.reactivex.rxjava3.functions.Function<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerInner<any, any, any>>;
                public apply(param0: any): any;
              }
              export class FlatMapWithCombinerOuter<T, R, U> extends io.reactivex.rxjava3.functions.Function<any, io.reactivex.rxjava3.core.ObservableSource<any>> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter<any, any, any>>;
                public apply(param0: any): io.reactivex.rxjava3.core.ObservableSource<any>;
                public apply(param0: any): any;
              }
              export class ItemDelayFunction<T, U> extends io.reactivex.rxjava3.functions.Function<any, io.reactivex.rxjava3.core.ObservableSource<any>> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction<any, any>>;
                public apply(param0: any): io.reactivex.rxjava3.core.ObservableSource<any>;
                public apply(param0: any): any;
              }
              export class MapToInt extends io.reactivex.rxjava3.functions.Function<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.MapToInt>;
                public static INSTANCE: io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.MapToInt;
                public static values(): androidNative.Array<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.MapToInt>;
                public static valueOf(param0: string): io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.MapToInt;
                public apply(param0: any): any;
              }
              export class ObserverOnComplete<T> extends io.reactivex.rxjava3.functions.Action {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ObserverOnComplete<any>>;
                public run(): void;
              }
              export class ObserverOnError<T> extends io.reactivex.rxjava3.functions.Consumer<java.lang.Throwable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ObserverOnError<any>>;
                public accept(param0: any): void;
                public accept(param0: java.lang.Throwable): void;
              }
              export class ObserverOnNext<T> extends io.reactivex.rxjava3.functions.Consumer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ObserverOnNext<any>>;
                public accept(param0: any): void;
              }
              export class ReplaySupplier<T> extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.observables.ConnectableObservable<any>> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ReplaySupplier<any>>;
                public get(): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
                public get(): any;
              }
              export class SimpleBiGenerator<T, S> extends io.reactivex.rxjava3.functions.BiFunction<any, io.reactivex.rxjava3.core.Emitter<any>, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.SimpleBiGenerator<any, any>>;
                public apply(param0: any, param1: io.reactivex.rxjava3.core.Emitter<any>): any;
                public apply(param0: any, param1: any): any;
              }
              export class SimpleGenerator<T, S> extends io.reactivex.rxjava3.functions.BiFunction<any, io.reactivex.rxjava3.core.Emitter<any>, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.SimpleGenerator<any, any>>;
                public apply(param0: any, param1: io.reactivex.rxjava3.core.Emitter<any>): any;
                public apply(param0: any, param1: any): any;
              }
              export class TimedReplayCallable<T> extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.observables.ConnectableObservable<any>> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.TimedReplayCallable<any>>;
                public get(): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
                public get(): any;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableInterval extends io.reactivex.rxjava3.core.Observable<java.lang.Long> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInterval>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: number, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableInterval {
              export class IntervalObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInterval.IntervalObserver>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public setResource(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableIntervalRange extends io.reactivex.rxjava3.core.Observable<java.lang.Long> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange>;
              public constructor();
              public constructor(param0: number, param1: number, param2: number, param3: number, param4: java.util.concurrent.TimeUnit, param5: io.reactivex.rxjava3.core.Scheduler);
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableIntervalRange {
              export class IntervalRangeObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.IntervalRangeObserver>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public setResource(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableJoin<TLeft, TRight, TLeftEnd, TRightEnd, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableJoin<any, any, any, any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.functions.Function<any, any>, param3: io.reactivex.rxjava3.functions.Function<any, any>, param4: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableJoin {
              export class JoinDisposable<TLeft, TRight, TLeftEnd, TRightEnd, R> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableJoin.JoinDisposable<any, any, any, any, any>>;
                public dispose(): void;
                public innerValue(param0: boolean, param1: any): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public innerError(param0: java.lang.Throwable): void;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public innerClose(param0: boolean, param1: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.LeftRightEndObserver): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public innerComplete(param0: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.LeftRightObserver): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public innerCloseError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableJust<T> extends io.reactivex.rxjava3.core.Observable<any> implements io.reactivex.rxjava3.internal.fuseable.ScalarSupplier<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableJust<any>>;
              public constructor();
              public get(): any;
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: any);
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableLastMaybe<T> extends io.reactivex.rxjava3.core.Maybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableLastMaybe {
              export class LastObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe.LastObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableLastSingle<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: any);
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableLastSingle {
              export class LastObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle.LastObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableLift<R, T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableLift<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableOperator<any, any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableMap<T, U> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMap<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableMap {
              export class MapObserver<T, U> extends io.reactivex.rxjava3.internal.observers.BasicFuseableObserver<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMap.MapObserver<any, any>>;
                public onError(param0: java.lang.Throwable): void;
                public requestFusion(param0: number): number;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public poll(): any;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableMapNotification<T, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, io.reactivex.rxjava3.core.ObservableSource<any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Function<any, any>, param3: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableMapNotification {
              export class MapNotificationObserver<T, R> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification.MapNotificationObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableMaterialize<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, io.reactivex.rxjava3.core.Notification<any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMaterialize<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableMaterialize {
              export class MaterializeObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMaterialize.MaterializeObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableMergeWithCompletable<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletable<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: io.reactivex.rxjava3.core.CompletableSource);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableMergeWithCompletable {
              export class MergeWithObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletable.MergeWithObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module MergeWithObserver {
                export class OtherObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.CompletableObserver {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletable.MergeWithObserver.OtherObserver>;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableMergeWithMaybe<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: io.reactivex.rxjava3.core.MaybeSource<any>);
            }
            export module ObservableMergeWithMaybe {
              export class MergeWithObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe.MergeWithObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module MergeWithObserver {
                export class OtherObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe.MergeWithObserver.OtherObserver<any>>;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public onSuccess(param0: any): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableMergeWithSingle<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableMergeWithSingle {
              export class MergeWithObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle.MergeWithObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module MergeWithObserver {
                export class OtherObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle.MergeWithObserver.OtherObserver<any>>;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public onSuccess(param0: any): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableNever extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableNever>;
              public static INSTANCE: io.reactivex.rxjava3.core.Observable<any>;
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableObserveOn<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.Scheduler, param2: boolean, param3: number);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableObserveOn {
              export class ObserveOnObserver<T> extends io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn.ObserveOnObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public dispose(): void;
                public requestFusion(param0: number): number;
                public clear(): void;
                public isDisposed(): boolean;
                public isEmpty(): boolean;
                public onComplete(): void;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public poll(): any;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableOnErrorComplete<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorComplete<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableOnErrorComplete {
              export class OnErrorCompleteObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorComplete.OnErrorCompleteObserver<any>>;
                public constructor(param0: io.reactivex.rxjava3.core.Observer<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableOnErrorNext<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableOnErrorNext {
              export class OnErrorNextObserver<T> extends io.reactivex.rxjava3.core.Observer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext.OnErrorNextObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableOnErrorReturn<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturn<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableOnErrorReturn {
              export class OnErrorReturnObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturn.OnErrorReturnObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservablePublish<T> extends io.reactivex.rxjava3.observables.ConnectableObservable<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamObservableSource<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservablePublish<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public connect(param0: io.reactivex.rxjava3.functions.Consumer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public connect(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public reset(): void;
            }
            export module ObservablePublish {
              export class InnerDisposable<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.PublishConnection<any>> implements io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.InnerDisposable<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              }
              export class PublishConnection<T> extends java.util.concurrent.atomic.AtomicReference<androidNative.Array<io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.InnerDisposable<any>>> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.PublishConnection<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public remove(param0: io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.InnerDisposable<any>): void;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public add(param0: io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.InnerDisposable<any>): boolean;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservablePublishSelector<T, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservablePublishSelector {
              export class SourceObserver<T> extends io.reactivex.rxjava3.core.Observer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
              }
              export class TargetObserver<R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.TargetObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableRange extends io.reactivex.rxjava3.core.Observable<java.lang.Integer> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRange>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: number, param1: number);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableRange {
              export class RangeDisposable extends io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable<java.lang.Integer> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRange.RangeDisposable>;
                public dispose(): void;
                public clear(): void;
                public requestFusion(param0: number): number;
                public isDisposed(): boolean;
                public poll(): java.lang.Integer;
                public isEmpty(): boolean;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableRangeLong extends io.reactivex.rxjava3.core.Observable<java.lang.Long> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: number, param1: number);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableRangeLong {
              export class RangeDisposable extends io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable<java.lang.Long> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong.RangeDisposable>;
                public dispose(): void;
                public clear(): void;
                public requestFusion(param0: number): number;
                public isDisposed(): boolean;
                public isEmpty(): boolean;
                public poll(): java.lang.Long;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableReduceMaybe<T> extends io.reactivex.rxjava3.core.Maybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableReduceMaybe {
              export class ReduceObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe.ReduceObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableReduceSeedSingle<T, R> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: any, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
            }
            export module ObservableReduceSeedSingle {
              export class ReduceSeedObserver<T, R> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle.ReduceSeedObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableReduceWithSingle<T, R> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Supplier<any>, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableRefCount<T> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.observables.ConnectableObservable<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.observables.ConnectableObservable<any>, param1: number, param2: number, param3: java.util.concurrent.TimeUnit, param4: io.reactivex.rxjava3.core.Scheduler);
            }
            export module ObservableRefCount {
              export class RefConnection extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection>;
                public accept(param0: any): void;
                public accept(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public run(): void;
              }
              export class RefCountObserver<T> extends java.util.concurrent.atomic.AtomicBoolean {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefCountObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableRepeat<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRepeat<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: number);
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableRepeat {
              export class RepeatObserver<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.Observer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRepeat.RepeatObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableRepeatUntil<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: io.reactivex.rxjava3.functions.BooleanSupplier);
            }
            export module ObservableRepeatUntil {
              export class RepeatUntilObserver<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.Observer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil.RepeatUntilObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableRepeatWhen<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableRepeatWhen {
              export class RepeatWhenObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen.RepeatWhenObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module RepeatWhenObserver {
                export class InnerRepeatObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen.RepeatWhenObserver.InnerRepeatObserver>;
                  public onNext(param0: any): void;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableReplay<T> extends io.reactivex.rxjava3.observables.ConnectableObservable<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamObservableSource<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay<any>>;
              public static create(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: boolean): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
              public static multicastSelector(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
              public static create(param0: io.reactivex.rxjava3.core.ObservableOnSubscribe<any>): io.reactivex.rxjava3.core.Observable<any>;
              public static create(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: number, param5: boolean): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
              public reset(): void;
              public static create(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number, param2: boolean): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
              public static createFrom(param0: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public connect(param0: io.reactivex.rxjava3.functions.Consumer<any>): void;
              public connect(): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableReplay {
              export abstract class BoundedReplayBuffer<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.Node> implements io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBuffer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.BoundedReplayBuffer<any>>;
                public next(param0: any): void;
                public error(param0: java.lang.Throwable): void;
                public complete(): void;
                public replay(param0: io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.InnerDisposable<any>): void;
              }
              export class BufferSupplier<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.BufferSupplier<any>>;
                /**
                 * Constructs a new instance of the io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$BufferSupplier interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                 */
                public constructor(implementation: { call(): io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBuffer<T> });
                public constructor();
                public call(): io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBuffer<T>;
              }
              export class DisposeConsumer<R> extends io.reactivex.rxjava3.functions.Consumer<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.DisposeConsumer<any>>;
                public accept(param0: any): void;
                public accept(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              }
              export class InnerDisposable<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.InnerDisposable<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              }
              export class MulticastReplay<R, U> extends io.reactivex.rxjava3.core.Observable<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.MulticastReplay<any, any>>;
                public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              }
              export class Node extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.Node> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.Node>;
              }
              export class ReplayBuffer<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBuffer<any>>;
                /**
                 * Constructs a new instance of the io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplayBuffer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                 */
                public constructor(implementation: { next(param0: T): void; error(param0: java.lang.Throwable): void; complete(): void; replay(param0: io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.InnerDisposable<T>): void });
                public constructor();
                public error(param0: java.lang.Throwable): void;
                public complete(): void;
                public replay(param0: io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.InnerDisposable<T>): void;
                public next(param0: T): void;
              }
              export class ReplayBufferSupplier<T> extends io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.BufferSupplier<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier<any>>;
                public call(): io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBuffer<any>;
              }
              export class ReplayObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class ReplaySource<T> extends io.reactivex.rxjava3.core.ObservableSource<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplaySource<any>>;
                public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              }
              export class ScheduledReplaySupplier<T> extends io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.BufferSupplier<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ScheduledReplaySupplier<any>>;
                public call(): io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBuffer<any>;
              }
              export class SizeAndTimeBoundReplayBuffer<T> extends io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.BoundedReplayBuffer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.SizeAndTimeBoundReplayBuffer<any>>;
                public next(param0: any): void;
                public error(param0: java.lang.Throwable): void;
                public complete(): void;
                public replay(param0: io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.InnerDisposable<any>): void;
              }
              export class SizeBoundReplayBuffer<T> extends io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.BoundedReplayBuffer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.SizeBoundReplayBuffer<any>>;
                public next(param0: any): void;
                public error(param0: java.lang.Throwable): void;
                public complete(): void;
                public replay(param0: io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.InnerDisposable<any>): void;
              }
              export class UnBoundedFactory extends io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.BufferSupplier<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.UnBoundedFactory>;
                public call(): io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBuffer<any>;
              }
              export class UnboundedReplayBuffer<T> extends java.util.ArrayList<any> implements io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBuffer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.UnboundedReplayBuffer<any>>;
                public next(param0: any): void;
                public error(param0: java.lang.Throwable): void;
                public complete(): void;
                public replay(param0: io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.InnerDisposable<any>): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableRetryBiPredicate<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: io.reactivex.rxjava3.functions.BiPredicate<any, any>);
            }
            export module ObservableRetryBiPredicate {
              export class RetryBiObserver<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.Observer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableRetryPredicate<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: number, param2: io.reactivex.rxjava3.functions.Predicate<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableRetryPredicate {
              export class RepeatObserver<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.Observer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableRetryWhen<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableRetryWhen {
              export class RepeatWhenObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen.RepeatWhenObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module RepeatWhenObserver {
                export class InnerRepeatObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen.RepeatWhenObserver.InnerRepeatObserver>;
                  public onNext(param0: any): void;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableSampleTimed<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: boolean);
            }
            export module ObservableSampleTimed {
              export class SampleTimedEmitLast<T> extends io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed.SampleTimedObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed.SampleTimedEmitLast<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class SampleTimedNoLast<T> extends io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed.SampleTimedObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed.SampleTimedNoLast<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export abstract class SampleTimedObserver<T> extends java.util.concurrent.atomic.AtomicReference<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed.SampleTimedObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableSampleWithObservable<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: boolean);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableSampleWithObservable {
              export class SampleMainEmitLast<T> extends io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable.SampleMainObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable.SampleMainEmitLast<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class SampleMainNoLast<T> extends io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable.SampleMainObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable.SampleMainNoLast<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export abstract class SampleMainObserver<T> extends java.util.concurrent.atomic.AtomicReference<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable.SampleMainObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public error(param0: java.lang.Throwable): void;
                public isDisposed(): boolean;
                public complete(): void;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class SamplerObserver<T> extends io.reactivex.rxjava3.core.Observer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable.SamplerObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableScalarXMap {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap>;
              public static tryScalarXMapSubscribe(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.Observer<any>, param2: io.reactivex.rxjava3.functions.Function<any, any>): boolean;
              public static scalarXMap(param0: any, param1: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
            }
            export module ObservableScalarXMap {
              export class ScalarDisposable<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap.ScalarDisposable<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public offer(param0: any): boolean;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public poll(): any;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public clear(): void;
                public requestFusion(param0: number): number;
                public offer(param0: any, param1: any): boolean;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public isEmpty(): boolean;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public constructor(param0: io.reactivex.rxjava3.core.Observer<any>, param1: any);
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export class ScalarXMapObservable<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap.ScalarXMapObservable<any, any>>;
                public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableScan<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableScan<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableScan {
              export class ScanObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableScanSeed<T, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Supplier<any>, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableScanSeed {
              export class ScanSeedObserver<T, R> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed.ScanSeedObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableSequenceEqual<T> extends io.reactivex.rxjava3.core.Observable<java.lang.Boolean> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.functions.BiPredicate<any, any>, param3: number);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableSequenceEqual {
              export class EqualCoordinator<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual.EqualCoordinator<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              }
              export class EqualObserver<T> extends io.reactivex.rxjava3.core.Observer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual.EqualObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableSequenceEqualSingle<T> extends io.reactivex.rxjava3.core.Single<java.lang.Boolean> implements io.reactivex.rxjava3.internal.fuseable.FuseToObservable<java.lang.Boolean> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public fuseToObservable(): io.reactivex.rxjava3.core.Observable<java.lang.Boolean>;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.functions.BiPredicate<any, any>, param3: number);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public fuseToObservable(): io.reactivex.rxjava3.core.Observable<any>;
            }
            export module ObservableSequenceEqualSingle {
              export class EqualCoordinator<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle.EqualCoordinator<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              }
              export class EqualObserver<T> extends io.reactivex.rxjava3.core.Observer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle.EqualObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableSerialized<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSerialized<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
              public constructor(param0: io.reactivex.rxjava3.core.Observable<any>);
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableSingleMaybe<T> extends io.reactivex.rxjava3.core.Maybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>);
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableSingleMaybe {
              export class SingleElementObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe.SingleElementObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableSingleSingle<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: any);
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableSingleSingle {
              export class SingleElementObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle.SingleElementObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableSkip<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSkip<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number);
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableSkip {
              export class SkipObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSkip.SkipObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableSkipLast<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLast<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number);
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableSkipLast {
              export class SkipLastObserver<T> extends java.util.ArrayDeque<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLast.SkipLastObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableSkipLastTimed<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimed<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: number, param5: boolean);
            }
            export module ObservableSkipLastTimed {
              export class SkipLastTimedObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimed.SkipLastTimedObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableSkipUntil<T, U> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>);
            }
            export module ObservableSkipUntil {
              export class SkipUntil extends io.reactivex.rxjava3.core.Observer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil.SkipUntil>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
              }
              export class SkipUntilObserver<T> extends io.reactivex.rxjava3.core.Observer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil.SkipUntilObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableSkipWhile<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhile<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableSkipWhile {
              export class SkipWhileObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhile.SkipWhileObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableSubscribeOn<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.Scheduler);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableSubscribeOn {
              export class SubscribeOnObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn.SubscribeOnObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class SubscribeTask {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn.SubscribeTask>;
                public run(): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableSwitchIfEmpty<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>);
            }
            export module ObservableSwitchIfEmpty {
              export class SwitchIfEmptyObserver<T> extends io.reactivex.rxjava3.core.Observer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty.SwitchIfEmptyObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableSwitchMap<T, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number, param3: boolean);
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableSwitchMap {
              export class SwitchMapInnerObserver<T, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver<any, any>>;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
              }
              export class SwitchMapObserver<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableTake<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTake<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number);
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableTake {
              export class TakeObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTake.TakeObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableTakeLast<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number);
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableTakeLast {
              export class TakeLastObserver<T> extends java.util.ArrayDeque<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast.TakeLastObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableTakeLastOne<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableTakeLastOne {
              export class TakeLastOneObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne.TakeLastOneObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableTakeLastTimed<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimed<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number, param2: number, param3: java.util.concurrent.TimeUnit, param4: io.reactivex.rxjava3.core.Scheduler, param5: number, param6: boolean);
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableTakeLastTimed {
              export class TakeLastTimedObserver<T> extends java.util.concurrent.atomic.AtomicBoolean {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimed.TakeLastTimedObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableTakeUntil<T, U> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>);
            }
            export module ObservableTakeUntil {
              export class TakeUntilMainObserver<T, U> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module TakeUntilMainObserver {
                export class OtherObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver>;
                  public onNext(param0: any): void;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableTakeUntilPredicate<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableTakeUntilPredicate {
              export class TakeUntilPredicateObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableTakeWhile<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableTakeWhile {
              export class TakeWhileObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile.TakeWhileObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableThrottleFirstTimed<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableThrottleFirstTimed {
              export class DebounceTimedObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableThrottleLatest<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: boolean);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableThrottleLatest {
              export class ThrottleLatestObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest.ThrottleLatestObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableTimeInterval<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, io.reactivex.rxjava3.schedulers.Timed<any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableTimeInterval {
              export class TimeIntervalObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval.TimeIntervalObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableTimeout<T, U, V> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout<any, any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.functions.Function<any, any>, param3: io.reactivex.rxjava3.core.ObservableSource<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableTimeout {
              export class TimeoutConsumer extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout.TimeoutConsumer>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class TimeoutFallbackObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout.TimeoutFallbackObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onTimeout(param0: number): void;
                public onTimeoutError(param0: number, param1: java.lang.Throwable): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class TimeoutObserver<T> extends java.util.concurrent.atomic.AtomicLong {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout.TimeoutObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onTimeout(param0: number): void;
                public onTimeoutError(param0: number, param1: java.lang.Throwable): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class TimeoutSelectorSupport extends io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutSupport {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout.TimeoutSelectorSupport>;
                /**
                 * Constructs a new instance of the io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutSelectorSupport interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                 */
                public constructor(implementation: { onTimeoutError(param0: number, param1: java.lang.Throwable): void; onTimeout(param0: number): void });
                public constructor();
                public onTimeout(param0: number): void;
                public onTimeoutError(param0: number, param1: java.lang.Throwable): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableTimeoutTimed<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: io.reactivex.rxjava3.core.ObservableSource<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableTimeoutTimed {
              export class FallbackObserver<T> extends io.reactivex.rxjava3.core.Observer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
              }
              export class TimeoutFallbackObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutFallbackObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onTimeout(param0: number): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class TimeoutObserver<T> extends java.util.concurrent.atomic.AtomicLong {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onTimeout(param0: number): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class TimeoutSupport {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutSupport>;
                /**
                 * Constructs a new instance of the io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$TimeoutSupport interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                 */
                public constructor(implementation: { onTimeout(param0: number): void });
                public constructor();
                public onTimeout(param0: number): void;
              }
              export class TimeoutTask {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutTask>;
                public run(): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableTimer extends io.reactivex.rxjava3.core.Observable<java.lang.Long> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimer>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableTimer {
              export class TimerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimer.TimerObserver>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public setResource(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableToList<T, U> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableToList<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableToList {
              export class ToListObserver<T, U> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableToList.ToListObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableToListSingle<T, U> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.internal.fuseable.FuseToObservable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number);
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public fuseToObservable(): io.reactivex.rxjava3.core.Observable<any>;
            }
            export module ObservableToListSingle {
              export class ToListObserver<T, U> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle.ToListObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableUnsubscribeOn<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.Scheduler);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableUnsubscribeOn {
              export class UnsubscribeObserver<T> extends java.util.concurrent.atomic.AtomicBoolean {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module UnsubscribeObserver {
                export class DisposeTask {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask>;
                  public run(): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableUsing<T, D> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableUsing<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public constructor(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Consumer<any>, param3: boolean);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableUsing {
              export class UsingObserver<T, D> extends java.util.concurrent.atomic.AtomicBoolean {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableWindow<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, io.reactivex.rxjava3.core.Observable<any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindow<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: number, param2: number, param3: number);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableWindow {
              export class WindowExactObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindow.WindowExactObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class WindowSkipObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindow.WindowSkipObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableWindowBoundary<T, B> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, io.reactivex.rxjava3.core.Observable<any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: number);
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableWindowBoundary {
              export class WindowBoundaryInnerObserver<T, B> extends io.reactivex.rxjava3.observers.DisposableObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryInnerObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class WindowBoundaryMainObserver<T, B> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryMainObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableWindowBoundarySelector<T, B, V> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, io.reactivex.rxjava3.core.Observable<any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector<any, any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>, param2: io.reactivex.rxjava3.functions.Function<any, any>, param3: number);
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableWindowBoundarySelector {
              export class WindowBoundaryMainObserver<T, B, V> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector.WindowBoundaryMainObserver<any, any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module WindowBoundaryMainObserver {
                export class WindowEndObserverIntercept<T, V> extends io.reactivex.rxjava3.core.Observable<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector.WindowBoundaryMainObserver.WindowEndObserverIntercept<any, any>>;
                  public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                  public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Observable<any>;
                  public onError(param0: java.lang.Throwable): void;
                  public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                  public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                  public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                  public isDisposed(): boolean;
                  public onNext(param0: any): void;
                  public onComplete(): void;
                  public dispose(): void;
                  public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                  public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                  public static empty(): io.reactivex.rxjava3.core.Observable<any>;
                  public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.core.Observable<any>;
                  public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                  public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                  public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                  public static fromFuture(param0: java.util.concurrent.Future<any>, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
                  public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                  public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.core.Observable<any>;
                  public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                }
                export class WindowStartItem<B> extends java.lang.Object {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector.WindowBoundaryMainObserver.WindowStartItem<any>>;
                }
                export class WindowStartObserver<B> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector.WindowBoundaryMainObserver.WindowStartObserver<any>>;
                  public onNext(param0: any): void;
                  public onComplete(): void;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableWindowSubscribeIntercept<T> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowSubscribeIntercept<any>>;
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableWindowTimed<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, io.reactivex.rxjava3.core.Observable<any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: number, param2: number, param3: java.util.concurrent.TimeUnit, param4: io.reactivex.rxjava3.core.Scheduler, param5: number, param6: number, param7: boolean);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableWindowTimed {
              export abstract class AbstractWindowObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.AbstractWindowObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class WindowExactBoundedObserver<T> extends io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.AbstractWindowObserver<any> implements java.lang.Runnable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.WindowExactBoundedObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module WindowExactBoundedObserver {
                export class WindowBoundaryRunnable {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.WindowExactBoundedObserver.WindowBoundaryRunnable>;
                  public run(): void;
                }
              }
              export class WindowExactUnboundedObserver<T> extends io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.AbstractWindowObserver<any> implements java.lang.Runnable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.WindowExactUnboundedObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module WindowExactUnboundedObserver {
                export class WindowRunnable {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.WindowExactUnboundedObserver.WindowRunnable>;
                  public run(): void;
                }
              }
              export class WindowSkipObserver<T> extends io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.AbstractWindowObserver<any> implements java.lang.Runnable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.WindowSkipObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export module WindowSkipObserver {
                export class WindowBoundaryRunnable {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.WindowSkipObserver.WindowBoundaryRunnable>;
                  public run(): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableWithLatestFrom<T, U, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom<any, any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, param2: io.reactivex.rxjava3.core.ObservableSource<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
            }
            export module ObservableWithLatestFrom {
              export class WithLatestFromObserver<T, U, R> extends java.util.concurrent.atomic.AtomicReference<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom.WithLatestFromObserver<any, any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public otherError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public setOther(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class WithLatestFromOtherObserver extends io.reactivex.rxjava3.core.Observer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom.WithLatestFromOtherObserver>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableWithLatestFromMany<T, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: java.lang.Iterable<any>, param2: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
              public constructor(param0: io.reactivex.rxjava3.core.ObservableSource<any>, param1: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>, param2: io.reactivex.rxjava3.functions.Function<any, any>);
            }
            export module ObservableWithLatestFromMany {
              export class SingletonArrayFunc extends io.reactivex.rxjava3.functions.Function<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany.SingletonArrayFunc>;
                public apply(param0: any): any;
              }
              export class WithLatestFromObserver<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany.WithLatestFromObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
              export class WithLatestInnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany.WithLatestInnerObserver>;
                public onError(param0: java.lang.Throwable): void;
                public dispose(): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableZip<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableZip<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public constructor(param0: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>, param1: java.lang.Iterable<any>, param2: io.reactivex.rxjava3.functions.Function<any, any>, param3: number, param4: boolean);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableZip {
              export class ZipCoordinator<T, R> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableZip.ZipCoordinator<any, any>>;
                public dispose(): void;
                public subscribe(param0: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>, param1: number): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public drain(): void;
              }
              export class ZipObserver<T, R> extends io.reactivex.rxjava3.core.Observer<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableZip.ZipObserver<any, any>>;
                public onError(param0: java.lang.Throwable): void;
                public dispose(): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObservableZipIterable<T, U, V> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable<any, any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Observable<any>, param1: java.lang.Iterable<any>, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module ObservableZipIterable {
              export class ZipIterableObserver<T, U, V> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable.ZipIterableObserver<any, any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module observable {
            export class ObserverResourceWrapper<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObserverResourceWrapper<any>>;
              public onComplete(): void;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Observer<any>);
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public setResource(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
              public onNext(param0: any): void;
              public onError(param0: java.lang.Throwable): void;
              public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module parallel {
            export class ParallelCollect<T, C> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, param1: io.reactivex.rxjava3.functions.Supplier<any>, param2: io.reactivex.rxjava3.functions.BiConsumer<any, any>);
              public parallelism(): number;
              public subscribe(param0: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
            }
            export module ParallelCollect {
              export class ParallelCollectSubscriber<T, C> extends io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriber<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect.ParallelCollectSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module parallel {
            export class ParallelConcatMap<T, R> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelConcatMap<any, any>>;
              public constructor();
              public parallelism(): number;
              public constructor(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number, param3: io.reactivex.rxjava3.internal.util.ErrorMode);
              public subscribe(param0: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module parallel {
            export class ParallelDoOnNextTry<T> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, io.reactivex.rxjava3.parallel.ParallelFailureHandling>);
              public parallelism(): number;
              public subscribe(param0: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
            }
            export module ParallelDoOnNextTry {
              export class ParallelDoOnNextConditionalSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry.ParallelDoOnNextConditionalSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
                public tryOnNext(param0: T): boolean;
              }
              export class ParallelDoOnNextSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry.ParallelDoOnNextSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
                public tryOnNext(param0: T): boolean;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module parallel {
            export class ParallelFilter<T> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
              public parallelism(): number;
              public subscribe(param0: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
            }
            export module ParallelFilter {
              export abstract class BaseFilterSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public cancel(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
                public tryOnNext(param0: T): boolean;
              }
              export class ParallelFilterConditionalSubscriber<T> extends io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public tryOnNext(param0: any): boolean;
              }
              export class ParallelFilterSubscriber<T> extends io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public tryOnNext(param0: any): boolean;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module parallel {
            export class ParallelFilterTry<T> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry<any>>;
              public constructor();
              public parallelism(): number;
              public subscribe(param0: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
              public constructor(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, io.reactivex.rxjava3.parallel.ParallelFailureHandling>);
            }
            export module ParallelFilterTry {
              export abstract class BaseFilterSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public cancel(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
                public tryOnNext(param0: T): boolean;
              }
              export class ParallelFilterConditionalSubscriber<T> extends io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public tryOnNext(param0: any): boolean;
              }
              export class ParallelFilterSubscriber<T> extends io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public tryOnNext(param0: any): boolean;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module parallel {
            export class ParallelFlatMap<T, R> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap<any, any>>;
              public constructor();
              public parallelism(): number;
              public subscribe(param0: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
              public constructor(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: boolean, param3: number, param4: number);
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module parallel {
            export class ParallelFlatMapIterable<T, R> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMapIterable<any, any>>;
              public constructor();
              public parallelism(): number;
              public constructor(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: number);
              public subscribe(param0: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module parallel {
            export class ParallelFromArray<T> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFromArray<any>>;
              public constructor();
              public parallelism(): number;
              public constructor(param0: androidNative.Array<org.reactivestreams.Publisher<any>>);
              public subscribe(param0: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module parallel {
            export class ParallelFromPublisher<T> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher<any>>;
              public constructor();
              public constructor(param0: org.reactivestreams.Publisher<any>, param1: number, param2: number);
              public parallelism(): number;
              public subscribe(param0: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
            }
            export module ParallelFromPublisher {
              export class ParallelDispatcher<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
              export module ParallelDispatcher {
                export class RailSubscription {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription>;
                  public cancel(): void;
                  public request(param0: number): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module parallel {
            export class ParallelJoin<T> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin<any>>;
              public constructor();
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, param1: number, param2: boolean);
            }
            export module ParallelJoin {
              export class JoinInnerSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinInnerSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): boolean;
                public onComplete(): void;
                public request(param0: number): void;
                public requestOne(): void;
                public onNext(param0: any): void;
              }
              export class JoinSubscription<T> extends io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscription<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onNext(param0: io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinInnerSubscriber<any>, param1: any): void;
                public onComplete(): void;
              }
              export abstract class JoinSubscriptionBase<T> extends java.util.concurrent.atomic.AtomicInteger implements org.reactivestreams.Subscription {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase<any>>;
                public cancel(): void;
                public request(param0: number): void;
              }
              export class JoinSubscriptionDelayError<T> extends io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionDelayError<any>>;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module parallel {
            export class ParallelMap<T, R> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelMap<any, any>>;
              public constructor();
              public parallelism(): number;
              public constructor(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribe(param0: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
            }
            export module ParallelMap {
              export class ParallelMapConditionalSubscriber<T, R> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelMap.ParallelMapConditionalSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
                public tryOnNext(param0: T): boolean;
              }
              export class ParallelMapSubscriber<T, R> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelMap.ParallelMapSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module parallel {
            export class ParallelMapTry<T, R> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry<any, any>>;
              public constructor();
              public parallelism(): number;
              public constructor(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, io.reactivex.rxjava3.parallel.ParallelFailureHandling>);
              public subscribe(param0: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
            }
            export module ParallelMapTry {
              export class ParallelMapTryConditionalSubscriber<T, R> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry.ParallelMapTryConditionalSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
                public tryOnNext(param0: T): boolean;
              }
              export class ParallelMapTrySubscriber<T, R> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry.ParallelMapTrySubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
                public tryOnNext(param0: T): boolean;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module parallel {
            export class ParallelPeek<T> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Consumer<any>, param3: io.reactivex.rxjava3.functions.Consumer<any>, param4: io.reactivex.rxjava3.functions.Action, param5: io.reactivex.rxjava3.functions.Action, param6: io.reactivex.rxjava3.functions.Consumer<any>, param7: io.reactivex.rxjava3.functions.LongConsumer, param8: io.reactivex.rxjava3.functions.Action);
              public parallelism(): number;
              public subscribe(param0: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
            }
            export module ParallelPeek {
              export class ParallelPeekSubscriber<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek.ParallelPeekSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: T): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module parallel {
            export class ParallelReduce<T, R> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelReduce<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, param1: io.reactivex.rxjava3.functions.Supplier<any>, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
              public parallelism(): number;
              public subscribe(param0: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
            }
            export module ParallelReduce {
              export class ParallelReduceSubscriber<T, R> extends io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriber<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelReduce.ParallelReduceSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module parallel {
            export class ParallelReduceFull<T> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull<any>>;
              public constructor();
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
            }
            export module ParallelReduceFull {
              export class ParallelReduceFullInnerSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullInnerSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
              export class ParallelReduceFullMainSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber<any>>;
                public cancel(): void;
              }
              export class SlotPair<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.SlotPair<any>>;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module parallel {
            export class ParallelRunOn<T> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, param1: io.reactivex.rxjava3.core.Scheduler, param2: number);
              public parallelism(): number;
              public subscribe(param0: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
            }
            export module ParallelRunOn {
              export abstract class BaseRunOnSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onNext(param0: any): void;
              }
              export class MultiWorkerCallback extends io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport.WorkerCallback {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.MultiWorkerCallback>;
                public onWorker(param0: number, param1: io.reactivex.rxjava3.core.Scheduler.Worker): void;
              }
              export class RunOnConditionalSubscriber<T> extends io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public run(): void;
              }
              export class RunOnSubscriber<T> extends io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public run(): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module parallel {
            export class ParallelSortedJoin<T> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<java.util.List<any>>, param1: java.util.Comparator<any>);
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
            }
            export module ParallelSortedJoin {
              export class SortedJoinInnerSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<java.util.List<any>> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin.SortedJoinInnerSubscriber<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onNext(param0: java.util.List<any>): void;
              }
              export class SortedJoinSubscription<T> extends java.util.concurrent.atomic.AtomicInteger implements org.reactivestreams.Subscription {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin.SortedJoinSubscription<any>>;
                public cancel(): void;
                public request(param0: number): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleAmb<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleAmb<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: androidNative.Array<io.reactivex.rxjava3.core.SingleSource<any>>, param1: java.lang.Iterable<any>);
            }
            export module SingleAmb {
              export class AmbSingleObserver<T> extends io.reactivex.rxjava3.core.SingleObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleCache<T> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.core.SingleObserver<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleCache<any>>;
              public constructor();
              public onError(param0: java.lang.Throwable): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public onSuccess(param0: any): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleCache {
              export class CacheDisposable<T> extends java.util.concurrent.atomic.AtomicBoolean implements io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleCache.CacheDisposable<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleContains<T> extends io.reactivex.rxjava3.core.Single<java.lang.Boolean> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleContains<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: any, param2: io.reactivex.rxjava3.functions.BiPredicate<any, any>);
            }
            export module SingleContains {
              export class ContainsSingleObserver extends io.reactivex.rxjava3.core.SingleObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleContains.ContainsSingleObserver>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleCreate<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleCreate<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleOnSubscribe<any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleCreate {
              export class Emitter<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter<any>>;
                public dispose(): void;
                public toString(): string;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                public onError(param0: java.lang.Throwable): void;
                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public tryOnError(param0: java.lang.Throwable): boolean;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleDefer<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDefer<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public constructor(param0: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleDelay<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDelay<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: boolean);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleDelay {
              export class Delay extends io.reactivex.rxjava3.core.SingleObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDelay.Delay>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
              export module Delay {
                export class OnError {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDelay.Delay.OnError>;
                  public run(): void;
                }
                export class OnSuccess {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDelay.Delay.OnSuccess>;
                  public run(): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleDelayWithCompletable<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.CompletableSource);
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleDelayWithCompletable {
              export class OtherObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable.OtherObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleDelayWithObservable<T, U> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.ObservableSource<any>);
            }
            export module SingleDelayWithObservable {
              export class OtherSubscriber<T, U> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable.OtherSubscriber<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleDelayWithPublisher<T, U> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: org.reactivestreams.Publisher<any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleDelayWithPublisher {
              export class OtherSubscriber<T, U> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher.OtherSubscriber<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleDelayWithSingle<T, U> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDelayWithSingle<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleDelayWithSingle {
              export class OtherObserver<T, U> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDelayWithSingle.OtherObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleDematerialize<T, R> extends io.reactivex.rxjava3.core.Maybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDematerialize<any, any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Single<any>, param1: io.reactivex.rxjava3.functions.Function<any, io.reactivex.rxjava3.core.Notification<any>>);
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleDematerialize {
              export class DematerializeObserver<T, R> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleDetach<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDetach<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleDetach {
              export class DetachSingleObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDetach.DetachSingleObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleDoAfterSuccess<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccess<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleDoAfterSuccess {
              export class DoAfterObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccess.DoAfterObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleDoAfterTerminate<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminate<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.functions.Action);
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleDoAfterTerminate {
              export class DoAfterTerminateObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminate.DoAfterTerminateObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleDoFinally<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoFinally<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.functions.Action);
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleDoFinally {
              export class DoFinallyObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoFinally.DoFinallyObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleDoOnDispose<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnDispose<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.functions.Action);
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleDoOnDispose {
              export class DoOnDisposeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.functions.Action> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnDispose.DoOnDisposeObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleDoOnError<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnError<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleDoOnError {
              export class DoOnError extends io.reactivex.rxjava3.core.SingleObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleDoOnEvent<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.functions.BiConsumer<any, any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleDoOnEvent {
              export class DoOnEvent extends io.reactivex.rxjava3.core.SingleObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleDoOnLifecycle<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnLifecycle<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.Single<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleDoOnLifecycle {
              export class SingleLifecycleObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnLifecycle.SingleLifecycleObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleDoOnSubscribe<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnSubscribe<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleDoOnSubscribe {
              export class DoOnSubscribeSingleObserver<T> extends io.reactivex.rxjava3.core.SingleObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnSubscribe.DoOnSubscribeSingleObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleDoOnSuccess<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleDoOnSuccess {
              export class DoOnSuccess extends io.reactivex.rxjava3.core.SingleObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleDoOnTerminate<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate<any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.functions.Action);
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleDoOnTerminate {
              export class DoOnTerminate extends io.reactivex.rxjava3.core.SingleObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleEquals<T> extends io.reactivex.rxjava3.core.Single<java.lang.Boolean> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleEquals<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.SingleSource<any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleEquals {
              export class InnerObserver<T> extends io.reactivex.rxjava3.core.SingleObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleEquals.InnerObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleError<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleError<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public constructor(param0: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleFlatMap<T, R> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMap<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
            }
            export module SingleFlatMap {
              export class SingleFlatMapCallback<T, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMap.SingleFlatMapCallback<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export module SingleFlatMapCallback {
                export class FlatMapSingleObserver<R> extends io.reactivex.rxjava3.core.SingleObserver<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMap.SingleFlatMapCallback.FlatMapSingleObserver<any>>;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public onSuccess(param0: any): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleFlatMapBiSelector<T, U, R> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelector<any, any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
            }
            export module SingleFlatMapBiSelector {
              export class FlatMapBiMainObserver<T, U, R> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelector.FlatMapBiMainObserver<any, any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export module FlatMapBiMainObserver {
                export class InnerObserver<T, U, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelector.FlatMapBiMainObserver.InnerObserver<any, any, any>>;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public onSuccess(param0: any): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleFlatMapCompletable<T> extends io.reactivex.rxjava3.core.Completable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
            }
            export module SingleFlatMapCompletable {
              export class FlatMapCompletableObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable.FlatMapCompletableObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleFlatMapIterableFlowable<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable<any, any>>;
              public constructor();
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
            }
            export module SingleFlatMapIterableFlowable {
              export class FlatMapIterableObserver<T, R> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver<any, any>>;
                public onError(param0: java.lang.Throwable): void;
                public requestFusion(param0: number): number;
                public clear(): void;
                public cancel(): void;
                public isEmpty(): boolean;
                public request(param0: number): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public poll(): any;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleFlatMapIterableObservable<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
            }
            export module SingleFlatMapIterableObservable {
              export class FlatMapIterableObserver<T, R> extends io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable<any> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable.FlatMapIterableObserver<any, any>>;
                public onError(param0: java.lang.Throwable): void;
                public dispose(): void;
                public requestFusion(param0: number): number;
                public clear(): void;
                public isDisposed(): boolean;
                public isEmpty(): boolean;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public poll(): any;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleFlatMapMaybe<T, R> extends io.reactivex.rxjava3.core.Maybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe<any, any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
            }
            export module SingleFlatMapMaybe {
              export class FlatMapMaybeObserver<R> extends io.reactivex.rxjava3.core.MaybeObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe.FlatMapMaybeObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public onComplete(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
              export class FlatMapSingleObserver<T, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe.FlatMapSingleObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleFlatMapNotification<T, R> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapNotification<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleFlatMapNotification {
              export class FlatMapSingleObserver<T, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapNotification.FlatMapSingleObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export module FlatMapSingleObserver {
                export class InnerObserver extends io.reactivex.rxjava3.core.SingleObserver<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapNotification.FlatMapSingleObserver.InnerObserver>;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public onSuccess(param0: any): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleFlatMapPublisher<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher<any, any>>;
              public constructor();
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
            }
            export module SingleFlatMapPublisher {
              export class SingleFlatMapPublisherObserver<S, T> extends java.util.concurrent.atomic.AtomicLong {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver<any, any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onComplete(): void;
                public request(param0: number): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleFromCallable<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFromCallable<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public constructor(param0: java.util.concurrent.Callable<any>);
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleFromPublisher<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: org.reactivestreams.Publisher<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleFromPublisher {
              export class ToSingleObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher.ToSingleObserver<any>>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public onComplete(): void;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public onNext(param0: T): void;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleFromSupplier<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFromSupplier<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public constructor(param0: io.reactivex.rxjava3.functions.Supplier<any>);
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleFromUnsafeSource<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFromUnsafeSource<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleHide<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleHide<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleHide {
              export class HideSingleObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleHide.HideSingleObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleInternalHelper {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper>;
              public static toFlowable(): io.reactivex.rxjava3.functions.Function<any, any>;
              public static iterableToFlowable(param0: java.lang.Iterable<any>): java.lang.Iterable<any>;
              public static emptyThrower(): io.reactivex.rxjava3.functions.Supplier<java.util.NoSuchElementException>;
            }
            export module SingleInternalHelper {
              export class NoSuchElementSupplier extends io.reactivex.rxjava3.functions.Supplier<java.util.NoSuchElementException> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.NoSuchElementSupplier>;
                public static INSTANCE: io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.NoSuchElementSupplier;
                public static valueOf(param0: string): io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.NoSuchElementSupplier;
                public get(): any;
                public static values(): androidNative.Array<io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.NoSuchElementSupplier>;
                public get(): java.util.NoSuchElementException;
              }
              export class ToFlowable extends io.reactivex.rxjava3.functions.Function<io.reactivex.rxjava3.core.SingleSource<any>, org.reactivestreams.Publisher> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowable>;
                public static INSTANCE: io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowable;
                public static valueOf(param0: string): io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowable;
                public apply(param0: io.reactivex.rxjava3.core.SingleSource<any>): org.reactivestreams.Publisher;
                public static values(): androidNative.Array<io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowable>;
                public apply(param0: any): any;
              }
              export class ToFlowableIterable<T> extends java.lang.Iterable<io.reactivex.rxjava3.core.Flowable<any>> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterable<any>>;
                public iterator(): java.util.Iterator<io.reactivex.rxjava3.core.Flowable<any>>;
              }
              export class ToFlowableIterator<T> extends java.util.Iterator<io.reactivex.rxjava3.core.Flowable<any>> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator<any>>;
                public next(): io.reactivex.rxjava3.core.Flowable<any>;
                public hasNext(): boolean;
                public remove(): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleJust<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleJust<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: any);
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleLift<T, R> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleLift<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.SingleOperator<any, any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleMap<T, R> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleMap<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
            }
            export module SingleMap {
              export class MapSingleObserver<T, R> extends io.reactivex.rxjava3.core.SingleObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver<any, any>>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleMaterialize<T> extends io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.core.Notification<any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleMaterialize<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Single<any>);
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleNever extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleNever>;
              public static INSTANCE: io.reactivex.rxjava3.core.Single<any>;
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleObserveOn<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleObserveOn<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.Scheduler);
            }
            export module SingleObserveOn {
              export class ObserveOnSingleObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleObserveOn.ObserveOnSingleObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleOnErrorComplete<T> extends io.reactivex.rxjava3.core.Maybe<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleOnErrorComplete<any>>;
              public constructor();
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.Single<any>, param1: io.reactivex.rxjava3.functions.Predicate<any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleOnErrorReturn<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: any);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleOnErrorReturn {
              export class OnErrorReturn extends io.reactivex.rxjava3.core.SingleObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn>;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleResumeNext<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleResumeNext<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
            }
            export module SingleResumeNext {
              export class ResumeMainSingleObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleResumeNext.ResumeMainSingleObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleSubscribeOn<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleSubscribeOn<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.Scheduler);
            }
            export module SingleSubscribeOn {
              export class SubscribeOnObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleSubscribeOn.SubscribeOnObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleTakeUntil<T, U> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: org.reactivestreams.Publisher<any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleTakeUntil {
              export class TakeUntilMainObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export class TakeUntilOtherSubscriber extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilOtherSubscriber>;
                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                public onError(param0: java.lang.Throwable): void;
                public dispose(): void;
                public onComplete(): void;
                public onNext(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleTimeInterval<T> extends io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.schedulers.Timed<any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: boolean);
            }
            export module SingleTimeInterval {
              export class TimeIntervalSingleObserver<T> extends java.lang.Object {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval.TimeIntervalSingleObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: T): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleTimeout<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleTimeout<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler, param4: io.reactivex.rxjava3.core.SingleSource<any>);
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleTimeout {
              export class TimeoutMainObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleTimeout.TimeoutMainObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
              export module TimeoutMainObserver {
                export class TimeoutFallbackObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                  public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleTimeout.TimeoutMainObserver.TimeoutFallbackObserver<any>>;
                  public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                  public onError(param0: java.lang.Throwable): void;
                  public onSuccess(param0: any): void;
                }
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleTimer extends io.reactivex.rxjava3.core.Single<java.lang.Long> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleTimer>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public constructor(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler);
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleTimer {
              export class TimerDisposable extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleTimer.TimerDisposable>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleToFlowable<T> extends io.reactivex.rxjava3.core.Flowable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleToFlowable<any>>;
              public constructor();
              public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>);
            }
            export module SingleToFlowable {
              export class SingleToFlowableObserver<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleToFlowable.SingleToFlowableObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public cancel(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleToObservable<T> extends io.reactivex.rxjava3.core.Observable<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleToObservable<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public static create(param0: io.reactivex.rxjava3.core.Observer<any>): io.reactivex.rxjava3.core.SingleObserver<any>;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>);
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public static create(param0: io.reactivex.rxjava3.core.ObservableOnSubscribe<any>): io.reactivex.rxjava3.core.Observable<any>;
            }
            export module SingleToObservable {
              export class SingleToObservableObserver<T> extends io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable<any> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleToObservable.SingleToObservableObserver<any>>;
                public onError(param0: java.lang.Throwable): void;
                public dispose(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleUnsubscribeOn<T> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn<any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: io.reactivex.rxjava3.core.SingleSource<any>, param1: io.reactivex.rxjava3.core.Scheduler);
            }
            export module SingleUnsubscribeOn {
              export class UnsubscribeOnSingleObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn.UnsubscribeOnSingleObserver<any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleUsing<T, U> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleUsing<any, any>>;
              public constructor();
              public constructor(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>, param2: io.reactivex.rxjava3.functions.Consumer<any>, param3: boolean);
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleUsing {
              export class UsingSingleObserver<T, U> extends java.util.concurrent.atomic.AtomicReference<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleUsing.UsingSingleObserver<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                public onSuccess(param0: any): void;
                public onError(param0: java.lang.Throwable): void;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleZipArray<T, R> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleZipArray<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public constructor(param0: androidNative.Array<io.reactivex.rxjava3.core.SingleSource<any>>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleZipArray {
              export class SingletonArrayFunc extends io.reactivex.rxjava3.functions.Function<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleZipArray.SingletonArrayFunc>;
                public apply(param0: any): any;
              }
              export class ZipCoordinator<T, R> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipCoordinator<any, any>>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              }
              export class ZipSingleObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver<any>>;
                public dispose(): void;
                public onError(param0: java.lang.Throwable): void;
                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                public onSuccess(param0: any): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module operators {
          export module single {
            export class SingleZipIterable<T, R> extends io.reactivex.rxjava3.core.Single<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleZipIterable<any, any>>;
              public constructor();
              public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public constructor(param0: java.lang.Iterable<any>, param1: io.reactivex.rxjava3.functions.Function<any, any>);
              public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
              public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module SingleZipIterable {
              export class SingletonArrayFunc extends io.reactivex.rxjava3.functions.Function<any, any> {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleZipIterable.SingletonArrayFunc>;
                public apply(param0: any): any;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module queue {
          export class MpscLinkedQueue<T> extends io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.queue.MpscLinkedQueue<any>>;
            public constructor();
            public offer(param0: any): boolean;
            public offer(param0: any, param1: any): boolean;
            public poll(): any;
            public isEmpty(): boolean;
            public clear(): void;
          }
          export module MpscLinkedQueue {
            export class LinkedQueueNode<E> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.internal.queue.MpscLinkedQueue.LinkedQueueNode<any>> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.queue.MpscLinkedQueue.LinkedQueueNode<any>>;
              public lpValue(): any;
              public getAndNullValue(): any;
              public lvNext(): io.reactivex.rxjava3.internal.queue.MpscLinkedQueue.LinkedQueueNode<any>;
              public soNext(param0: io.reactivex.rxjava3.internal.queue.MpscLinkedQueue.LinkedQueueNode<any>): void;
              public spValue(param0: any): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module queue {
          export class SpscArrayQueue<E> extends java.util.concurrent.atomic.AtomicReferenceArray<any> implements io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.queue.SpscArrayQueue<any>>;
            public constructor(param0: number);
            public offer(param0: any): boolean;
            public offer(param0: any, param1: any): boolean;
            public poll(): any;
            public isEmpty(): boolean;
            public clear(): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module queue {
          export class SpscLinkedArrayQueue<T> extends io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue<any>>;
            public constructor(param0: number);
            public offer(param0: any): boolean;
            public offer(param0: any, param1: any): boolean;
            public peek(): any;
            public poll(): any;
            public isEmpty(): boolean;
            public clear(): void;
            public size(): number;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module schedulers {
          export abstract class AbstractDirectTask extends java.util.concurrent.atomic.AtomicReference<java.util.concurrent.Future<any>> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask>;
            public runnable: java.lang.Runnable;
            public interruptOnCancel: boolean;
            public runner: java.lang.Thread;
            public static FINISHED: java.util.concurrent.FutureTask<java.lang.Void>;
            public static DISPOSED: java.util.concurrent.FutureTask<java.lang.Void>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public toString(): string;
            public dispose(): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public setFuture(param0: java.util.concurrent.Future<any>): void;
            public getWrappedRunnable(): java.lang.Runnable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module schedulers {
          export class ComputationScheduler extends io.reactivex.rxjava3.core.Scheduler implements io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ComputationScheduler>;
            public scheduleDirect(param0: java.lang.Runnable, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
            public constructor(param0: java.util.concurrent.ThreadFactory);
            public constructor();
            public createWorker(): io.reactivex.rxjava3.core.Scheduler.Worker;
            public shutdown(): void;
            public start(): void;
            public schedulePeriodicallyDirect(param0: java.lang.Runnable, param1: number, param2: number, param3: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
            public scheduleDirect(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public createWorkers(param0: number, param1: io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport.WorkerCallback): void;
          }
          export module ComputationScheduler {
            export class EventLoopWorker extends io.reactivex.rxjava3.core.Scheduler.Worker {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.EventLoopWorker>;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
              public schedule(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public schedule(param0: java.lang.Runnable, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            }
            export class FixedSchedulerPool extends io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.FixedSchedulerPool>;
              public getEventLoop(): io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.PoolWorker;
              public createWorkers(param0: number, param1: io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport.WorkerCallback): void;
              public shutdown(): void;
            }
            export class PoolWorker extends io.reactivex.rxjava3.internal.schedulers.NewThreadWorker {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.PoolWorker>;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module schedulers {
          export class DisposeOnCancel extends java.util.concurrent.Future<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel>;
            public isDone(): boolean;
            public isCancelled(): boolean;
            public cancel(param0: boolean): boolean;
            public get(param0: number, param1: java.util.concurrent.TimeUnit): any;
            public get(): any;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module schedulers {
          export class ExecutorScheduler extends io.reactivex.rxjava3.core.Scheduler {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler>;
            public scheduleDirect(param0: java.lang.Runnable, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
            public constructor();
            public createWorker(): io.reactivex.rxjava3.core.Scheduler.Worker;
            public constructor(param0: java.util.concurrent.Executor, param1: boolean, param2: boolean);
            public schedulePeriodicallyDirect(param0: java.lang.Runnable, param1: number, param2: number, param3: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
            public scheduleDirect(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          }
          export module ExecutorScheduler {
            export class DelayedDispose {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.DelayedDispose>;
              public run(): void;
            }
            export class DelayedRunnable extends java.util.concurrent.atomic.AtomicReference<java.lang.Runnable> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.DelayedRunnable>;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public getWrappedRunnable(): java.lang.Runnable;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public run(): void;
            }
            export class ExecutorWorker extends io.reactivex.rxjava3.core.Scheduler.Worker {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker>;
              public constructor();
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public constructor(param0: java.util.concurrent.Executor, param1: boolean, param2: boolean);
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
              public schedule(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public schedule(param0: java.lang.Runnable, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public run(): void;
            }
            export module ExecutorWorker {
              export class BooleanRunnable implements io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              }
              export class InterruptibleRunnable implements io.reactivex.rxjava3.disposables.Disposable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable>;
                public dispose(): void;
                public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                public isDisposed(): boolean;
                public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                public run(): void;
                public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              }
              export class SequentialDispose {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.SequentialDispose>;
                public run(): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module schedulers {
          export class ImmediateThinScheduler extends io.reactivex.rxjava3.core.Scheduler {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ImmediateThinScheduler>;
            public static INSTANCE: io.reactivex.rxjava3.core.Scheduler;
            public scheduleDirect(param0: java.lang.Runnable, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
            public createWorker(): io.reactivex.rxjava3.core.Scheduler.Worker;
            public schedulePeriodicallyDirect(param0: java.lang.Runnable, param1: number, param2: number, param3: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
            public scheduleDirect(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          }
          export module ImmediateThinScheduler {
            export class ImmediateThinWorker extends io.reactivex.rxjava3.core.Scheduler.Worker {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ImmediateThinScheduler.ImmediateThinWorker>;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
              public schedule(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public schedule(param0: java.lang.Runnable, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
              public schedulePeriodically(param0: java.lang.Runnable, param1: number, param2: number, param3: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module schedulers {
          export class InstantPeriodicTask extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public call(): java.lang.Void;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public dispose(): void;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module schedulers {
          export class IoScheduler extends io.reactivex.rxjava3.core.Scheduler {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.IoScheduler>;
            public static KEEP_ALIVE_TIME_DEFAULT: number;
            public constructor(param0: java.util.concurrent.ThreadFactory);
            public constructor();
            public shutdown(): void;
            public createWorker(): io.reactivex.rxjava3.core.Scheduler.Worker;
            public start(): void;
            public size(): number;
          }
          export module IoScheduler {
            export class CachedWorkerPool {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool>;
              public run(): void;
            }
            export class EventLoopWorker extends io.reactivex.rxjava3.core.Scheduler.Worker {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker>;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
              public schedule(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public schedule(param0: java.lang.Runnable, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public run(): void;
            }
            export class ThreadWorker extends io.reactivex.rxjava3.internal.schedulers.NewThreadWorker {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker>;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
              public setExpirationTime(param0: number): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public getExpirationTime(): number;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module schedulers {
          export class NewThreadScheduler extends io.reactivex.rxjava3.core.Scheduler {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler>;
            public constructor(param0: java.util.concurrent.ThreadFactory);
            public constructor();
            public createWorker(): io.reactivex.rxjava3.core.Scheduler.Worker;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module schedulers {
          export class NewThreadWorker extends io.reactivex.rxjava3.core.Scheduler.Worker implements io.reactivex.rxjava3.disposables.Disposable {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.NewThreadWorker>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public constructor();
            public schedule(param0: java.lang.Runnable, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public schedulePeriodicallyDirect(param0: java.lang.Runnable, param1: number, param2: number, param3: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public dispose(): void;
            public scheduleDirect(param0: java.lang.Runnable, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
            public constructor(param0: java.util.concurrent.ThreadFactory);
            public shutdown(): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public schedule(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public scheduleActual(param0: java.lang.Runnable, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module schedulers {
          export class NonBlockingThread {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.NonBlockingThread>;
            /**
             * Constructs a new instance of the io.reactivex.rxjava3.internal.schedulers.NonBlockingThread interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
             */
            public constructor(implementation: {});
            public constructor();
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module schedulers {
          export class RxThreadFactory {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.RxThreadFactory>;
            public constructor(param0: string, param1: number, param2: boolean);
            public constructor(param0: string, param1: number);
            public newThread(param0: java.lang.Runnable): java.lang.Thread;
            public toString(): string;
            public constructor(param0: string);
          }
          export module RxThreadFactory {
            export class RxCustomThread implements io.reactivex.rxjava3.internal.schedulers.NonBlockingThread {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.RxThreadFactory.RxCustomThread>;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module schedulers {
          export class ScheduledDirectPeriodicTask extends io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ScheduledDirectPeriodicTask>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public constructor(param0: java.lang.Runnable, param1: boolean);
            public dispose(): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public run(): void;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public getWrappedRunnable(): java.lang.Runnable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module schedulers {
          export class ScheduledDirectTask extends io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask implements java.util.concurrent.Callable<java.lang.Void> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ScheduledDirectTask>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public call(): java.lang.Void;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public constructor(param0: java.lang.Runnable, param1: boolean);
            public dispose(): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public getWrappedRunnable(): java.lang.Runnable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module schedulers {
          export class ScheduledRunnable extends java.util.concurrent.atomic.AtomicReferenceArray<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public constructor(param0: java.lang.Runnable, param1: io.reactivex.rxjava3.disposables.DisposableContainer);
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public toString(): string;
            public dispose(): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public run(): void;
            public call(): any;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public setFuture(param0: java.util.concurrent.Future<any>): void;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module schedulers {
          export class SchedulerMultiWorkerSupport {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport>;
            /**
             * Constructs a new instance of the io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
             */
            public constructor(implementation: { createWorkers(param0: number, param1: io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport.WorkerCallback): void });
            public constructor();
            public createWorkers(param0: number, param1: io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport.WorkerCallback): void;
          }
          export module SchedulerMultiWorkerSupport {
            export class WorkerCallback {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport.WorkerCallback>;
              /**
               * Constructs a new instance of the io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport$WorkerCallback interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
               */
              public constructor(implementation: { onWorker(param0: number, param1: io.reactivex.rxjava3.core.Scheduler.Worker): void });
              public constructor();
              public onWorker(param0: number, param1: io.reactivex.rxjava3.core.Scheduler.Worker): void;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module schedulers {
          export class SchedulerPoolFactory {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory>;
            public static PURGE_ENABLED: boolean;
            public static PURGE_PERIOD_SECONDS: number;
            public static shutdown(): void;
            public static create(param0: java.util.concurrent.ThreadFactory): java.util.concurrent.ScheduledExecutorService;
            public static start(): void;
          }
          export module SchedulerPoolFactory {
            export class ScheduledTask {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.ScheduledTask>;
              public run(): void;
            }
            export class SystemPropertyAccessor extends io.reactivex.rxjava3.functions.Function<string, string> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.SystemPropertyAccessor>;
              public apply(param0: any): any;
              public apply(param0: string): string;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module schedulers {
          export class SchedulerWhen extends io.reactivex.rxjava3.core.Scheduler implements io.reactivex.rxjava3.disposables.Disposable {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerWhen>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public constructor();
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public constructor(param0: io.reactivex.rxjava3.functions.Function<io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Completable>>, io.reactivex.rxjava3.core.Completable>, param1: io.reactivex.rxjava3.core.Scheduler);
            public dispose(): void;
            public createWorker(): io.reactivex.rxjava3.core.Scheduler.Worker;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
          export module SchedulerWhen {
            export class CreateWorkerFunction extends io.reactivex.rxjava3.functions.Function<io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction, io.reactivex.rxjava3.core.Completable> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.CreateWorkerFunction>;
              public apply(param0: any): any;
              public apply(param0: io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction): io.reactivex.rxjava3.core.Completable;
            }
            export module CreateWorkerFunction {
              export class WorkerCompletable extends io.reactivex.rxjava3.core.Completable {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.CreateWorkerFunction.WorkerCompletable>;
                public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
              }
            }
            export class DelayedAction extends io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.DelayedAction>;
              public callActual(param0: io.reactivex.rxjava3.core.Scheduler.Worker, param1: io.reactivex.rxjava3.core.CompletableObserver): io.reactivex.rxjava3.disposables.Disposable;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export class ImmediateAction extends io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ImmediateAction>;
              public callActual(param0: io.reactivex.rxjava3.core.Scheduler.Worker, param1: io.reactivex.rxjava3.core.CompletableObserver): io.reactivex.rxjava3.disposables.Disposable;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export class OnCompletedAction {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.OnCompletedAction>;
              public run(): void;
            }
            export class QueueWorker extends io.reactivex.rxjava3.core.Scheduler.Worker {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.QueueWorker>;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
              public schedule(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public schedule(param0: java.lang.Runnable, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            }
            export abstract class ScheduledAction extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.disposables.Disposable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction>;
              public callActual(param0: io.reactivex.rxjava3.core.Scheduler.Worker, param1: io.reactivex.rxjava3.core.CompletableObserver): io.reactivex.rxjava3.disposables.Disposable;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            }
            export class SubscribedDisposable extends io.reactivex.rxjava3.disposables.Disposable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.SubscribedDisposable>;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module schedulers {
          export class SingleScheduler extends io.reactivex.rxjava3.core.Scheduler {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SingleScheduler>;
            public scheduleDirect(param0: java.lang.Runnable, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
            public constructor(param0: java.util.concurrent.ThreadFactory);
            public constructor();
            public shutdown(): void;
            public createWorker(): io.reactivex.rxjava3.core.Scheduler.Worker;
            public start(): void;
            public schedulePeriodicallyDirect(param0: java.lang.Runnable, param1: number, param2: number, param3: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
            public scheduleDirect(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          }
          export module SingleScheduler {
            export class ScheduledWorker extends io.reactivex.rxjava3.core.Scheduler.Worker {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SingleScheduler.ScheduledWorker>;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
              public schedule(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public schedule(param0: java.lang.Runnable, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module schedulers {
          export class TrampolineScheduler extends io.reactivex.rxjava3.core.Scheduler {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler>;
            public scheduleDirect(param0: java.lang.Runnable, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
            public createWorker(): io.reactivex.rxjava3.core.Scheduler.Worker;
            public static instance(): io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler;
            public scheduleDirect(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          }
          export module TrampolineScheduler {
            export class SleepingRunnable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.SleepingRunnable>;
              public run(): void;
            }
            export class TimedRunnable extends java.lang.Comparable<io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TimedRunnable> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TimedRunnable>;
              public compareTo(param0: io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TimedRunnable): number;
            }
            export class TrampolineWorker extends io.reactivex.rxjava3.core.Scheduler.Worker implements io.reactivex.rxjava3.disposables.Disposable {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker>;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
              public schedule(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public schedule(param0: java.lang.Runnable, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            }
            export module TrampolineWorker {
              export class AppendToQueueTask {
                public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask>;
                public run(): void;
              }
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscribers {
          export abstract class BasicFuseableConditionalSubscriber<T, R> extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber<any, any>>;
            public downstream: io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber<any>;
            public upstream: org.reactivestreams.Subscription;
            public qs: io.reactivex.rxjava3.internal.fuseable.QueueSubscription<T>;
            public done: boolean;
            public sourceMode: number;
            public cancel(): void;
            public offer(param0: R, param1: R): boolean;
            public requestFusion(param0: number): number;
            public onSubscribe(param0: org.reactivestreams.Subscription): void;
            public tryOnNext(param0: T): boolean;
            public beforeDownstream(): boolean;
            public offer(param0: T, param1: T): boolean;
            public fail(param0: java.lang.Throwable): void;
            public onError(param0: java.lang.Throwable): void;
            public transitiveBoundaryFusion(param0: number): number;
            public request(param0: number): void;
            public offer(param0: T): boolean;
            public onComplete(): void;
            public isEmpty(): boolean;
            public clear(): void;
            public offer(param0: R): boolean;
            public poll(): T;
            public constructor(param0: io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber<any>);
            public afterDownstream(): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscribers {
          export abstract class BasicFuseableSubscriber<T, R> extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber<any, any>>;
            public downstream: org.reactivestreams.Subscriber<any>;
            public upstream: org.reactivestreams.Subscription;
            public qs: io.reactivex.rxjava3.internal.fuseable.QueueSubscription<T>;
            public done: boolean;
            public sourceMode: number;
            public cancel(): void;
            public offer(param0: R, param1: R): boolean;
            public requestFusion(param0: number): number;
            public onSubscribe(param0: org.reactivestreams.Subscription): void;
            public beforeDownstream(): boolean;
            public offer(param0: T, param1: T): boolean;
            public fail(param0: java.lang.Throwable): void;
            public onError(param0: java.lang.Throwable): void;
            public transitiveBoundaryFusion(param0: number): number;
            public request(param0: number): void;
            public offer(param0: T): boolean;
            public constructor(param0: org.reactivestreams.Subscriber<any>);
            public onComplete(): void;
            public isEmpty(): boolean;
            public clear(): void;
            public offer(param0: R): boolean;
            public poll(): T;
            public afterDownstream(): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscribers {
          export abstract class BlockingBaseSubscriber<T> extends java.util.concurrent.CountDownLatch implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber<any>>;
            public constructor();
            public onComplete(): void;
            public blockingGet(): any;
            public onSubscribe(param0: org.reactivestreams.Subscription): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscribers {
          export class BlockingFirstSubscriber<T> extends io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.BlockingFirstSubscriber<any>>;
            public constructor();
            public onNext(param0: any): void;
            public onSubscribe(param0: org.reactivestreams.Subscription): void;
            public onError(param0: java.lang.Throwable): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscribers {
          export class BlockingLastSubscriber<T> extends io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.BlockingLastSubscriber<any>>;
            public constructor();
            public onNext(param0: any): void;
            public onSubscribe(param0: org.reactivestreams.Subscription): void;
            public onError(param0: java.lang.Throwable): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscribers {
          export class BlockingSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.BlockingSubscriber<any>>;
            public static TERMINATED: any;
            public request(param0: number): void;
            public isCancelled(): boolean;
            public cancel(): void;
            public onComplete(): void;
            public onSubscribe(param0: org.reactivestreams.Subscription): void;
            public onNext(param0: any): void;
            public constructor(param0: java.util.Queue<any>);
            public onError(param0: java.lang.Throwable): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscribers {
          export class BoundedSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber<any>>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public constructor(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action, param3: io.reactivex.rxjava3.functions.Consumer<any>, param4: number);
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public cancel(): void;
            public onSubscribe(param0: org.reactivestreams.Subscription): void;
            public onNext(param0: any): void;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public onError(param0: java.lang.Throwable): void;
            public dispose(): void;
            public request(param0: number): void;
            public hasCustomOnError(): boolean;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public onComplete(): void;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscribers {
          export abstract class DeferredScalarSubscriber<T, R> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriber<any, any>>;
            public upstream: org.reactivestreams.Subscription;
            public hasValue: boolean;
            public constructor();
            public constructor(param0: org.reactivestreams.Subscriber<any>);
            public cancel(): void;
            public onComplete(): void;
            public onSubscribe(param0: org.reactivestreams.Subscription): void;
            public onError(param0: java.lang.Throwable): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscribers {
          export class ForEachWhileSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber<any>>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public constructor(param0: io.reactivex.rxjava3.functions.Predicate<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action);
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public onSubscribe(param0: org.reactivestreams.Subscription): void;
            public onNext(param0: any): void;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public onError(param0: java.lang.Throwable): void;
            public dispose(): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public onComplete(): void;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscribers {
          export class FutureSubscriber<T> extends java.util.concurrent.CountDownLatch {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.FutureSubscriber<any>>;
            public request(param0: number): void;
            public constructor();
            public isDone(): boolean;
            public isCancelled(): boolean;
            public cancel(param0: boolean): boolean;
            public cancel(): void;
            public onComplete(): void;
            public onSubscribe(param0: org.reactivestreams.Subscription): void;
            public onNext(param0: any): void;
            public get(param0: number, param1: java.util.concurrent.TimeUnit): any;
            public get(): any;
            public onError(param0: java.lang.Throwable): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscribers {
          export class InnerQueuedSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber<any>>;
            public request(param0: number): void;
            public isDone(): boolean;
            public setDone(): void;
            public cancel(): void;
            public onComplete(): void;
            public onSubscribe(param0: org.reactivestreams.Subscription): void;
            public onNext(param0: any): void;
            public constructor(param0: io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriberSupport<any>, param1: number);
            public queue(): io.reactivex.rxjava3.internal.fuseable.SimpleQueue<any>;
            public onError(param0: java.lang.Throwable): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscribers {
          export class InnerQueuedSubscriberSupport<T> extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriberSupport<any>>;
            /**
             * Constructs a new instance of the io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriberSupport<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
             */
            public constructor(implementation: { innerNext(param0: io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber<T>, param1: T): void; innerError(param0: io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber<T>, param1: java.lang.Throwable): void; innerComplete(param0: io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber<T>): void; drain(): void });
            public constructor();
            public drain(): void;
            public innerError(param0: io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber<T>, param1: java.lang.Throwable): void;
            public innerNext(param0: io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber<T>, param1: T): void;
            public innerComplete(param0: io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber<T>): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscribers {
          export class LambdaSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber<any>>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public cancel(): void;
            public onSubscribe(param0: org.reactivestreams.Subscription): void;
            public onNext(param0: any): void;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public constructor(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action, param3: io.reactivex.rxjava3.functions.Consumer<any>);
            public onError(param0: java.lang.Throwable): void;
            public dispose(): void;
            public request(param0: number): void;
            public hasCustomOnError(): boolean;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public onComplete(): void;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscribers {
          export abstract class QueueDrainSubscriber<T, U, V> extends io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad4 {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber<any, any, any>>;
            public downstream: org.reactivestreams.Subscriber<any>;
            public queue: io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue<any>;
            public enter(): boolean;
            public produced(param0: number): number;
            public fastEnter(): boolean;
            public done(): boolean;
            public onSubscribe(param0: org.reactivestreams.Subscription): void;
            public cancelled(): boolean;
            public requested(param0: number): void;
            public requested(): number;
            public constructor(param0: org.reactivestreams.Subscriber<any>, param1: io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue<any>);
            public fastPathOrderedEmitMax(param0: any, param1: boolean, param2: io.reactivex.rxjava3.disposables.Disposable): void;
            public accept(param0: org.reactivestreams.Subscriber<any>, param1: any): boolean;
            public leave(param0: number): number;
            public fastPathEmitMax(param0: any, param1: boolean, param2: io.reactivex.rxjava3.disposables.Disposable): void;
            public error(): java.lang.Throwable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscribers {
          export class QueueDrainSubscriberPad0 {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad0>;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscribers {
          export class QueueDrainSubscriberPad2 extends io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberWip {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad2>;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscribers {
          export class QueueDrainSubscriberPad3 extends io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad2 {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad3>;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscribers {
          export class QueueDrainSubscriberPad4 extends io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad3 {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad4>;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscribers {
          export class QueueDrainSubscriberWip extends io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad0 {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberWip>;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscribers {
          export abstract class SinglePostCompleteSubscriber<T, R> extends java.util.concurrent.atomic.AtomicLong {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber<any, any>>;
            public downstream: org.reactivestreams.Subscriber<any>;
            public upstream: org.reactivestreams.Subscription;
            public value: any;
            public produced: number;
            public request(param0: number): void;
            public complete(param0: any): void;
            public constructor(param0: org.reactivestreams.Subscriber<any>);
            public cancel(): void;
            public onSubscribe(param0: org.reactivestreams.Subscription): void;
            public onDrop(param0: any): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscribers {
          export class StrictSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.StrictSubscriber<any>>;
            public request(param0: number): void;
            public constructor(param0: org.reactivestreams.Subscriber<any>);
            public cancel(): void;
            public onComplete(): void;
            public onSubscribe(param0: org.reactivestreams.Subscription): void;
            public onNext(param0: any): void;
            public onError(param0: java.lang.Throwable): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscribers {
          export class SubscriberResourceWrapper<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.SubscriberResourceWrapper<any>>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public cancel(): void;
            public onSubscribe(param0: org.reactivestreams.Subscription): void;
            public onNext(param0: any): void;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public onError(param0: java.lang.Throwable): void;
            public dispose(): void;
            public request(param0: number): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public constructor(param0: org.reactivestreams.Subscriber<any>);
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public onComplete(): void;
            public setResource(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscriptions {
          export class ArrayCompositeSubscription extends java.util.concurrent.atomic.AtomicReferenceArray<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.disposables.Disposable {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscriptions.ArrayCompositeSubscription>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public setResource(param0: number, param1: org.reactivestreams.Subscription): boolean;
            public dispose(): void;
            public replaceResource(param0: number, param1: org.reactivestreams.Subscription): org.reactivestreams.Subscription;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public constructor(param0: number);
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscriptions {
          export class AsyncSubscription implements io.reactivex.rxjava3.disposables.Disposable {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription>;
            public constructor(param0: io.reactivex.rxjava3.disposables.Disposable);
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public constructor();
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public cancel(): void;
            public replaceResource(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public dispose(): void;
            public request(param0: number): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public setResource(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public setSubscription(param0: org.reactivestreams.Subscription): void;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscriptions {
          export abstract class BasicIntQueueSubscription<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.internal.fuseable.QueueSubscription<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any>>;
            public constructor();
            public offer(param0: any): boolean;
            public offer(param0: any, param1: any): boolean;
            public requestFusion(param0: number): number;
            public poll(): any;
            public isEmpty(): boolean;
            public clear(): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscriptions {
          export abstract class BasicQueueSubscription<T> extends java.util.concurrent.atomic.AtomicLong implements io.reactivex.rxjava3.internal.fuseable.QueueSubscription<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription<any>>;
            public constructor();
            public offer(param0: any): boolean;
            public offer(param0: any, param1: any): boolean;
            public requestFusion(param0: number): number;
            public poll(): any;
            public isEmpty(): boolean;
            public clear(): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscriptions {
          export class BooleanSubscription {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscriptions.BooleanSubscription>;
            public request(param0: number): void;
            public constructor();
            public isCancelled(): boolean;
            public cancel(): void;
            public toString(): string;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscriptions {
          export class DeferredScalarSubscription<T> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any>>;
            public downstream: org.reactivestreams.Subscriber<any>;
            public value: any;
            public request(param0: number): void;
            public constructor();
            public tryCancel(): boolean;
            public complete(param0: any): void;
            public constructor(param0: org.reactivestreams.Subscriber<any>);
            public isCancelled(): boolean;
            public cancel(): void;
            public requestFusion(param0: number): number;
            public poll(): any;
            public isEmpty(): boolean;
            public clear(): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscriptions {
          export class EmptySubscription extends io.reactivex.rxjava3.internal.fuseable.QueueSubscription<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscriptions.EmptySubscription>;
            public static INSTANCE: io.reactivex.rxjava3.internal.subscriptions.EmptySubscription;
            public static valueOf(param0: string): io.reactivex.rxjava3.internal.subscriptions.EmptySubscription;
            public static error(param0: java.lang.Throwable, param1: org.reactivestreams.Subscriber<any>): void;
            public cancel(): void;
            public static complete(param0: org.reactivestreams.Subscriber<any>): void;
            public offer(param0: any): boolean;
            public requestFusion(param0: number): number;
            public poll(): any;
            public static values(): androidNative.Array<io.reactivex.rxjava3.internal.subscriptions.EmptySubscription>;
            public toString(): string;
            public request(param0: number): void;
            public offer(param0: any, param1: any): boolean;
            public isEmpty(): boolean;
            public clear(): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscriptions {
          export class ScalarSubscription<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.internal.fuseable.QueueSubscription<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription<any>>;
            public request(param0: number): void;
            public isCancelled(): boolean;
            public constructor(param0: org.reactivestreams.Subscriber<any>, param1: any);
            public cancel(): void;
            public offer(param0: any): boolean;
            public offer(param0: any, param1: any): boolean;
            public requestFusion(param0: number): number;
            public poll(): any;
            public isEmpty(): boolean;
            public clear(): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscriptions {
          export class SubscriptionArbiter {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter>;
            public unbounded: boolean;
            public request(param0: number): void;
            public produced(param0: number): void;
            public isUnbounded(): boolean;
            public isCancelled(): boolean;
            public cancel(): void;
            public setSubscription(param0: org.reactivestreams.Subscription): void;
            public constructor(param0: boolean);
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module subscriptions {
          export class SubscriptionHelper extends org.reactivestreams.Subscription {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper>;
            public static CANCELLED: io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper;
            public cancel(): void;
            public static reportSubscriptionSet(): void;
            public static validate(param0: number): boolean;
            public static deferredRequest(param0: java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription>, param1: java.util.concurrent.atomic.AtomicLong, param2: number): void;
            public static setOnce(param0: java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription>, param1: org.reactivestreams.Subscription, param2: number): boolean;
            public request(param0: number): void;
            public static values(): androidNative.Array<io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper>;
            public static deferredSetOnce(param0: java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription>, param1: java.util.concurrent.atomic.AtomicLong, param2: org.reactivestreams.Subscription): boolean;
            public static valueOf(param0: string): io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper;
            public static reportMoreProduced(param0: number): void;
            public static set(param0: java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription>, param1: org.reactivestreams.Subscription): boolean;
            public static replace(param0: java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription>, param1: org.reactivestreams.Subscription): boolean;
            public static validate(param0: org.reactivestreams.Subscription, param1: org.reactivestreams.Subscription): boolean;
            public static setOnce(param0: java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription>, param1: org.reactivestreams.Subscription): boolean;
            public static cancel(param0: java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription>): boolean;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class AppendOnlyLinkedArrayList<T> extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList<any>>;
            public setFirst(param0: T): void;
            public accept(param0: org.reactivestreams.Subscriber): boolean;
            public constructor(param0: number);
            public forEachWhile(param0: any, param1: io.reactivex.rxjava3.functions.BiPredicate<any, any>): void;
            public forEachWhile(param0: io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList.NonThrowingPredicate<any>): void;
            public add(param0: T): void;
            public accept(param0: io.reactivex.rxjava3.core.Observer<any>): boolean;
          }
          export module AppendOnlyLinkedArrayList {
            export class NonThrowingPredicate<T> extends io.reactivex.rxjava3.functions.Predicate<any> {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList.NonThrowingPredicate<any>>;
              /**
               * Constructs a new instance of the io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList$NonThrowingPredicate interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
               */
              public constructor(implementation: { test(param0: any): boolean; test(param0: any): boolean });
              public constructor();
              public test(param0: any): boolean;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class ArrayListSupplier {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.ArrayListSupplier>;
            public static INSTANCE: io.reactivex.rxjava3.internal.util.ArrayListSupplier;
            public static values(): androidNative.Array<io.reactivex.rxjava3.internal.util.ArrayListSupplier>;
            public get(): java.util.List<any>;
            public apply(param0: any): java.util.List<any>;
            public static asFunction(): io.reactivex.rxjava3.functions.Function<any, any>;
            public static valueOf(param0: string): io.reactivex.rxjava3.internal.util.ArrayListSupplier;
            public apply(param0: any): any;
            public get(): any;
            public static asSupplier(): io.reactivex.rxjava3.functions.Supplier<any>;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class AtomicThrowable extends java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.AtomicThrowable>;
            public tryTerminateConsumer(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
            public tryTerminateConsumer(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
            public constructor();
            public terminate(): java.lang.Throwable;
            public tryTerminateConsumer(param0: org.reactivestreams.Subscriber<any>): void;
            public isTerminated(): boolean;
            public tryTerminateAndReport(): void;
            public tryTerminateConsumer(param0: io.reactivex.rxjava3.core.Observer<any>): void;
            public tryTerminateConsumer(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
            public tryAddThrowable(param0: java.lang.Throwable): boolean;
            public tryAddThrowableOrReport(param0: java.lang.Throwable): boolean;
            public tryTerminateConsumer(param0: io.reactivex.rxjava3.core.Emitter<any>): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class BackpressureHelper {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.BackpressureHelper>;
            public static producedCancel(param0: java.util.concurrent.atomic.AtomicLong, param1: number): number;
            public static add(param0: java.util.concurrent.atomic.AtomicLong, param1: number): number;
            public static produced(param0: java.util.concurrent.atomic.AtomicLong, param1: number): number;
            public static addCap(param0: number, param1: number): number;
            public static addCancel(param0: java.util.concurrent.atomic.AtomicLong, param1: number): number;
            public static multiplyCap(param0: number, param1: number): number;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class BlockingHelper {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.BlockingHelper>;
            public static awaitForComplete(param0: java.util.concurrent.CountDownLatch, param1: io.reactivex.rxjava3.disposables.Disposable): void;
            public static verifyNonBlocking(): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class BlockingIgnoringReceiver extends java.util.concurrent.CountDownLatch {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.BlockingIgnoringReceiver>;
            public error: java.lang.Throwable;
            public constructor();
            public accept(param0: any): void;
            public run(): void;
            public accept(param0: java.lang.Throwable): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class ConnectConsumer extends io.reactivex.rxjava3.functions.Consumer<io.reactivex.rxjava3.disposables.Disposable> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.ConnectConsumer>;
            public disposable: io.reactivex.rxjava3.disposables.Disposable;
            public constructor();
            public accept(param0: any): void;
            public accept(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class EmptyComponent {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.EmptyComponent>;
            public static INSTANCE: io.reactivex.rxjava3.internal.util.EmptyComponent;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public isDisposed(): boolean;
            public static values(): androidNative.Array<io.reactivex.rxjava3.internal.util.EmptyComponent>;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public cancel(): void;
            public onSubscribe(param0: org.reactivestreams.Subscription): void;
            public onNext(param0: any): void;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public static asObserver(): io.reactivex.rxjava3.core.Observer<any>;
            public onError(param0: java.lang.Throwable): void;
            public dispose(): void;
            public request(param0: number): void;
            public onSuccess(param0: any): void;
            public static asSubscriber(): org.reactivestreams.Subscriber;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static valueOf(param0: string): io.reactivex.rxjava3.internal.util.EmptyComponent;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public onComplete(): void;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class EndConsumerHelper {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.EndConsumerHelper>;
            public static reportDoubleSubscription(param0: java.lang.Class<any>): void;
            public static validate(param0: io.reactivex.rxjava3.disposables.Disposable, param1: io.reactivex.rxjava3.disposables.Disposable, param2: java.lang.Class<any>): boolean;
            public static setOnce(param0: java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable>, param1: io.reactivex.rxjava3.disposables.Disposable, param2: java.lang.Class<any>): boolean;
            public static setOnce(param0: java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription>, param1: org.reactivestreams.Subscription, param2: java.lang.Class<any>): boolean;
            public static composeMessage(param0: string): string;
            public static validate(param0: org.reactivestreams.Subscription, param1: org.reactivestreams.Subscription, param2: java.lang.Class<any>): boolean;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class ErrorMode {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.ErrorMode>;
            public static IMMEDIATE: io.reactivex.rxjava3.internal.util.ErrorMode;
            public static BOUNDARY: io.reactivex.rxjava3.internal.util.ErrorMode;
            public static END: io.reactivex.rxjava3.internal.util.ErrorMode;
            public static values(): androidNative.Array<io.reactivex.rxjava3.internal.util.ErrorMode>;
            public static valueOf(param0: string): io.reactivex.rxjava3.internal.util.ErrorMode;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class ExceptionHelper {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.ExceptionHelper>;
            public static TERMINATED: java.lang.Throwable;
            public static timeoutMessage(param0: number, param1: java.util.concurrent.TimeUnit): string;
            public static flatten(param0: java.lang.Throwable): java.util.List<java.lang.Throwable>;
            public static throwIfThrowable(param0: java.lang.Throwable): java.lang.Exception;
            public static addThrowable(param0: java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>, param1: java.lang.Throwable): boolean;
            public static createNullPointerException(param0: string): java.lang.NullPointerException;
            public static nullWarning(param0: string): string;
            public static terminate(param0: java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>): java.lang.Throwable;
            public static nullCheck(param0: any, param1: string): any;
            public static wrapOrThrow(param0: java.lang.Throwable): java.lang.RuntimeException;
          }
          export module ExceptionHelper {
            export class Termination {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination>;
              public fillInStackTrace(): java.lang.Throwable;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class HalfSerializer {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.HalfSerializer>;
            public static onComplete(param0: org.reactivestreams.Subscriber<any>, param1: java.util.concurrent.atomic.AtomicInteger, param2: io.reactivex.rxjava3.internal.util.AtomicThrowable): void;
            public static onNext(param0: org.reactivestreams.Subscriber, param1: any, param2: java.util.concurrent.atomic.AtomicInteger, param3: io.reactivex.rxjava3.internal.util.AtomicThrowable): boolean;
            public static onComplete(param0: io.reactivex.rxjava3.core.Observer<any>, param1: java.util.concurrent.atomic.AtomicInteger, param2: io.reactivex.rxjava3.internal.util.AtomicThrowable): void;
            public static onError(param0: org.reactivestreams.Subscriber<any>, param1: java.lang.Throwable, param2: java.util.concurrent.atomic.AtomicInteger, param3: io.reactivex.rxjava3.internal.util.AtomicThrowable): void;
            public static onNext(param0: io.reactivex.rxjava3.core.Observer<any>, param1: any, param2: java.util.concurrent.atomic.AtomicInteger, param3: io.reactivex.rxjava3.internal.util.AtomicThrowable): void;
            public static onError(param0: io.reactivex.rxjava3.core.Observer<any>, param1: java.lang.Throwable, param2: java.util.concurrent.atomic.AtomicInteger, param3: io.reactivex.rxjava3.internal.util.AtomicThrowable): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class HashMapSupplier extends io.reactivex.rxjava3.functions.Supplier<java.util.Map<any, any>> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.HashMapSupplier>;
            public static INSTANCE: io.reactivex.rxjava3.internal.util.HashMapSupplier;
            public static values(): androidNative.Array<io.reactivex.rxjava3.internal.util.HashMapSupplier>;
            public static valueOf(param0: string): io.reactivex.rxjava3.internal.util.HashMapSupplier;
            public get(): java.util.Map<any, any>;
            public get(): any;
            public static asSupplier(): io.reactivex.rxjava3.functions.Supplier<any>;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class LinkedArrayList {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.LinkedArrayList>;
            public head(): androidNative.Array<any>;
            public add(param0: any): void;
            public constructor(param0: number);
            public size(): number;
            public toString(): string;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class ListAddBiConsumer extends io.reactivex.rxjava3.functions.BiFunction<java.util.List<any>, any, java.util.List<any>> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.ListAddBiConsumer>;
            public static INSTANCE: io.reactivex.rxjava3.internal.util.ListAddBiConsumer;
            public apply(param0: any, param1: any): any;
            public apply(param0: java.util.List<any>, param1: any): java.util.List<any>;
            public static values(): androidNative.Array<io.reactivex.rxjava3.internal.util.ListAddBiConsumer>;
            public static valueOf(param0: string): io.reactivex.rxjava3.internal.util.ListAddBiConsumer;
            public static instance(): io.reactivex.rxjava3.functions.BiFunction<any, any, any>;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class MergerBiFunction<T> extends io.reactivex.rxjava3.functions.BiFunction<java.util.List<any>, java.util.List<any>, java.util.List<any>> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.MergerBiFunction<any>>;
            public apply(param0: any, param1: any): any;
            public constructor(param0: java.util.Comparator<any>);
            public apply(param0: java.util.List<any>, param1: java.util.List<any>): java.util.List<any>;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class NotificationLite {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.NotificationLite>;
            public static COMPLETE: io.reactivex.rxjava3.internal.util.NotificationLite;
            public static getDisposable(param0: any): io.reactivex.rxjava3.disposables.Disposable;
            public static acceptFull(param0: any, param1: io.reactivex.rxjava3.core.Observer<any>): boolean;
            public static getSubscription(param0: any): org.reactivestreams.Subscription;
            public static values(): androidNative.Array<io.reactivex.rxjava3.internal.util.NotificationLite>;
            public static valueOf(param0: string): io.reactivex.rxjava3.internal.util.NotificationLite;
            public static complete(): any;
            public static disposable(param0: io.reactivex.rxjava3.disposables.Disposable): any;
            public static accept(param0: any, param1: org.reactivestreams.Subscriber): boolean;
            public static isComplete(param0: any): boolean;
            public static isError(param0: any): boolean;
            public toString(): string;
            public static isSubscription(param0: any): boolean;
            public static error(param0: java.lang.Throwable): any;
            public static subscription(param0: org.reactivestreams.Subscription): any;
            public static isDisposable(param0: any): boolean;
            public static getError(param0: any): java.lang.Throwable;
            public static getValue(param0: any): any;
            public static accept(param0: any, param1: io.reactivex.rxjava3.core.Observer<any>): boolean;
            public static acceptFull(param0: any, param1: org.reactivestreams.Subscriber): boolean;
            public static next(param0: any): any;
          }
          export module NotificationLite {
            export class DisposableNotification {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification>;
              public toString(): string;
            }
            export class ErrorNotification {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.NotificationLite.ErrorNotification>;
              public hashCode(): number;
              public toString(): string;
              public equals(param0: any): boolean;
            }
            export class SubscriptionNotification {
              public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.NotificationLite.SubscriptionNotification>;
              public toString(): string;
            }
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class ObservableQueueDrain<T, U> extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.ObservableQueueDrain<any, any>>;
            /**
             * Constructs a new instance of the io.reactivex.rxjava3.internal.util.ObservableQueueDrain<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
             */
            public constructor(implementation: { cancelled(): boolean; done(): boolean; error(): java.lang.Throwable; enter(): boolean; leave(param0: number): number; accept(param0: io.reactivex.rxjava3.core.Observer<any>, param1: T): void });
            public constructor();
            public enter(): boolean;
            public done(): boolean;
            public leave(param0: number): number;
            public accept(param0: io.reactivex.rxjava3.core.Observer<any>, param1: T): void;
            public cancelled(): boolean;
            public error(): java.lang.Throwable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class OpenHashSet<T> extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.OpenHashSet<any>>;
            public constructor();
            public keys(): androidNative.Array<any>;
            public constructor(param0: number);
            public size(): number;
            public constructor(param0: number, param1: number);
            public add(param0: T): boolean;
            public remove(param0: T): boolean;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class Pow2 {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.Pow2>;
            public static isPowerOfTwo(param0: number): boolean;
            public static roundToPowerOfTwo(param0: number): number;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class QueueDrain<T, U> extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.QueueDrain<any, any>>;
            /**
             * Constructs a new instance of the io.reactivex.rxjava3.internal.util.QueueDrain<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
             */
            public constructor(implementation: { cancelled(): boolean; done(): boolean; error(): java.lang.Throwable; enter(): boolean; requested(): number; produced(param0: number): number; leave(param0: number): number; accept(param0: org.reactivestreams.Subscriber<any>, param1: T): boolean });
            public constructor();
            public enter(): boolean;
            public produced(param0: number): number;
            public accept(param0: org.reactivestreams.Subscriber<any>, param1: T): boolean;
            public done(): boolean;
            public leave(param0: number): number;
            public cancelled(): boolean;
            public error(): java.lang.Throwable;
            public requested(): number;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class QueueDrainHelper {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.QueueDrainHelper>;
            public static checkTerminated(param0: boolean, param1: boolean, param2: org.reactivestreams.Subscriber, param3: boolean, param4: io.reactivex.rxjava3.internal.fuseable.SimpleQueue<any>, param5: io.reactivex.rxjava3.internal.util.QueueDrain<any, any>): boolean;
            public static drainLoop(param0: io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue<any>, param1: io.reactivex.rxjava3.core.Observer<any>, param2: boolean, param3: io.reactivex.rxjava3.disposables.Disposable, param4: io.reactivex.rxjava3.internal.util.ObservableQueueDrain<any, any>): void;
            public static createQueue(param0: number): io.reactivex.rxjava3.internal.fuseable.SimpleQueue<any>;
            public static postCompleteRequest(param0: number, param1: org.reactivestreams.Subscriber, param2: java.util.Queue<any>, param3: java.util.concurrent.atomic.AtomicLong, param4: io.reactivex.rxjava3.functions.BooleanSupplier): boolean;
            public static checkTerminated(param0: boolean, param1: boolean, param2: io.reactivex.rxjava3.core.Observer<any>, param3: boolean, param4: io.reactivex.rxjava3.internal.fuseable.SimpleQueue<any>, param5: io.reactivex.rxjava3.disposables.Disposable, param6: io.reactivex.rxjava3.internal.util.ObservableQueueDrain<any, any>): boolean;
            public static drainMaxLoop(param0: io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue<any>, param1: org.reactivestreams.Subscriber, param2: boolean, param3: io.reactivex.rxjava3.disposables.Disposable, param4: io.reactivex.rxjava3.internal.util.QueueDrain<any, any>): void;
            public static request(param0: org.reactivestreams.Subscription, param1: number): void;
            public static postComplete(param0: org.reactivestreams.Subscriber, param1: java.util.Queue<any>, param2: java.util.concurrent.atomic.AtomicLong, param3: io.reactivex.rxjava3.functions.BooleanSupplier): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class SorterFunction<T> extends io.reactivex.rxjava3.functions.Function<java.util.List<any>, java.util.List<any>> {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.SorterFunction<any>>;
            public constructor(param0: java.util.Comparator<any>);
            public apply(param0: java.util.List<any>): java.util.List<any>;
            public apply(param0: any): any;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class SuppressAnimalSniffer {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.SuppressAnimalSniffer>;
            /**
             * Constructs a new instance of the io.reactivex.rxjava3.internal.util.SuppressAnimalSniffer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
             */
            public constructor(implementation: {});
            public constructor();
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module internal {
        export module util {
          export class VolatileSizeArrayList<T> extends java.util.concurrent.atomic.AtomicInteger {
            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.VolatileSizeArrayList<any>>;
            public toArray(param0: androidNative.Array<any>): androidNative.Array<any>;
            public listIterator(): java.util.ListIterator<any>;
            public iterator(): java.util.Iterator<any>;
            public add(param0: any): boolean;
            public equals(param0: any): boolean;
            public hashCode(): number;
            public listIterator(param0: number): java.util.ListIterator<any>;
            public addAll(param0: java.util.Collection<any>): boolean;
            public retainAll(param0: java.util.Collection<any>): boolean;
            public set(param0: number, param1: any): any;
            public isEmpty(): boolean;
            public get(param0: number): any;
            public size(): number;
            public removeAll(param0: java.util.Collection<any>): boolean;
            public constructor();
            public contains(param0: any): boolean;
            public lastIndexOf(param0: any): number;
            public toArray(): androidNative.Array<any>;
            public subList(param0: number, param1: number): java.util.List<any>;
            public toString(): string;
            public remove(param0: any): boolean;
            public add(param0: number, param1: any): void;
            public indexOf(param0: any): number;
            public constructor(param0: number);
            public remove(param0: number): any;
            public clear(): void;
            public addAll(param0: number, param1: java.util.Collection<any>): boolean;
            public containsAll(param0: java.util.Collection<any>): boolean;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module observables {
        export abstract class ConnectableObservable<T> extends io.reactivex.rxjava3.core.Observable<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.observables.ConnectableObservable<any>>;
          public refCount(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
          public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
          public reset(): void;
          public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
          public refCount(): io.reactivex.rxjava3.core.Observable<any>;
          public refCount(param0: number): io.reactivex.rxjava3.core.Observable<any>;
          public autoConnect(): io.reactivex.rxjava3.core.Observable<any>;
          public refCount(param0: number, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
          public autoConnect(param0: number): io.reactivex.rxjava3.core.Observable<any>;
          public refCount(param0: number, param1: number, param2: java.util.concurrent.TimeUnit, param3: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public constructor();
          public refCount(param0: number, param1: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
          public autoConnect(param0: number, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
          public connect(param0: io.reactivex.rxjava3.functions.Consumer<any>): void;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public connect(): io.reactivex.rxjava3.disposables.Disposable;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module observables {
        export abstract class GroupedObservable<K, T> extends io.reactivex.rxjava3.core.Observable<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.observables.GroupedObservable<any, any>>;
          public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
          public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
          public constructor();
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public constructor(param0: any);
          public getKey(): any;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module observers {
        export abstract class BaseTestConsumer<T, U> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.observers.BaseTestConsumer<any, any>>;
          public done: java.util.concurrent.CountDownLatch;
          public errors: java.util.List<java.lang.Throwable>;
          public completions: number;
          public lastThread: java.lang.Thread;
          public checkSubscriptionOnce: boolean;
          public tag: string;
          public timeout: boolean;
          public assertValueAt(param0: number, param1: T): U;
          public assertError(param0: io.reactivex.rxjava3.functions.Predicate<java.lang.Throwable>): U;
          public values(): java.util.List<T>;
          public awaitDone(param0: number, param1: java.util.concurrent.TimeUnit): U;
          public assertValueSequence(param0: java.lang.Iterable<any>): U;
          public assertSubscribed(): U;
          public await(param0: number, param1: java.util.concurrent.TimeUnit): boolean;
          public assertNotComplete(): U;
          public assertError(param0: java.lang.Class<any>): U;
          public constructor();
          public assertValueAt(param0: number, param1: io.reactivex.rxjava3.functions.Predicate<T>): U;
          public assertValueCount(param0: number): U;
          public assertNoErrors(): U;
          public assertError(param0: java.lang.Throwable): U;
          public assertValue(param0: T): U;
          public assertResult(param0: androidNative.Array<T>): U;
          public assertValue(param0: io.reactivex.rxjava3.functions.Predicate<T>): U;
          public assertNoValues(): U;
          public static valueAndClass(param0: any): string;
          public dispose(): void;
          public fail(param0: string): java.lang.AssertionError;
          public assertEmpty(): U;
          public await(): U;
          public assertFailure(param0: java.lang.Class<any>, param1: androidNative.Array<T>): U;
          public withTag(param0: string): U;
          public awaitCount(param0: number): U;
          public assertComplete(): U;
          public isDisposed(): boolean;
          public assertValuesOnly(param0: androidNative.Array<T>): U;
          public assertValues(param0: androidNative.Array<T>): U;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module observers {
        export abstract class DefaultObserver<T> extends io.reactivex.rxjava3.core.Observer<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.observers.DefaultObserver<any>>;
          public onStart(): void;
          public constructor();
          public cancel(): void;
          public onComplete(): void;
          public onError(param0: java.lang.Throwable): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public onNext(param0: any): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module observers {
        export abstract class DisposableCompletableObserver implements io.reactivex.rxjava3.core.CompletableObserver, io.reactivex.rxjava3.disposables.Disposable {
          public static class: java.lang.Class<io.reactivex.rxjava3.observers.DisposableCompletableObserver>;
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static empty(): io.reactivex.rxjava3.disposables.Disposable;
          public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
          public dispose(): void;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public onComplete(): void;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
          public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
          public onError(param0: java.lang.Throwable): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public onStart(): void;
          public isDisposed(): boolean;
          public constructor();
          public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
          public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module observers {
        export abstract class DisposableMaybeObserver<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.observers.DisposableMaybeObserver<any>>;
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static empty(): io.reactivex.rxjava3.disposables.Disposable;
          public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
          public dispose(): void;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public onComplete(): void;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
          public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
          public onError(param0: java.lang.Throwable): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public onStart(): void;
          public isDisposed(): boolean;
          public constructor();
          public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
          public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          public onSuccess(param0: T): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module observers {
        export abstract class DisposableObserver<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.observers.DisposableObserver<any>>;
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static empty(): io.reactivex.rxjava3.disposables.Disposable;
          public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
          public dispose(): void;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public onComplete(): void;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
          public onNext(param0: T): void;
          public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
          public onError(param0: java.lang.Throwable): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public onStart(): void;
          public isDisposed(): boolean;
          public constructor();
          public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
          public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module observers {
        export abstract class DisposableSingleObserver<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.observers.DisposableSingleObserver<any>>;
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static empty(): io.reactivex.rxjava3.disposables.Disposable;
          public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
          public dispose(): void;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
          public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
          public onError(param0: java.lang.Throwable): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public onStart(): void;
          public isDisposed(): boolean;
          public constructor();
          public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
          public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          public onSuccess(param0: T): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module observers {
        export class LambdaConsumerIntrospection {
          public static class: java.lang.Class<io.reactivex.rxjava3.observers.LambdaConsumerIntrospection>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.observers.LambdaConsumerIntrospection interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { hasCustomOnError(): boolean });
          public constructor();
          public hasCustomOnError(): boolean;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module observers {
        export abstract class ResourceCompletableObserver implements io.reactivex.rxjava3.core.CompletableObserver, io.reactivex.rxjava3.disposables.Disposable {
          public static class: java.lang.Class<io.reactivex.rxjava3.observers.ResourceCompletableObserver>;
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static empty(): io.reactivex.rxjava3.disposables.Disposable;
          public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
          public dispose(): void;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public onComplete(): void;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
          public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
          public onError(param0: java.lang.Throwable): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public onStart(): void;
          public isDisposed(): boolean;
          public add(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public constructor();
          public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
          public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module observers {
        export abstract class ResourceMaybeObserver<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.observers.ResourceMaybeObserver<any>>;
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static empty(): io.reactivex.rxjava3.disposables.Disposable;
          public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
          public dispose(): void;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public onComplete(): void;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
          public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
          public onError(param0: java.lang.Throwable): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public onStart(): void;
          public isDisposed(): boolean;
          public add(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public constructor();
          public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
          public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          public onSuccess(param0: T): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module observers {
        export abstract class ResourceObserver<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.observers.ResourceObserver<any>>;
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static empty(): io.reactivex.rxjava3.disposables.Disposable;
          public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
          public dispose(): void;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public onComplete(): void;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
          public onNext(param0: T): void;
          public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
          public onError(param0: java.lang.Throwable): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public onStart(): void;
          public isDisposed(): boolean;
          public add(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public constructor();
          public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
          public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module observers {
        export abstract class ResourceSingleObserver<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.observers.ResourceSingleObserver<any>>;
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static empty(): io.reactivex.rxjava3.disposables.Disposable;
          public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
          public dispose(): void;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
          public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
          public onError(param0: java.lang.Throwable): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public onStart(): void;
          public isDisposed(): boolean;
          public add(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public constructor();
          public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
          public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          public onSuccess(param0: T): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module observers {
        export class SafeObserver<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.observers.SafeObserver<any>>;
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static empty(): io.reactivex.rxjava3.disposables.Disposable;
          public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
          public dispose(): void;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public onComplete(): void;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
          public onNext(param0: T): void;
          public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
          public onError(param0: java.lang.Throwable): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public constructor(param0: io.reactivex.rxjava3.core.Observer<any>);
          public isDisposed(): boolean;
          public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
          public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module observers {
        export class SerializedObserver<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.observers.SerializedObserver<any>>;
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static empty(): io.reactivex.rxjava3.disposables.Disposable;
          public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
          public dispose(): void;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public onComplete(): void;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
          public onNext(param0: T): void;
          public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
          public onError(param0: java.lang.Throwable): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public constructor(param0: io.reactivex.rxjava3.core.Observer<any>);
          public constructor(param0: io.reactivex.rxjava3.core.Observer<any>, param1: boolean);
          public isDisposed(): boolean;
          public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
          public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module observers {
        export class TestObserver<T> extends io.reactivex.rxjava3.observers.BaseTestConsumer<any, io.reactivex.rxjava3.observers.TestObserver<any>> {
          public static class: java.lang.Class<io.reactivex.rxjava3.observers.TestObserver<any>>;
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static empty(): io.reactivex.rxjava3.disposables.Disposable;
          public static create(param0: io.reactivex.rxjava3.core.Observer<any>): io.reactivex.rxjava3.observers.TestObserver<any>;
          public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
          public dispose(): void;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public onComplete(): void;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
          public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
          public onError(param0: java.lang.Throwable): void;
          public onSuccess(param0: any): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public constructor(param0: io.reactivex.rxjava3.core.Observer<any>);
          public assertSubscribed(): io.reactivex.rxjava3.observers.TestObserver<any>;
          public assertSubscribed(): any;
          public isDisposed(): boolean;
          public hasSubscription(): boolean;
          public static create(): io.reactivex.rxjava3.observers.TestObserver<any>;
          public constructor();
          public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
          public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          public onNext(param0: any): void;
        }
        export module TestObserver {
          export class EmptyObserver extends io.reactivex.rxjava3.core.Observer<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.observers.TestObserver.EmptyObserver>;
            public static INSTANCE: io.reactivex.rxjava3.observers.TestObserver.EmptyObserver;
            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
            public static valueOf(param0: string): io.reactivex.rxjava3.observers.TestObserver.EmptyObserver;
            public onComplete(): void;
            public onNext(param0: any): void;
            public static values(): androidNative.Array<io.reactivex.rxjava3.observers.TestObserver.EmptyObserver>;
            public onError(param0: java.lang.Throwable): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module parallel {
        export class ParallelFailureHandling extends io.reactivex.rxjava3.functions.BiFunction<java.lang.Long, java.lang.Throwable, io.reactivex.rxjava3.parallel.ParallelFailureHandling> {
          public static class: java.lang.Class<io.reactivex.rxjava3.parallel.ParallelFailureHandling>;
          public static STOP: io.reactivex.rxjava3.parallel.ParallelFailureHandling;
          public static ERROR: io.reactivex.rxjava3.parallel.ParallelFailureHandling;
          public static SKIP: io.reactivex.rxjava3.parallel.ParallelFailureHandling;
          public static RETRY: io.reactivex.rxjava3.parallel.ParallelFailureHandling;
          public apply(param0: any, param1: any): any;
          public apply(param0: java.lang.Long, param1: java.lang.Throwable): io.reactivex.rxjava3.parallel.ParallelFailureHandling;
          public static valueOf(param0: string): io.reactivex.rxjava3.parallel.ParallelFailureHandling;
          public static values(): androidNative.Array<io.reactivex.rxjava3.parallel.ParallelFailureHandling>;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module parallel {
        export abstract class ParallelFlowable<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.parallel.ParallelFlowable<any>>;
          public static from(param0: org.reactivestreams.Publisher): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public collect(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public static fromArray(param0: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public flatMapStream(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public doOnComplete(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
          public doOnNext(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.parallel.ParallelFailureHandling): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
          public toSortedList(param0: java.util.Comparator<any>, param1: number): io.reactivex.rxjava3.core.Flowable<java.util.List<T>>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean, param2: number, param3: number): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public filter(param0: io.reactivex.rxjava3.functions.Predicate<any>, param1: io.reactivex.rxjava3.parallel.ParallelFailureHandling): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
          public doOnCancel(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
          public collect(param0: java.util.stream.Collector): io.reactivex.rxjava3.core.Flowable<any>;
          public constructor();
          public runOn(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
          public concatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public flatMapIterable(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public mapOptional(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public runOn(param0: io.reactivex.rxjava3.core.Scheduler, param1: number): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
          public sorted(param0: java.util.Comparator<any>): io.reactivex.rxjava3.core.Flowable<T>;
          public to(param0: io.reactivex.rxjava3.parallel.ParallelFlowableConverter<any, any>): any;
          public sequentialDelayError(): io.reactivex.rxjava3.core.Flowable<T>;
          public subscribe(param0: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
          public doOnNext(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, io.reactivex.rxjava3.parallel.ParallelFailureHandling>): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
          public compose(param0: io.reactivex.rxjava3.parallel.ParallelTransformer<any, any>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public concatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public static from(param0: org.reactivestreams.Publisher, param1: number): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public flatMapStream(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public doAfterTerminated(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
          public concatMapDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public doAfterNext(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
          public map(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public toSortedList(param0: java.util.Comparator<any>): io.reactivex.rxjava3.core.Flowable<java.util.List<T>>;
          public static from(param0: org.reactivestreams.Publisher, param1: number, param2: number): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public sequential(param0: number): io.reactivex.rxjava3.core.Flowable<T>;
          public concatMapDelayError(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: number, param2: boolean): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public map(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.parallel.ParallelFailureHandling): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public sorted(param0: java.util.Comparator<any>, param1: number): io.reactivex.rxjava3.core.Flowable<T>;
          public doOnNext(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
          public validate(param0: androidNative.Array<org.reactivestreams.Subscriber<any>>): boolean;
          public map(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public reduce(param0: io.reactivex.rxjava3.functions.Supplier<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public doOnSubscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
          public parallelism(): number;
          public doOnError(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
          public doOnRequest(param0: io.reactivex.rxjava3.functions.LongConsumer): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
          public sequential(): io.reactivex.rxjava3.core.Flowable<T>;
          public filter(param0: io.reactivex.rxjava3.functions.Predicate<any>, param1: io.reactivex.rxjava3.functions.BiFunction<any, any, io.reactivex.rxjava3.parallel.ParallelFailureHandling>): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
          public mapOptional(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: io.reactivex.rxjava3.parallel.ParallelFailureHandling): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public mapOptional(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public sequentialDelayError(param0: number): io.reactivex.rxjava3.core.Flowable<T>;
          public flatMap(param0: io.reactivex.rxjava3.functions.Function<any, any>, param1: boolean, param2: number): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public flatMapIterable(param0: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public filter(param0: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
          public reduce(param0: io.reactivex.rxjava3.functions.BiFunction<T, T, T>): io.reactivex.rxjava3.core.Flowable<T>;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module parallel {
        export class ParallelFlowableConverter<T, R> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.parallel.ParallelFlowableConverter<any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.parallel.ParallelFlowableConverter<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<T>): R });
          public constructor();
          public apply(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<T>): R;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module parallel {
        export class ParallelTransformer<Upstream, Downstream> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.parallel.ParallelTransformer<any, any>>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.parallel.ParallelTransformer<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { apply(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<Upstream>): io.reactivex.rxjava3.parallel.ParallelFlowable<Downstream> });
          public constructor();
          public apply(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<Upstream>): io.reactivex.rxjava3.parallel.ParallelFlowable<Downstream>;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module plugins {
        export class RxJavaPlugins {
          public static class: java.lang.Class<io.reactivex.rxjava3.plugins.RxJavaPlugins>;
          public static setInitIoSchedulerHandler(param0: io.reactivex.rxjava3.functions.Function<any, any>): void;
          public static getOnMaybeSubscribe(): io.reactivex.rxjava3.functions.BiFunction<any, any, any>;
          public static setOnCompletableAssembly(param0: io.reactivex.rxjava3.functions.Function<any, any>): void;
          public static setSingleSchedulerHandler(param0: io.reactivex.rxjava3.functions.Function<any, any>): void;
          public static getInitSingleSchedulerHandler(): io.reactivex.rxjava3.functions.Function<any, any>;
          public static onSubscribe(param0: io.reactivex.rxjava3.core.Single<any>, param1: io.reactivex.rxjava3.core.SingleObserver<any>): io.reactivex.rxjava3.core.SingleObserver<any>;
          public static createIoScheduler(param0: java.util.concurrent.ThreadFactory): io.reactivex.rxjava3.core.Scheduler;
          public static isLockdown(): boolean;
          public static getSingleSchedulerHandler(): io.reactivex.rxjava3.functions.Function<any, any>;
          public static onError(param0: java.lang.Throwable): void;
          public static createComputationScheduler(param0: java.util.concurrent.ThreadFactory): io.reactivex.rxjava3.core.Scheduler;
          public static setOnMaybeSubscribe(param0: io.reactivex.rxjava3.functions.BiFunction<any, io.reactivex.rxjava3.core.MaybeObserver<any>, any>): void;
          public static getNewThreadSchedulerHandler(): io.reactivex.rxjava3.functions.Function<any, any>;
          public static setInitComputationSchedulerHandler(param0: io.reactivex.rxjava3.functions.Function<any, any>): void;
          public static onAssembly(param0: io.reactivex.rxjava3.core.Maybe<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public static initSingleScheduler(param0: io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.core.Scheduler>): io.reactivex.rxjava3.core.Scheduler;
          public static getOnCompletableAssembly(): io.reactivex.rxjava3.functions.Function<any, any>;
          public static setInitSingleSchedulerHandler(param0: io.reactivex.rxjava3.functions.Function<any, any>): void;
          public static setOnParallelAssembly(param0: io.reactivex.rxjava3.functions.Function<any, any>): void;
          public static createSingleScheduler(param0: java.util.concurrent.ThreadFactory): io.reactivex.rxjava3.core.Scheduler;
          public static onSubscribe(param0: io.reactivex.rxjava3.core.Observable<any>, param1: io.reactivex.rxjava3.core.Observer<any>): io.reactivex.rxjava3.core.Observer<any>;
          public static getOnBeforeBlocking(): io.reactivex.rxjava3.functions.BooleanSupplier;
          public static lockdown(): void;
          public static getOnConnectableFlowableAssembly(): io.reactivex.rxjava3.functions.Function<any, any>;
          public static getOnConnectableObservableAssembly(): io.reactivex.rxjava3.functions.Function<any, any>;
          public static getOnSingleAssembly(): io.reactivex.rxjava3.functions.Function<any, any>;
          public static getOnMaybeAssembly(): io.reactivex.rxjava3.functions.Function<any, any>;
          public static setOnConnectableObservableAssembly(param0: io.reactivex.rxjava3.functions.Function<any, any>): void;
          public static setOnParallelSubscribe(param0: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): void;
          public static getOnFlowableSubscribe(): io.reactivex.rxjava3.functions.BiFunction<any, any, any>;
          public static getComputationSchedulerHandler(): io.reactivex.rxjava3.functions.Function<any, any>;
          public static onAssembly(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<any>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
          public static setInitNewThreadSchedulerHandler(param0: io.reactivex.rxjava3.functions.Function<any, any>): void;
          public static setOnMaybeAssembly(param0: io.reactivex.rxjava3.functions.Function<any, any>): void;
          public static onSubscribe(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, param1: androidNative.Array<org.reactivestreams.Subscriber>): androidNative.Array<org.reactivestreams.Subscriber>;
          public static getErrorHandler(): io.reactivex.rxjava3.functions.Consumer<any>;
          public static onAssembly(param0: io.reactivex.rxjava3.core.Completable): io.reactivex.rxjava3.core.Completable;
          public static setComputationSchedulerHandler(param0: io.reactivex.rxjava3.functions.Function<any, any>): void;
          public static createNewThreadScheduler(param0: java.util.concurrent.ThreadFactory): io.reactivex.rxjava3.core.Scheduler;
          public static setOnSingleAssembly(param0: io.reactivex.rxjava3.functions.Function<any, any>): void;
          public static setOnSingleSubscribe(param0: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): void;
          public static getOnFlowableAssembly(): io.reactivex.rxjava3.functions.Function<any, any>;
          public static onSubscribe(param0: io.reactivex.rxjava3.core.Flowable<any>, param1: org.reactivestreams.Subscriber): org.reactivestreams.Subscriber;
          public static getIoSchedulerHandler(): io.reactivex.rxjava3.functions.Function<any, any>;
          public static setOnConnectableFlowableAssembly(param0: io.reactivex.rxjava3.functions.Function<any, any>): void;
          public static setFailOnNonBlockingScheduler(param0: boolean): void;
          public static setOnObservableAssembly(param0: io.reactivex.rxjava3.functions.Function<any, any>): void;
          public static initComputationScheduler(param0: io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.core.Scheduler>): io.reactivex.rxjava3.core.Scheduler;
          public static setOnFlowableAssembly(param0: io.reactivex.rxjava3.functions.Function<any, any>): void;
          public static onIoScheduler(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Scheduler;
          public static getOnParallelAssembly(): io.reactivex.rxjava3.functions.Function<any, any>;
          public static onComputationScheduler(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Scheduler;
          public static reset(): void;
          public static onSingleScheduler(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Scheduler;
          public static getOnObservableAssembly(): io.reactivex.rxjava3.functions.Function<any, any>;
          public static onAssembly(param0: io.reactivex.rxjava3.core.Flowable<any>): io.reactivex.rxjava3.core.Flowable<any>;
          public static setOnFlowableSubscribe(param0: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): void;
          public static onAssembly(param0: io.reactivex.rxjava3.observables.ConnectableObservable<any>): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
          public static setScheduleHandler(param0: io.reactivex.rxjava3.functions.Function<any, any>): void;
          public static setOnCompletableSubscribe(param0: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): void;
          public static getOnObservableSubscribe(): io.reactivex.rxjava3.functions.BiFunction<any, any, any>;
          public static getInitComputationSchedulerHandler(): io.reactivex.rxjava3.functions.Function<any, any>;
          public static getInitIoSchedulerHandler(): io.reactivex.rxjava3.functions.Function<any, any>;
          public static setErrorHandler(param0: io.reactivex.rxjava3.functions.Consumer<any>): void;
          public static initNewThreadScheduler(param0: io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.core.Scheduler>): io.reactivex.rxjava3.core.Scheduler;
          public static onSchedule(param0: java.lang.Runnable): java.lang.Runnable;
          public static onAssembly(param0: io.reactivex.rxjava3.core.Single<any>): io.reactivex.rxjava3.core.Single<any>;
          public static initIoScheduler(param0: io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.core.Scheduler>): io.reactivex.rxjava3.core.Scheduler;
          public static onNewThreadScheduler(param0: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Scheduler;
          public static onSubscribe(param0: io.reactivex.rxjava3.core.Maybe<any>, param1: io.reactivex.rxjava3.core.MaybeObserver<any>): io.reactivex.rxjava3.core.MaybeObserver<any>;
          public static getOnParallelSubscribe(): io.reactivex.rxjava3.functions.BiFunction<any, any, any>;
          public static getOnCompletableSubscribe(): io.reactivex.rxjava3.functions.BiFunction<any, any, any>;
          public static setNewThreadSchedulerHandler(param0: io.reactivex.rxjava3.functions.Function<any, any>): void;
          public static onAssembly(param0: io.reactivex.rxjava3.flowables.ConnectableFlowable<any>): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
          public static getInitNewThreadSchedulerHandler(): io.reactivex.rxjava3.functions.Function<any, any>;
          public static getScheduleHandler(): io.reactivex.rxjava3.functions.Function<any, any>;
          public static onSubscribe(param0: io.reactivex.rxjava3.core.Completable, param1: io.reactivex.rxjava3.core.CompletableObserver): io.reactivex.rxjava3.core.CompletableObserver;
          public static getOnSingleSubscribe(): io.reactivex.rxjava3.functions.BiFunction<any, any, any>;
          public static onAssembly(param0: io.reactivex.rxjava3.core.Observable<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static setOnObservableSubscribe(param0: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): void;
          public static onBeforeBlocking(): boolean;
          public static isFailOnNonBlockingScheduler(): boolean;
          public static setOnBeforeBlocking(param0: io.reactivex.rxjava3.functions.BooleanSupplier): void;
          public static setIoSchedulerHandler(param0: io.reactivex.rxjava3.functions.Function<any, any>): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module processors {
        export class AsyncProcessor<T> extends io.reactivex.rxjava3.processors.FlowableProcessor<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.processors.AsyncProcessor<any>>;
          public getValue(): any;
          public hasThrowable(): boolean;
          public getThrowable(): java.lang.Throwable;
          public onComplete(): void;
          public onSubscribe(param0: org.reactivestreams.Subscription): void;
          public onError(param0: java.lang.Throwable): void;
          public static create(): io.reactivex.rxjava3.processors.AsyncProcessor<any>;
          public hasSubscribers(): boolean;
          public hasValue(): boolean;
          public static create(param0: io.reactivex.rxjava3.core.FlowableOnSubscribe<any>, param1: io.reactivex.rxjava3.core.BackpressureStrategy): io.reactivex.rxjava3.core.Flowable<any>;
          public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
          public onNext(param0: any): void;
          public hasComplete(): boolean;
        }
        export module AsyncProcessor {
          export class AsyncSubscription<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription<any>>;
            public cancel(): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module processors {
        export class BehaviorProcessor<T> extends io.reactivex.rxjava3.processors.FlowableProcessor<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.processors.BehaviorProcessor<any>>;
          public getValue(): any;
          public hasThrowable(): boolean;
          public getThrowable(): java.lang.Throwable;
          public static createDefault(param0: any): io.reactivex.rxjava3.processors.BehaviorProcessor<any>;
          public onComplete(): void;
          public onSubscribe(param0: org.reactivestreams.Subscription): void;
          public onError(param0: java.lang.Throwable): void;
          public hasSubscribers(): boolean;
          public hasValue(): boolean;
          public static create(): io.reactivex.rxjava3.processors.BehaviorProcessor<any>;
          public static create(param0: io.reactivex.rxjava3.core.FlowableOnSubscribe<any>, param1: io.reactivex.rxjava3.core.BackpressureStrategy): io.reactivex.rxjava3.core.Flowable<any>;
          public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
          public offer(param0: any): boolean;
          public onNext(param0: any): void;
          public hasComplete(): boolean;
        }
        export module BehaviorProcessor {
          export class BehaviorSubscription<T> extends java.util.concurrent.atomic.AtomicLong {
            public static class: java.lang.Class<io.reactivex.rxjava3.processors.BehaviorProcessor.BehaviorSubscription<any>>;
            public request(param0: number): void;
            public test(param0: any): boolean;
            public cancel(): void;
            public isFull(): boolean;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module processors {
        export abstract class FlowableProcessor<T> extends io.reactivex.rxjava3.core.Flowable<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.processors.FlowableProcessor<any>>;
          public toSerialized(): io.reactivex.rxjava3.processors.FlowableProcessor<any>;
          public constructor();
          public hasThrowable(): boolean;
          public getThrowable(): java.lang.Throwable;
          public onSubscribe(param0: org.reactivestreams.Subscription): void;
          public hasSubscribers(): boolean;
          public hasComplete(): boolean;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module processors {
        export class MulticastProcessor<T> extends io.reactivex.rxjava3.processors.FlowableProcessor<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.processors.MulticastProcessor<any>>;
          public startUnbounded(): void;
          public hasThrowable(): boolean;
          public getThrowable(): java.lang.Throwable;
          public static create(param0: number, param1: boolean): io.reactivex.rxjava3.processors.MulticastProcessor<any>;
          public onComplete(): void;
          public onSubscribe(param0: org.reactivestreams.Subscription): void;
          public start(): void;
          public onError(param0: java.lang.Throwable): void;
          public hasSubscribers(): boolean;
          public static create(param0: boolean): io.reactivex.rxjava3.processors.MulticastProcessor<any>;
          public static create(param0: io.reactivex.rxjava3.core.FlowableOnSubscribe<any>, param1: io.reactivex.rxjava3.core.BackpressureStrategy): io.reactivex.rxjava3.core.Flowable<any>;
          public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
          public static create(): io.reactivex.rxjava3.processors.MulticastProcessor<any>;
          public offer(param0: any): boolean;
          public static create(param0: number): io.reactivex.rxjava3.processors.MulticastProcessor<any>;
          public onNext(param0: any): void;
          public hasComplete(): boolean;
        }
        export module MulticastProcessor {
          export class MulticastSubscription<T> extends java.util.concurrent.atomic.AtomicLong implements org.reactivestreams.Subscription {
            public static class: java.lang.Class<io.reactivex.rxjava3.processors.MulticastProcessor.MulticastSubscription<any>>;
            public request(param0: number): void;
            public cancel(): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module processors {
        export class PublishProcessor<T> extends io.reactivex.rxjava3.processors.FlowableProcessor<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.processors.PublishProcessor<any>>;
          public hasThrowable(): boolean;
          public getThrowable(): java.lang.Throwable;
          public static create(param0: io.reactivex.rxjava3.core.FlowableOnSubscribe<any>, param1: io.reactivex.rxjava3.core.BackpressureStrategy): io.reactivex.rxjava3.core.Flowable<any>;
          public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
          public onComplete(): void;
          public onSubscribe(param0: org.reactivestreams.Subscription): void;
          public offer(param0: any): boolean;
          public onError(param0: java.lang.Throwable): void;
          public hasSubscribers(): boolean;
          public static create(): io.reactivex.rxjava3.processors.PublishProcessor<any>;
          public onNext(param0: any): void;
          public hasComplete(): boolean;
        }
        export module PublishProcessor {
          export class PublishSubscription<T> extends java.util.concurrent.atomic.AtomicLong implements org.reactivestreams.Subscription {
            public static class: java.lang.Class<io.reactivex.rxjava3.processors.PublishProcessor.PublishSubscription<any>>;
            public request(param0: number): void;
            public isCancelled(): boolean;
            public cancel(): void;
            public onComplete(): void;
            public onNext(param0: any): void;
            public onError(param0: java.lang.Throwable): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module processors {
        export class ReplayProcessor<T> extends io.reactivex.rxjava3.processors.FlowableProcessor<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.processors.ReplayProcessor<any>>;
          public static createWithSize(param0: number): io.reactivex.rxjava3.processors.ReplayProcessor<any>;
          public getValue(): any;
          public hasThrowable(): boolean;
          public getThrowable(): java.lang.Throwable;
          public onComplete(): void;
          public onSubscribe(param0: org.reactivestreams.Subscription): void;
          public static create(param0: number): io.reactivex.rxjava3.processors.ReplayProcessor<any>;
          public onError(param0: java.lang.Throwable): void;
          public hasSubscribers(): boolean;
          public getValues(param0: androidNative.Array<any>): androidNative.Array<any>;
          public static create(): io.reactivex.rxjava3.processors.ReplayProcessor<any>;
          public hasValue(): boolean;
          public static createWithTimeAndSize(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: number): io.reactivex.rxjava3.processors.ReplayProcessor<any>;
          public static create(param0: io.reactivex.rxjava3.core.FlowableOnSubscribe<any>, param1: io.reactivex.rxjava3.core.BackpressureStrategy): io.reactivex.rxjava3.core.Flowable<any>;
          public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
          public getValues(): androidNative.Array<any>;
          public static createWithTime(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.processors.ReplayProcessor<any>;
          public cleanupBuffer(): void;
          public onNext(param0: any): void;
          public hasComplete(): boolean;
        }
        export module ReplayProcessor {
          export class Node<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.processors.ReplayProcessor.Node<any>> {
            public static class: java.lang.Class<io.reactivex.rxjava3.processors.ReplayProcessor.Node<any>>;
          }
          export class ReplayBuffer<T> extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.processors.ReplayProcessor.ReplayBuffer<any>>;
            /**
             * Constructs a new instance of the io.reactivex.rxjava3.processors.ReplayProcessor$ReplayBuffer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
             */
            public constructor(implementation: { next(param0: T): void; error(param0: java.lang.Throwable): void; complete(): void; replay(param0: io.reactivex.rxjava3.processors.ReplayProcessor.ReplaySubscription<T>): void; size(): number; getValue(): T; getValues(param0: androidNative.Array<T>): androidNative.Array<T>; isDone(): boolean; getError(): java.lang.Throwable; trimHead(): void });
            public constructor();
            public replay(param0: io.reactivex.rxjava3.processors.ReplayProcessor.ReplaySubscription<T>): void;
            public error(param0: java.lang.Throwable): void;
            public isDone(): boolean;
            public complete(): void;
            public getValue(): T;
            public next(param0: T): void;
            public size(): number;
            public trimHead(): void;
            public getValues(param0: androidNative.Array<T>): androidNative.Array<T>;
            public getError(): java.lang.Throwable;
          }
          export class ReplaySubscription<T> extends java.util.concurrent.atomic.AtomicInteger implements org.reactivestreams.Subscription {
            public static class: java.lang.Class<io.reactivex.rxjava3.processors.ReplayProcessor.ReplaySubscription<any>>;
            public request(param0: number): void;
            public cancel(): void;
          }
          export class SizeAndTimeBoundReplayBuffer<T> extends io.reactivex.rxjava3.processors.ReplayProcessor.ReplayBuffer<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.processors.ReplayProcessor.SizeAndTimeBoundReplayBuffer<any>>;
            public getValues(param0: androidNative.Array<any>): androidNative.Array<any>;
            public next(param0: any): void;
            public error(param0: java.lang.Throwable): void;
            public isDone(): boolean;
            public complete(): void;
            public getValue(): any;
            public replay(param0: io.reactivex.rxjava3.processors.ReplayProcessor.ReplaySubscription<any>): void;
            public size(): number;
            public trimHead(): void;
            public getError(): java.lang.Throwable;
          }
          export class SizeBoundReplayBuffer<T> extends io.reactivex.rxjava3.processors.ReplayProcessor.ReplayBuffer<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.processors.ReplayProcessor.SizeBoundReplayBuffer<any>>;
            public getValues(param0: androidNative.Array<any>): androidNative.Array<any>;
            public next(param0: any): void;
            public error(param0: java.lang.Throwable): void;
            public isDone(): boolean;
            public complete(): void;
            public getValue(): any;
            public replay(param0: io.reactivex.rxjava3.processors.ReplayProcessor.ReplaySubscription<any>): void;
            public size(): number;
            public trimHead(): void;
            public getError(): java.lang.Throwable;
          }
          export class TimedNode<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode<any>> {
            public static class: java.lang.Class<io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode<any>>;
          }
          export class UnboundedReplayBuffer<T> extends io.reactivex.rxjava3.processors.ReplayProcessor.ReplayBuffer<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.processors.ReplayProcessor.UnboundedReplayBuffer<any>>;
            public getValues(param0: androidNative.Array<any>): androidNative.Array<any>;
            public next(param0: any): void;
            public error(param0: java.lang.Throwable): void;
            public isDone(): boolean;
            public complete(): void;
            public getValue(): any;
            public replay(param0: io.reactivex.rxjava3.processors.ReplayProcessor.ReplaySubscription<any>): void;
            public size(): number;
            public trimHead(): void;
            public getError(): java.lang.Throwable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module processors {
        export class SerializedProcessor<T> extends io.reactivex.rxjava3.processors.FlowableProcessor<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.processors.SerializedProcessor<any>>;
          public hasThrowable(): boolean;
          public getThrowable(): java.lang.Throwable;
          public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
          public onComplete(): void;
          public onSubscribe(param0: org.reactivestreams.Subscription): void;
          public onError(param0: java.lang.Throwable): void;
          public hasSubscribers(): boolean;
          public onNext(param0: any): void;
          public hasComplete(): boolean;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module processors {
        export class UnicastProcessor<T> extends io.reactivex.rxjava3.processors.FlowableProcessor<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.processors.UnicastProcessor<any>>;
          public static create(param0: number, param1: java.lang.Runnable): io.reactivex.rxjava3.processors.UnicastProcessor<any>;
          public static create(param0: boolean): io.reactivex.rxjava3.processors.UnicastProcessor<any>;
          public hasThrowable(): boolean;
          public getThrowable(): java.lang.Throwable;
          public static create(): io.reactivex.rxjava3.processors.UnicastProcessor<any>;
          public onComplete(): void;
          public onSubscribe(param0: org.reactivestreams.Subscription): void;
          public onError(param0: java.lang.Throwable): void;
          public hasSubscribers(): boolean;
          public static create(param0: number): io.reactivex.rxjava3.processors.UnicastProcessor<any>;
          public static create(param0: number, param1: java.lang.Runnable, param2: boolean): io.reactivex.rxjava3.processors.UnicastProcessor<any>;
          public static create(param0: io.reactivex.rxjava3.core.FlowableOnSubscribe<any>, param1: io.reactivex.rxjava3.core.BackpressureStrategy): io.reactivex.rxjava3.core.Flowable<any>;
          public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
          public onNext(param0: any): void;
          public hasComplete(): boolean;
        }
        export module UnicastProcessor {
          export class UnicastQueueSubscription extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.processors.UnicastProcessor.UnicastQueueSubscription>;
            public request(param0: number): void;
            public cancel(): void;
            public requestFusion(param0: number): number;
            public poll(): any;
            public isEmpty(): boolean;
            public clear(): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module schedulers {
        export class SchedulerRunnableIntrospection {
          public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.SchedulerRunnableIntrospection>;
          /**
           * Constructs a new instance of the io.reactivex.rxjava3.schedulers.SchedulerRunnableIntrospection interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
           */
          public constructor(implementation: { getWrappedRunnable(): java.lang.Runnable });
          public constructor();
          public getWrappedRunnable(): java.lang.Runnable;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module schedulers {
        export class Schedulers {
          public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.Schedulers>;
          public static start(): void;
          public static shutdown(): void;
          public static computation(): io.reactivex.rxjava3.core.Scheduler;
          public static trampoline(): io.reactivex.rxjava3.core.Scheduler;
          public static newThread(): io.reactivex.rxjava3.core.Scheduler;
          public static io(): io.reactivex.rxjava3.core.Scheduler;
          public static from(param0: java.util.concurrent.Executor): io.reactivex.rxjava3.core.Scheduler;
          public static single(): io.reactivex.rxjava3.core.Scheduler;
          public static from(param0: java.util.concurrent.Executor, param1: boolean): io.reactivex.rxjava3.core.Scheduler;
          public static from(param0: java.util.concurrent.Executor, param1: boolean, param2: boolean): io.reactivex.rxjava3.core.Scheduler;
        }
        export module Schedulers {
          export class ComputationHolder {
            public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.Schedulers.ComputationHolder>;
          }
          export class ComputationTask extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.core.Scheduler> {
            public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.Schedulers.ComputationTask>;
            public get(): io.reactivex.rxjava3.core.Scheduler;
            public get(): any;
          }
          export class IOTask extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.core.Scheduler> {
            public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.Schedulers.IOTask>;
            public get(): io.reactivex.rxjava3.core.Scheduler;
            public get(): any;
          }
          export class IoHolder {
            public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.Schedulers.IoHolder>;
          }
          export class NewThreadHolder {
            public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.Schedulers.NewThreadHolder>;
          }
          export class NewThreadTask extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.core.Scheduler> {
            public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.Schedulers.NewThreadTask>;
            public get(): io.reactivex.rxjava3.core.Scheduler;
            public get(): any;
          }
          export class SingleHolder {
            public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.Schedulers.SingleHolder>;
          }
          export class SingleTask extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.core.Scheduler> {
            public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.Schedulers.SingleTask>;
            public get(): io.reactivex.rxjava3.core.Scheduler;
            public get(): any;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module schedulers {
        export class TestScheduler extends io.reactivex.rxjava3.core.Scheduler {
          public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.TestScheduler>;
          public advanceTimeTo(param0: number, param1: java.util.concurrent.TimeUnit): void;
          public constructor(param0: boolean);
          public constructor();
          public constructor(param0: number, param1: java.util.concurrent.TimeUnit, param2: boolean);
          public constructor(param0: number, param1: java.util.concurrent.TimeUnit);
          public now(param0: java.util.concurrent.TimeUnit): number;
          public createWorker(): io.reactivex.rxjava3.core.Scheduler.Worker;
          public triggerActions(): void;
          public advanceTimeBy(param0: number, param1: java.util.concurrent.TimeUnit): void;
        }
        export module TestScheduler {
          export class TestWorker extends io.reactivex.rxjava3.core.Scheduler.Worker {
            public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.TestScheduler.TestWorker>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public schedule(param0: java.lang.Runnable, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public now(param0: java.util.concurrent.TimeUnit): number;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public dispose(): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public schedule(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
          export module TestWorker {
            export class QueueRemove extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.schedulers.TestScheduler.TimedRunnable> implements io.reactivex.rxjava3.disposables.Disposable {
              public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.TestScheduler.TestWorker.QueueRemove>;
              public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
              public dispose(): void;
              public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
              public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
              public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
              public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
              public isDisposed(): boolean;
              public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
              public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
              public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
              public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            }
          }
          export class TimedRunnable extends java.lang.Comparable<io.reactivex.rxjava3.schedulers.TestScheduler.TimedRunnable> {
            public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.TestScheduler.TimedRunnable>;
            public toString(): string;
            public compareTo(param0: io.reactivex.rxjava3.schedulers.TestScheduler.TimedRunnable): number;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module schedulers {
        export class Timed<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.Timed<any>>;
          public constructor(param0: T, param1: number, param2: java.util.concurrent.TimeUnit);
          public equals(param0: any): boolean;
          public value(): T;
          public time(param0: java.util.concurrent.TimeUnit): number;
          public unit(): java.util.concurrent.TimeUnit;
          public toString(): string;
          public time(): number;
          public hashCode(): number;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module subjects {
        export class AsyncSubject<T> extends io.reactivex.rxjava3.subjects.Subject<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.subjects.AsyncSubject<any>>;
          public getValue(): any;
          public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
          public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
          public hasThrowable(): boolean;
          public getThrowable(): java.lang.Throwable;
          public onComplete(): void;
          public onError(param0: java.lang.Throwable): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static create(param0: io.reactivex.rxjava3.core.ObservableOnSubscribe<any>): io.reactivex.rxjava3.core.Observable<any>;
          public hasValue(): boolean;
          public static create(): io.reactivex.rxjava3.subjects.AsyncSubject<any>;
          public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public hasObservers(): boolean;
          public onNext(param0: any): void;
          public hasComplete(): boolean;
        }
        export module AsyncSubject {
          export class AsyncDisposable<T> extends io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.subjects.AsyncSubject.AsyncDisposable<any>>;
            public dispose(): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module subjects {
        export class BehaviorSubject<T> extends io.reactivex.rxjava3.subjects.Subject<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.subjects.BehaviorSubject<any>>;
          public getValue(): any;
          public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
          public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
          public hasThrowable(): boolean;
          public getThrowable(): java.lang.Throwable;
          public onComplete(): void;
          public onError(param0: java.lang.Throwable): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static createDefault(param0: any): io.reactivex.rxjava3.subjects.BehaviorSubject<any>;
          public static create(param0: io.reactivex.rxjava3.core.ObservableOnSubscribe<any>): io.reactivex.rxjava3.core.Observable<any>;
          public hasValue(): boolean;
          public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public static create(): io.reactivex.rxjava3.subjects.BehaviorSubject<any>;
          public hasObservers(): boolean;
          public onNext(param0: any): void;
          public hasComplete(): boolean;
        }
        export module BehaviorSubject {
          export class BehaviorDisposable<T> extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.subjects.BehaviorSubject.BehaviorDisposable<any>>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public isDisposed(): boolean;
            public test(param0: any): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public dispose(): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public test(param0: T): boolean;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module subjects {
        export class CompletableSubject extends io.reactivex.rxjava3.core.Completable implements io.reactivex.rxjava3.core.CompletableObserver {
          public static class: java.lang.Class<io.reactivex.rxjava3.subjects.CompletableSubject>;
          public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
          public subscribe(param0: io.reactivex.rxjava3.functions.Action, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public hasThrowable(): boolean;
          public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
          public getThrowable(): java.lang.Throwable;
          public onComplete(): void;
          public onError(param0: java.lang.Throwable): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public static create(): io.reactivex.rxjava3.subjects.CompletableSubject;
          public static create(param0: io.reactivex.rxjava3.core.CompletableOnSubscribe): io.reactivex.rxjava3.core.Completable;
          public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
          public hasObservers(): boolean;
          public subscribe(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public hasComplete(): boolean;
        }
        export module CompletableSubject {
          export class CompletableDisposable extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.subjects.CompletableSubject> implements io.reactivex.rxjava3.disposables.Disposable {
            public static class: java.lang.Class<io.reactivex.rxjava3.subjects.CompletableSubject.CompletableDisposable>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public dispose(): void;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module subjects {
        export class MaybeSubject<T> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.subjects.MaybeSubject<any>>;
          public getValue(): any;
          public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
          public static create(param0: io.reactivex.rxjava3.core.MaybeOnSubscribe<any>): io.reactivex.rxjava3.core.Maybe<any>;
          public hasThrowable(): boolean;
          public getThrowable(): java.lang.Throwable;
          public onComplete(): void;
          public onError(param0: java.lang.Throwable): void;
          public onSuccess(param0: any): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
          public hasValue(): boolean;
          public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public hasObservers(): boolean;
          public static create(): io.reactivex.rxjava3.subjects.MaybeSubject<any>;
          public hasComplete(): boolean;
        }
        export module MaybeSubject {
          export class MaybeDisposable<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.subjects.MaybeSubject<any>> implements io.reactivex.rxjava3.disposables.Disposable {
            public static class: java.lang.Class<io.reactivex.rxjava3.subjects.MaybeSubject.MaybeDisposable<any>>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public dispose(): void;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module subjects {
        export class PublishSubject<T> extends io.reactivex.rxjava3.subjects.Subject<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.subjects.PublishSubject<any>>;
          public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
          public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
          public hasThrowable(): boolean;
          public getThrowable(): java.lang.Throwable;
          public onComplete(): void;
          public onError(param0: java.lang.Throwable): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static create(): io.reactivex.rxjava3.subjects.PublishSubject<any>;
          public static create(param0: io.reactivex.rxjava3.core.ObservableOnSubscribe<any>): io.reactivex.rxjava3.core.Observable<any>;
          public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public hasObservers(): boolean;
          public onNext(param0: any): void;
          public hasComplete(): boolean;
        }
        export module PublishSubject {
          export class PublishDisposable<T> extends java.util.concurrent.atomic.AtomicBoolean implements io.reactivex.rxjava3.disposables.Disposable {
            public static class: java.lang.Class<io.reactivex.rxjava3.subjects.PublishSubject.PublishDisposable<any>>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public onNext(param0: any): void;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public onError(param0: java.lang.Throwable): void;
            public dispose(): void;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public onComplete(): void;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module subjects {
        export class ReplaySubject<T> extends io.reactivex.rxjava3.subjects.Subject<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.subjects.ReplaySubject<any>>;
          public getValue(): any;
          public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
          public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
          public getThrowable(): java.lang.Throwable;
          public onError(param0: java.lang.Throwable): void;
          public static create(): io.reactivex.rxjava3.subjects.ReplaySubject<any>;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static create(param0: io.reactivex.rxjava3.core.ObservableOnSubscribe<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static createWithTimeAndSize(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler, param3: number): io.reactivex.rxjava3.subjects.ReplaySubject<any>;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public hasObservers(): boolean;
          public cleanupBuffer(): void;
          public hasComplete(): boolean;
          public static createWithTime(param0: number, param1: java.util.concurrent.TimeUnit, param2: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.subjects.ReplaySubject<any>;
          public hasThrowable(): boolean;
          public onComplete(): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public static createWithSize(param0: number): io.reactivex.rxjava3.subjects.ReplaySubject<any>;
          public getValues(param0: androidNative.Array<any>): androidNative.Array<any>;
          public hasValue(): boolean;
          public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public getValues(): androidNative.Array<any>;
          public static create(param0: number): io.reactivex.rxjava3.subjects.ReplaySubject<any>;
          public onNext(param0: any): void;
        }
        export module ReplaySubject {
          export class Node<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.subjects.ReplaySubject.Node<any>> {
            public static class: java.lang.Class<io.reactivex.rxjava3.subjects.ReplaySubject.Node<any>>;
          }
          export class ReplayBuffer<T> extends java.lang.Object {
            public static class: java.lang.Class<io.reactivex.rxjava3.subjects.ReplaySubject.ReplayBuffer<any>>;
            /**
             * Constructs a new instance of the io.reactivex.rxjava3.subjects.ReplaySubject$ReplayBuffer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
             */
            public constructor(implementation: { add(param0: T): void; addFinal(param0: any): void; replay(param0: io.reactivex.rxjava3.subjects.ReplaySubject.ReplayDisposable<T>): void; size(): number; getValue(): T; getValues(param0: androidNative.Array<T>): androidNative.Array<T>; get(): any; compareAndSet(param0: any, param1: any): boolean; trimHead(): void });
            public constructor();
            public compareAndSet(param0: any, param1: any): boolean;
            public add(param0: T): void;
            public addFinal(param0: any): void;
            public getValue(): T;
            public size(): number;
            public get(): any;
            public trimHead(): void;
            public replay(param0: io.reactivex.rxjava3.subjects.ReplaySubject.ReplayDisposable<T>): void;
            public getValues(param0: androidNative.Array<T>): androidNative.Array<T>;
          }
          export class ReplayDisposable<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.disposables.Disposable {
            public static class: java.lang.Class<io.reactivex.rxjava3.subjects.ReplaySubject.ReplayDisposable<any>>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public dispose(): void;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
          export class SizeAndTimeBoundReplayBuffer<T> extends java.util.concurrent.atomic.AtomicReference<any> implements io.reactivex.rxjava3.subjects.ReplaySubject.ReplayBuffer<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.subjects.ReplaySubject.SizeAndTimeBoundReplayBuffer<any>>;
            public getValues(param0: androidNative.Array<any>): androidNative.Array<any>;
            public add(param0: any): void;
            public replay(param0: io.reactivex.rxjava3.subjects.ReplaySubject.ReplayDisposable<any>): void;
            public getValue(): any;
            public compareAndSet(param0: any, param1: any): boolean;
            public addFinal(param0: any): void;
            public size(): number;
            public trimHead(): void;
            public get(): any;
          }
          export class SizeBoundReplayBuffer<T> extends java.util.concurrent.atomic.AtomicReference<any> implements io.reactivex.rxjava3.subjects.ReplaySubject.ReplayBuffer<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.subjects.ReplaySubject.SizeBoundReplayBuffer<any>>;
            public getValues(param0: androidNative.Array<any>): androidNative.Array<any>;
            public add(param0: any): void;
            public replay(param0: io.reactivex.rxjava3.subjects.ReplaySubject.ReplayDisposable<any>): void;
            public getValue(): any;
            public compareAndSet(param0: any, param1: any): boolean;
            public addFinal(param0: any): void;
            public size(): number;
            public trimHead(): void;
            public get(): any;
          }
          export class TimedNode<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.subjects.ReplaySubject.TimedNode<any>> {
            public static class: java.lang.Class<io.reactivex.rxjava3.subjects.ReplaySubject.TimedNode<any>>;
          }
          export class UnboundedReplayBuffer<T> extends java.util.concurrent.atomic.AtomicReference<any> implements io.reactivex.rxjava3.subjects.ReplaySubject.ReplayBuffer<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.subjects.ReplaySubject.UnboundedReplayBuffer<any>>;
            public getValues(param0: androidNative.Array<any>): androidNative.Array<any>;
            public add(param0: any): void;
            public replay(param0: io.reactivex.rxjava3.subjects.ReplaySubject.ReplayDisposable<any>): void;
            public getValue(): any;
            public compareAndSet(param0: any, param1: any): boolean;
            public addFinal(param0: any): void;
            public size(): number;
            public trimHead(): void;
            public get(): any;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module subjects {
        export class SerializedSubject<T> extends io.reactivex.rxjava3.subjects.Subject<any> implements io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList.NonThrowingPredicate<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.subjects.SerializedSubject<any>>;
          public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
          public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
          public hasThrowable(): boolean;
          public getThrowable(): java.lang.Throwable;
          public onComplete(): void;
          public test(param0: any): boolean;
          public onError(param0: java.lang.Throwable): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public test(param0: boolean): io.reactivex.rxjava3.observers.TestObserver<any>;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public test(): io.reactivex.rxjava3.observers.TestObserver<any>;
          public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public hasObservers(): boolean;
          public onNext(param0: any): void;
          public hasComplete(): boolean;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module subjects {
        export class SingleSubject<T> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.core.SingleObserver<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.subjects.SingleSubject<any>>;
          public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
          public getValue(): any;
          public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
          public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
          public hasThrowable(): boolean;
          public getThrowable(): java.lang.Throwable;
          public static create(param0: io.reactivex.rxjava3.core.SingleOnSubscribe<any>): io.reactivex.rxjava3.core.Single<any>;
          public static create(): io.reactivex.rxjava3.subjects.SingleSubject<any>;
          public onError(param0: java.lang.Throwable): void;
          public onSuccess(param0: any): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public hasValue(): boolean;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public hasObservers(): boolean;
          public subscribe(param0: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
        }
        export module SingleSubject {
          export class SingleDisposable<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.subjects.SingleSubject<any>> implements io.reactivex.rxjava3.disposables.Disposable {
            public static class: java.lang.Class<io.reactivex.rxjava3.subjects.SingleSubject.SingleDisposable<any>>;
            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
            public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
            public isDisposed(): boolean;
            public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
            public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
            public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
            public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
            public dispose(): void;
            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module subjects {
        export abstract class Subject<T> extends io.reactivex.rxjava3.core.Observable<any> implements io.reactivex.rxjava3.core.Observer<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.subjects.Subject<any>>;
          public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
          public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
          public hasThrowable(): boolean;
          public getThrowable(): java.lang.Throwable;
          public onComplete(): void;
          public onError(param0: java.lang.Throwable): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public constructor();
          public toSerialized(): io.reactivex.rxjava3.subjects.Subject<any>;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public hasObservers(): boolean;
          public hasComplete(): boolean;
          public onNext(param0: any): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module subjects {
        export class UnicastSubject<T> extends io.reactivex.rxjava3.subjects.Subject<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.subjects.UnicastSubject<any>>;
          public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
          public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
          public static create(param0: number, param1: java.lang.Runnable, param2: boolean): io.reactivex.rxjava3.subjects.UnicastSubject<any>;
          public hasThrowable(): boolean;
          public getThrowable(): java.lang.Throwable;
          public onComplete(): void;
          public onError(param0: java.lang.Throwable): void;
          public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static create(param0: boolean): io.reactivex.rxjava3.subjects.UnicastSubject<any>;
          public static create(param0: io.reactivex.rxjava3.core.ObservableOnSubscribe<any>): io.reactivex.rxjava3.core.Observable<any>;
          public static create(): io.reactivex.rxjava3.subjects.UnicastSubject<any>;
          public static create(param0: number, param1: java.lang.Runnable): io.reactivex.rxjava3.subjects.UnicastSubject<any>;
          public static create(param0: number): io.reactivex.rxjava3.subjects.UnicastSubject<any>;
          public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
          public subscribe(param0: io.reactivex.rxjava3.functions.Consumer<any>, param1: io.reactivex.rxjava3.functions.Consumer<any>, param2: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public hasObservers(): boolean;
          public onNext(param0: any): void;
          public hasComplete(): boolean;
        }
        export module UnicastSubject {
          export class UnicastQueueDisposable extends io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.subjects.UnicastSubject.UnicastQueueDisposable>;
            public isDisposed(): boolean;
            public requestFusion(param0: number): number;
            public poll(): any;
            public isEmpty(): boolean;
            public clear(): void;
            public dispose(): void;
          }
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module subscribers {
        export abstract class DefaultSubscriber<T> extends io.reactivex.rxjava3.core.FlowableSubscriber<any> {
          public static class: java.lang.Class<io.reactivex.rxjava3.subscribers.DefaultSubscriber<any>>;
          public onStart(): void;
          public constructor();
          public cancel(): void;
          public onSubscribe(param0: org.reactivestreams.Subscription): void;
          public request(param0: number): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module subscribers {
        export abstract class DisposableSubscriber<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.subscribers.DisposableSubscriber<any>>;
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static empty(): io.reactivex.rxjava3.disposables.Disposable;
          public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
          public dispose(): void;
          public cancel(): void;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
          public onSubscribe(param0: org.reactivestreams.Subscription): void;
          public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
          public request(param0: number): void;
          public onStart(): void;
          public isDisposed(): boolean;
          public constructor();
          public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
          public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module subscribers {
        export abstract class ResourceSubscriber<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.subscribers.ResourceSubscriber<any>>;
          public static fromRunnable(param0: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
          public static empty(): io.reactivex.rxjava3.disposables.Disposable;
          public static fromAutoCloseable(param0: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
          public dispose(): void;
          public static fromAction(param0: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
          public static fromFuture(param0: java.util.concurrent.Future<any>, param1: boolean): io.reactivex.rxjava3.disposables.Disposable;
          public onSubscribe(param0: org.reactivestreams.Subscription): void;
          public static fromSubscription(param0: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
          public request(param0: number): void;
          public onStart(): void;
          public isDisposed(): boolean;
          public add(param0: io.reactivex.rxjava3.disposables.Disposable): void;
          public constructor();
          public static toAutoCloseable(param0: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
          public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module subscribers {
        export class SafeSubscriber<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.subscribers.SafeSubscriber<any>>;
          public constructor(param0: org.reactivestreams.Subscriber<any>);
          public cancel(): void;
          public onComplete(): void;
          public onSubscribe(param0: org.reactivestreams.Subscription): void;
          public onNext(param0: T): void;
          public onError(param0: java.lang.Throwable): void;
          public request(param0: number): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module subscribers {
        export class SerializedSubscriber<T> extends java.lang.Object {
          public static class: java.lang.Class<io.reactivex.rxjava3.subscribers.SerializedSubscriber<any>>;
          public constructor(param0: org.reactivestreams.Subscriber<any>);
          public constructor(param0: org.reactivestreams.Subscriber<any>, param1: boolean);
          public cancel(): void;
          public onComplete(): void;
          public onSubscribe(param0: org.reactivestreams.Subscription): void;
          public onNext(param0: T): void;
          public onError(param0: java.lang.Throwable): void;
          public request(param0: number): void;
        }
      }
    }
  }
}

declare module io {
  export module reactivex {
    export module rxjava3 {
      export module subscribers {
        export class TestSubscriber<T> extends io.reactivex.rxjava3.observers.BaseTestConsumer<any, io.reactivex.rxjava3.subscribers.TestSubscriber<any>> {
          public static class: java.lang.Class<io.reactivex.rxjava3.subscribers.TestSubscriber<any>>;
          public constructor(param0: org.reactivestreams.Subscriber<any>);
          public isCancelled(): boolean;
          public dispose(): void;
          public cancel(): void;
          public onComplete(): void;
          public onSubscribe(param0: org.reactivestreams.Subscription): void;
          public static create(param0: org.reactivestreams.Subscriber): io.reactivex.rxjava3.subscribers.TestSubscriber<any>;
          public onError(param0: java.lang.Throwable): void;
          public request(param0: number): void;
          public static create(param0: number): io.reactivex.rxjava3.subscribers.TestSubscriber<any>;
          public requestMore(param0: number): io.reactivex.rxjava3.subscribers.TestSubscriber<any>;
          public onStart(): void;
          public assertSubscribed(): any;
          public isDisposed(): boolean;
          public hasSubscription(): boolean;
          public constructor();
          public static create(): io.reactivex.rxjava3.subscribers.TestSubscriber<any>;
          public constructor(param0: number);
          public constructor(param0: org.reactivestreams.Subscriber<any>, param1: number);
          public onNext(param0: any): void;
          public assertSubscribed(): io.reactivex.rxjava3.subscribers.TestSubscriber<any>;
        }
        export module TestSubscriber {
          export class EmptySubscriber extends io.reactivex.rxjava3.core.FlowableSubscriber<any> {
            public static class: java.lang.Class<io.reactivex.rxjava3.subscribers.TestSubscriber.EmptySubscriber>;
            public static INSTANCE: io.reactivex.rxjava3.subscribers.TestSubscriber.EmptySubscriber;
            public onComplete(): void;
            public onSubscribe(param0: org.reactivestreams.Subscription): void;
            public onNext(param0: any): void;
            public static values(): androidNative.Array<io.reactivex.rxjava3.subscribers.TestSubscriber.EmptySubscriber>;
            public static valueOf(param0: string): io.reactivex.rxjava3.subscribers.TestSubscriber.EmptySubscriber;
            public onError(param0: java.lang.Throwable): void;
          }
        }
      }
    }
  }
}

//Generics information:
//io.reactivex.rxjava3.core.CompletableConverter:1
//io.reactivex.rxjava3.core.Emitter:1
//io.reactivex.rxjava3.core.Flowable:1
//io.reactivex.rxjava3.core.FlowableConverter:2
//io.reactivex.rxjava3.core.FlowableEmitter:1
//io.reactivex.rxjava3.core.FlowableOnSubscribe:1
//io.reactivex.rxjava3.core.FlowableOperator:2
//io.reactivex.rxjava3.core.FlowableSubscriber:1
//io.reactivex.rxjava3.core.FlowableTransformer:2
//io.reactivex.rxjava3.core.Maybe:1
//io.reactivex.rxjava3.core.MaybeConverter:2
//io.reactivex.rxjava3.core.MaybeEmitter:1
//io.reactivex.rxjava3.core.MaybeObserver:1
//io.reactivex.rxjava3.core.MaybeOnSubscribe:1
//io.reactivex.rxjava3.core.MaybeOperator:2
//io.reactivex.rxjava3.core.MaybeSource:1
//io.reactivex.rxjava3.core.MaybeTransformer:2
//io.reactivex.rxjava3.core.Notification:1
//io.reactivex.rxjava3.core.Observable:1
//io.reactivex.rxjava3.core.ObservableConverter:2
//io.reactivex.rxjava3.core.ObservableEmitter:1
//io.reactivex.rxjava3.core.ObservableOnSubscribe:1
//io.reactivex.rxjava3.core.ObservableOperator:2
//io.reactivex.rxjava3.core.ObservableSource:1
//io.reactivex.rxjava3.core.ObservableTransformer:2
//io.reactivex.rxjava3.core.Observer:1
//io.reactivex.rxjava3.core.Single:1
//io.reactivex.rxjava3.core.SingleConverter:2
//io.reactivex.rxjava3.core.SingleEmitter:1
//io.reactivex.rxjava3.core.SingleObserver:1
//io.reactivex.rxjava3.core.SingleOnSubscribe:1
//io.reactivex.rxjava3.core.SingleOperator:2
//io.reactivex.rxjava3.core.SingleSource:1
//io.reactivex.rxjava3.core.SingleTransformer:2
//io.reactivex.rxjava3.disposables.ReferenceDisposable:1
//io.reactivex.rxjava3.flowables.ConnectableFlowable:1
//io.reactivex.rxjava3.flowables.GroupedFlowable:2
//io.reactivex.rxjava3.functions.BiConsumer:2
//io.reactivex.rxjava3.functions.BiFunction:3
//io.reactivex.rxjava3.functions.BiPredicate:2
//io.reactivex.rxjava3.functions.Consumer:1
//io.reactivex.rxjava3.functions.Function:2
//io.reactivex.rxjava3.functions.Function3:4
//io.reactivex.rxjava3.functions.Function4:5
//io.reactivex.rxjava3.functions.Function5:6
//io.reactivex.rxjava3.functions.Function6:7
//io.reactivex.rxjava3.functions.Function7:8
//io.reactivex.rxjava3.functions.Function8:9
//io.reactivex.rxjava3.functions.Function9:10
//io.reactivex.rxjava3.functions.IntFunction:1
//io.reactivex.rxjava3.functions.Predicate:1
//io.reactivex.rxjava3.functions.Supplier:1
//io.reactivex.rxjava3.internal.functions.Functions.ActionConsumer:1
//io.reactivex.rxjava3.internal.functions.Functions.Array2Func:3
//io.reactivex.rxjava3.internal.functions.Functions.Array3Func:4
//io.reactivex.rxjava3.internal.functions.Functions.Array4Func:5
//io.reactivex.rxjava3.internal.functions.Functions.Array5Func:6
//io.reactivex.rxjava3.internal.functions.Functions.Array6Func:7
//io.reactivex.rxjava3.internal.functions.Functions.Array7Func:8
//io.reactivex.rxjava3.internal.functions.Functions.Array8Func:9
//io.reactivex.rxjava3.internal.functions.Functions.Array9Func:10
//io.reactivex.rxjava3.internal.functions.Functions.ArrayListCapacityCallable:1
//io.reactivex.rxjava3.internal.functions.Functions.BooleanSupplierPredicateReverse:1
//io.reactivex.rxjava3.internal.functions.Functions.CastToClass:2
//io.reactivex.rxjava3.internal.functions.Functions.ClassFilter:2
//io.reactivex.rxjava3.internal.functions.Functions.EqualsPredicate:1
//io.reactivex.rxjava3.internal.functions.Functions.JustValue:2
//io.reactivex.rxjava3.internal.functions.Functions.ListSorter:1
//io.reactivex.rxjava3.internal.functions.Functions.NotificationOnComplete:1
//io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError:1
//io.reactivex.rxjava3.internal.functions.Functions.NotificationOnNext:1
//io.reactivex.rxjava3.internal.functions.Functions.TimestampFunction:1
//io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector:2
//io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector:3
//io.reactivex.rxjava3.internal.functions.Functions.ToMultimapKeyValueSelector:3
//io.reactivex.rxjava3.internal.fuseable.AbstractEmptyQueueFuseable:1
//io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable:1
//io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber:1
//io.reactivex.rxjava3.internal.fuseable.FuseToFlowable:1
//io.reactivex.rxjava3.internal.fuseable.FuseToMaybe:1
//io.reactivex.rxjava3.internal.fuseable.FuseToObservable:1
//io.reactivex.rxjava3.internal.fuseable.HasUpstreamMaybeSource:1
//io.reactivex.rxjava3.internal.fuseable.HasUpstreamObservableSource:1
//io.reactivex.rxjava3.internal.fuseable.HasUpstreamPublisher:1
//io.reactivex.rxjava3.internal.fuseable.HasUpstreamSingleSource:1
//io.reactivex.rxjava3.internal.fuseable.QueueDisposable:1
//io.reactivex.rxjava3.internal.fuseable.QueueFuseable:1
//io.reactivex.rxjava3.internal.fuseable.QueueSubscription:1
//io.reactivex.rxjava3.internal.fuseable.ScalarSupplier:1
//io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue:1
//io.reactivex.rxjava3.internal.fuseable.SimpleQueue:1
//io.reactivex.rxjava3.internal.jdk8.CompletableFromCompletionStage:1
//io.reactivex.rxjava3.internal.jdk8.CompletableFromCompletionStage.CompletionStageHandler:1
//io.reactivex.rxjava3.internal.jdk8.CompletionStageConsumer:1
//io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollector:3
//io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollector.CollectorSubscriber:3
//io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorSingle:3
//io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorSingle.CollectorSingleObserver:3
//io.reactivex.rxjava3.internal.jdk8.FlowableFirstStageSubscriber:1
//io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream:2
//io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream.FlatMapStreamSubscriber:2
//io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStage:1
//io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStage.BiConsumerAtomicReference:1
//io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStage.CompletionStageHandler:1
//io.reactivex.rxjava3.internal.jdk8.FlowableFromStream:1
//io.reactivex.rxjava3.internal.jdk8.FlowableFromStream.AbstractStreamSubscription:1
//io.reactivex.rxjava3.internal.jdk8.FlowableFromStream.StreamConditionalSubscription:1
//io.reactivex.rxjava3.internal.jdk8.FlowableFromStream.StreamSubscription:1
//io.reactivex.rxjava3.internal.jdk8.FlowableLastStageSubscriber:1
//io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional:2
//io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber:2
//io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalSubscriber:2
//io.reactivex.rxjava3.internal.jdk8.FlowableSingleStageSubscriber:1
//io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriber:1
//io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable:2
//io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable.FlattenStreamMultiObserver:2
//io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable:2
//io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver:2
//io.reactivex.rxjava3.internal.jdk8.MaybeFromCompletionStage:1
//io.reactivex.rxjava3.internal.jdk8.MaybeFromCompletionStage.CompletionStageHandler:1
//io.reactivex.rxjava3.internal.jdk8.MaybeMapOptional:2
//io.reactivex.rxjava3.internal.jdk8.MaybeMapOptional.MapOptionalMaybeObserver:2
//io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollector:3
//io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollector.CollectorObserver:3
//io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle:3
//io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver:3
//io.reactivex.rxjava3.internal.jdk8.ObservableFirstStageObserver:1
//io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStream:2
//io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStream.FlatMapStreamObserver:2
//io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage:1
//io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference:1
//io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.CompletionStageHandler:1
//io.reactivex.rxjava3.internal.jdk8.ObservableFromStream:1
//io.reactivex.rxjava3.internal.jdk8.ObservableFromStream.StreamDisposable:1
//io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver:1
//io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional:2
//io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional.MapOptionalObserver:2
//io.reactivex.rxjava3.internal.jdk8.ObservableSingleStageObserver:1
//io.reactivex.rxjava3.internal.jdk8.ObservableStageObserver:1
//io.reactivex.rxjava3.internal.jdk8.ParallelCollector:3
//io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber:3
//io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorSubscriber:3
//io.reactivex.rxjava3.internal.jdk8.ParallelCollector.SlotPair:1
//io.reactivex.rxjava3.internal.jdk8.ParallelFlatMapStream:2
//io.reactivex.rxjava3.internal.jdk8.ParallelMapOptional:2
//io.reactivex.rxjava3.internal.jdk8.ParallelMapOptional.ParallelMapConditionalSubscriber:2
//io.reactivex.rxjava3.internal.jdk8.ParallelMapOptional.ParallelMapSubscriber:2
//io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional:2
//io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTryConditionalSubscriber:2
//io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber:2
//io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowable:2
//io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservable:2
//io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage:1
//io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler:1
//io.reactivex.rxjava3.internal.jdk8.SingleMapOptional:2
//io.reactivex.rxjava3.internal.jdk8.SingleMapOptional.MapOptionalSingleObserver:2
//io.reactivex.rxjava3.internal.observers.BasicFuseableObserver:2
//io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable:1
//io.reactivex.rxjava3.internal.observers.BasicQueueDisposable:1
//io.reactivex.rxjava3.internal.observers.BiConsumerSingleObserver:1
//io.reactivex.rxjava3.internal.observers.BlockingBaseObserver:1
//io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver:1
//io.reactivex.rxjava3.internal.observers.BlockingFirstObserver:1
//io.reactivex.rxjava3.internal.observers.BlockingLastObserver:1
//io.reactivex.rxjava3.internal.observers.BlockingMultiObserver:1
//io.reactivex.rxjava3.internal.observers.BlockingObserver:1
//io.reactivex.rxjava3.internal.observers.ConsumerSingleObserver:1
//io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable:1
//io.reactivex.rxjava3.internal.observers.DeferredScalarObserver:2
//io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver:1
//io.reactivex.rxjava3.internal.observers.ForEachWhileObserver:1
//io.reactivex.rxjava3.internal.observers.FutureMultiObserver:1
//io.reactivex.rxjava3.internal.observers.FutureObserver:1
//io.reactivex.rxjava3.internal.observers.InnerQueuedObserver:1
//io.reactivex.rxjava3.internal.observers.InnerQueuedObserverSupport:1
//io.reactivex.rxjava3.internal.observers.LambdaObserver:1
//io.reactivex.rxjava3.internal.observers.QueueDrainObserver:3
//io.reactivex.rxjava3.internal.observers.ResumeSingleObserver:1
//io.reactivex.rxjava3.internal.observers.SafeMaybeObserver:1
//io.reactivex.rxjava3.internal.observers.SafeSingleObserver:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable.CompletableFromObservableObserver:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher.FromPublisherSubscriber:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle.CompletableFromSingleObserver:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableMaterialize:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorReturn:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorReturn.OnErrorReturnMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableToFlowable:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableToObservable:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableToSingle:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableUsing:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableUsing.UsingObserver:1
//io.reactivex.rxjava3.internal.operators.flowable.AbstractBackpressureThrottlingSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream:2
//io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable:1
//io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable.BlockingFlowableIterator:1
//io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest:1
//io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest.LatestSubscriberIterator:1
//io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent:1
//io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent.MostRecentSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext:1
//io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext.NextIterator:1
//io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext.NextSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableAll:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableAll.AllSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle.AllSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb.AmbCoordinator:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb.AmbInnerSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableAny:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableAny.AnySubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableAnySingle:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableAnySingle.AnySubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableAutoConnect:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferOverlappingSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferSkipSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary:4
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary.BufferBoundarySubscriber:4
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary.BufferBoundarySubscriber.BufferOpenSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary.BufferCloseSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary.BufferBoundarySubscriber:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary.BufferExactBoundarySubscriber:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferExactBoundedSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferExactUnboundedSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferSkipBoundedSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCache:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.CacheSubscription:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.Node:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect.CollectSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle.CollectSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest.CombineLatestCoordinator:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest.CombineLatestInnerSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray.ConcatArraySubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.BaseConcatMapSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.ConcatMapDelayed:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.ConcatMapImmediate:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.ConcatMapInner:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.ConcatMapSupport:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.SimpleScalarSubscription:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager.ConcatMapEagerDelayErrorSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEagerPublisher:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler.BaseConcatMapSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler.ConcatMapDelayed:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler.ConcatMapImmediate:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybe:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybe.ConcatWithSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingle:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingle.ConcatWithSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCount:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCountSingle:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.BaseEmitter:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.BufferAsyncEmitter:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.ErrorAsyncEmitter:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.LatestAsyncEmitter:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.MissingEmitter:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.NoOverflowBaseAsyncEmitter:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.SerializedEmitter:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber.DebounceInnerSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceTimedSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDefer:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize.DematerializeSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach.DetachSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct.DistinctSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally.DoFinallyConditionalSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally.DoFinallySubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach.DoOnEachConditionalSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach.DoOnEachSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybePublisher:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableError:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.MergeSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable.FlatMapCompletableMainSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe.FlatMapMaybeSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybePublisher:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle.FlatMapSingleSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSinglePublisher:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable.FlattenIterableSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromAction:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArrayConditionalSubscription:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.BaseArraySubscription:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCallable:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromFuture:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromObservable:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromObservable.SubscriberObserver:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromPublisher:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnable:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplier:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate.GeneratorSubscription:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.EvictionAction:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.GroupBySubscriber:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.GroupedUnicast:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.State:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin:5
//io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.GroupJoinSubscription:5
//io.reactivex.rxjava3.internal.operators.flowable.FlowableHide:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableHide.HideSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable.IgnoreElementsSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedTimedReplay:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapIntoIterable:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerOuter:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.ItemDelayFunction:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.ReplaySupplier:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleGenerator:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnComplete:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnError:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnNext:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.TimedReplay:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin:5
//io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin.JoinSubscription:5
//io.reactivex.rxjava3.internal.operators.flowable.FlowableJust:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe.LastSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableLift:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMap:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMap.MapConditionalSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMap.MapSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotification:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotification.MapNotificationSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMapPublisher:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterialize:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterialize.MaterializeSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe.MergeWithObserver:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe.MergeWithObserver.OtherObserver:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle.MergeWithObserver:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle.MergeWithObserver.OtherObserver:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.BaseObserveOnSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.ObserveOnConditionalSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.ObserveOnSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer.BackpressureBufferSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy.OnBackpressureBufferStrategySubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureError:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureError.BackpressureErrorSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest.BackpressureLatestSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduceWith:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduceWith.BackpressureReduceWithSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorComplete:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorComplete.OnErrorCompleteSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext.OnErrorNextSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn.OnErrorReturnSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.InnerSubscription:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.PublishConnection:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.OutputCanceller:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce.ReduceSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe.ReduceSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceSeedSingle:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceSeedSingle.ReduceSeedObserver:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceWithSingle:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.RefCountSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat.RepeatSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen.RepeatWhenSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen.WhenReceiver:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen.WhenSourceSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.BoundedReplayBuffer:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.InnerSubscription:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.MulticastFlowable:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayBuffer:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayBufferSupplier:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplaySubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ScheduledReplayBufferSupplier:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeAndTimeBoundReplayBuffer:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate.RetryBiSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate.RetrySubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SampleMainEmitLast:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SampleMainNoLast:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplerSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed.SampleTimedEmitLast:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed.SampleTimedNoLast:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed.SampleTimedSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMap.ScalarXMapFlowable:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableScan:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableScan.ScanSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual.EqualCoordinator:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual.EqualSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle.EqualCoordinator:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSerialized:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle.SingleElementSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip.SkipSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast.SkipLastSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimed:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimed.SkipLastTimedSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil.SkipUntilMainSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile.SkipWhileSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn.SubscribeOnSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty.SwitchIfEmptySubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap.SwitchMapInnerSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap.SwitchMapSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTake:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTake.TakeSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast.TakeLastSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOne:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOne.TakeLastOneSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed.TakeLastTimedSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakePublisher:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil.TakeUntilMainSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile.TakeWhileSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed.DebounceTimedSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest.ThrottleLatestSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeInterval:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeInterval.TimeIntervalSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout.TimeoutFallbackSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout.TimeoutSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutFallbackSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableToList:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableToList.ToListSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableToListSingle:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableToListSingle.ToListSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn.UnsubscribeSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing.UsingSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.WindowExactSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.WindowOverlapSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.WindowSkipSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryInnerSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector.WindowBoundaryMainSubscriber:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector.WindowBoundaryMainSubscriber.WindowEndSubscriberIntercept:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector.WindowBoundaryMainSubscriber.WindowStartItem:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector.WindowBoundaryMainSubscriber.WindowStartSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowSubscribeIntercept:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.AbstractWindowSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.WindowExactBoundedSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.WindowExactUnboundedSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.WindowSkipSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFrom:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFrom.WithLatestFromSubscriber:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany.WithLatestFromSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableZip:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipCoordinator:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable.ZipIterableSubscriber:3
//io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb.AmbMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeCache:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.CacheDisposable:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray.ConcatMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError.ConcatMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable.ConcatMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeContains:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeCount:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDefer:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.OtherSubscriber:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher.DelayMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher.OtherSubscriber:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable.DelayWithMainObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable.OtherObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerialize:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerialize.DematerializeObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess.DoAfterObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinally:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinally.DoFinallyObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEvent:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEvent.DoOnEventMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnLifecycle:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnLifecycle.MaybeLifecycleObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle.EqualCoordinator:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle.EqualObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeError:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeErrorCallable:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter.FilterMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle.FilterMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelector:3
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelector.FlatMapBiMainObserver:3
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelector.FlatMapBiMainObserver.InnerObserver:3
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable.FlatMapCompletableObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable.FlatMapIterableObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle.FlatMapMaybeObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle.FlatMapSingleObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFromAction:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallable:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable.FromCompletableObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFuture:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnable:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle.FromSingleObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSupplier:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeHide:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeHide.HideMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElement:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElement.IgnoreMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable.IgnoreMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty.IsEmptyMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle.IsEmptyMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeJust:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeLift:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeMap:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeMap.MapMaybeObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterialize:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray.ClqSimpleQueue:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray.MergeMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray.MpscFillOnceSimpleQueue:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray.SimpleQueueWithConsumerIndex:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete.OnErrorCompleteMultiObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext.OnErrorNextMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext.OnErrorNextMaybeObserver.NextMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn.OnErrorReturnMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybePeek:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybePeek.MaybePeekObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn.SubscribeOnMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn.SubscribeTask:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty.SwitchIfEmptyMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty.SwitchIfEmptyMaybeObserver.OtherMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle.SwitchIfEmptyMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle.SwitchIfEmptyMaybeObserver.OtherSingleObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval.TimeIntervalMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutOtherMaybeObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutFallbackMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutOtherMaybeObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeToFlowable:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeToFlowable.MaybeToFlowableSubscriber:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeToObservable:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeToObservable.MaybeToObservableObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle.ToSingleMaybeSubscriber:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsafeCreate:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn.UnsubscribeOnMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterable:2
//io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservable:1
//io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservable.AndThenObservableObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher:1
//io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher.AndThenPublisherSubscriber:1
//io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber:1
//io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable:1
//io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable.ConcatMapCompletableObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe:2
//io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber:2
//io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybePublisher:2
//io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle:2
//io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle.ConcatMapSingleSubscriber:2
//io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle.ConcatMapSingleSubscriber.ConcatMapSingleObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSinglePublisher:2
//io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable:1
//io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletablePublisher:1
//io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe:2
//io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber:2
//io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybePublisher:2
//io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle:2
//io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle.SwitchMapSingleSubscriber:2
//io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle.SwitchMapSingleSubscriber.SwitchMapSingleObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSinglePublisher:2
//io.reactivex.rxjava3.internal.operators.mixed.MaterializeSingleObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable:2
//io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable.FlatMapObserver:2
//io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher:2
//io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher.FlatMapPublisherSubscriber:2
//io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable:1
//io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable.ConcatMapCompletableObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe:2
//io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe.ConcatMapMaybeMainObserver:2
//io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe.ConcatMapMaybeMainObserver.ConcatMapMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle:2
//io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle.ConcatMapSingleMainObserver:2
//io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle.ConcatMapSingleMainObserver.ConcatMapSingleObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable:1
//io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe:2
//io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver:2
//io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver.SwitchMapMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle:2
//io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle.SwitchMapSingleMainObserver:2
//io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle.SwitchMapSingleMainObserver.SwitchMapSingleObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable:2
//io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable.FlatMapObserver:2
//io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream:2
//io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable:1
//io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable.BlockingObservableIterator:1
//io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest:1
//io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest.BlockingObservableLatestIterator:1
//io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecent:1
//io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecent.MostRecentObserver:1
//io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext:1
//io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext.NextIterator:1
//io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext.NextObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableAll:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableAll.AllObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle.AllObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableAmb:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableAny:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableAny.AnyObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle.AnyObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableAutoConnect:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer.BufferExactObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer.BufferSkipObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary:4
//io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary.BufferBoundaryObserver:4
//io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary.BufferBoundaryObserver.BufferOpenObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary.BufferCloseObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferBoundaryObserver:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed.BufferExactBoundedObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed.BufferExactUnboundedObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed.BufferSkipBoundedObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableCache:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableCache.CacheDisposable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableCache.Node:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableCollect:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest.CombinerObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest.LatestCoordinator:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap.ConcatMapDelayErrorObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap.ConcatMapDelayErrorObserver.DelayErrorInnerObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap.SourceObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap.SourceObserver.InnerObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler.ConcatMapDelayErrorObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler.ConcatMapDelayErrorObserver.DelayErrorInnerObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler.ConcatMapObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler.ConcatMapObserver.InnerObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletable.ConcatWithObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe.ConcatWithObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle.ConcatWithObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableCount:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableCountSingle:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableCreate:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableCreate.CreateEmitter:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableCreate.SerializedEmitter:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce.DebounceObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce.DebounceObserver.DebounceInnerObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTimed:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTimed.DebounceEmitter:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTimed.DebounceTimedObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDefer:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDelay:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOther:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize.DematerializeObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableDetach:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDetach.DetachObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged.DistinctUntilChangedObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext.DoAfterObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinally:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinally.DoFinallyObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach.DoOnEachObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnLifecycle:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe.ElementAtObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle.ElementAtObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableError:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFilter:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFilter.FilterObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap.InnerObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap.MergeObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable.FlatMapCompletableMainObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable.FlatMapCompletableMainObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe.FlatMapMaybeObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromAction:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletable.FromCompletableObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromFuture:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable.FromIterableDisposable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromPublisher:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromPublisher.PublisherSubscriber:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromRunnable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplier:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromUnsafeSource:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate.GeneratorDisposable:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.GroupByObserver:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.GroupedUnicast:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.State:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin:5
//io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.GroupJoinDisposable:5
//io.reactivex.rxjava3.internal.operators.observable.ObservableHide:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableHide.HideDisposable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElements:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElements.IgnoreObservable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable.IgnoreObservable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedTimedReplaySupplier:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapIntoIterable:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerInner:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ObserverOnComplete:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ObserverOnError:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ObserverOnNext:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ReplaySupplier:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.SimpleBiGenerator:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.SimpleGenerator:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.TimedReplayCallable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableJoin:5
//io.reactivex.rxjava3.internal.operators.observable.ObservableJoin.JoinDisposable:5
//io.reactivex.rxjava3.internal.operators.observable.ObservableJust:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe.LastObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle.LastObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableLift:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableMap:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableMap.MapObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification.MapNotificationObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableMaterialize:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableMaterialize.MaterializeObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletable.MergeWithObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe.MergeWithObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe.MergeWithObserver.OtherObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle.MergeWithObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle.MergeWithObserver.OtherObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn.ObserveOnObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorComplete:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorComplete.OnErrorCompleteObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext.OnErrorNextObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturn:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturn.OnErrorReturnObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservablePublish:1
//io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.InnerDisposable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.PublishConnection:1
//io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector:2
//io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.TargetObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe.ReduceObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle.ReduceSeedObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefCountObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRepeat:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRepeat.RepeatObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil.RepeatUntilObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen.RepeatWhenObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.BoundedReplayBuffer:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.BufferSupplier:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.DisposeConsumer:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.InnerDisposable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.MulticastReplay:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBuffer:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplaySource:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ScheduledReplaySupplier:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.SizeAndTimeBoundReplayBuffer:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.SizeBoundReplayBuffer:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.UnboundedReplayBuffer:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen.RepeatWhenObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed.SampleTimedEmitLast:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed.SampleTimedNoLast:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed.SampleTimedObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable.SampleMainEmitLast:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable.SampleMainNoLast:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable.SampleMainObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable.SamplerObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap.ScalarDisposable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap.ScalarXMapObservable:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableScan:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed.ScanSeedObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual.EqualCoordinator:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual.EqualObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle.EqualCoordinator:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle.EqualObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSerialized:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe.SingleElementObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle.SingleElementObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSkip:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSkip.SkipObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLast:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLast.SkipLastObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimed:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimed.SkipLastTimedObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil.SkipUntilObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhile:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhile.SkipWhileObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn.SubscribeOnObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty.SwitchIfEmptyObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableTake:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTake.TakeObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast.TakeLastObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne.TakeLastOneObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimed:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimed.TakeLastTimedObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile.TakeWhileObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest.ThrottleLatestObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval.TimeIntervalObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout.TimeoutFallbackObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout.TimeoutObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutFallbackObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableToList:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableToList.ToListObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle.ToListObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableUsing:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindow:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindow.WindowExactObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindow.WindowSkipObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryInnerObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryMainObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector.WindowBoundaryMainObserver:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector.WindowBoundaryMainObserver.WindowEndObserverIntercept:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector.WindowBoundaryMainObserver.WindowStartItem:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector.WindowBoundaryMainObserver.WindowStartObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowSubscribeIntercept:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.AbstractWindowObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.WindowExactBoundedObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.WindowExactUnboundedObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.WindowSkipObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom.WithLatestFromObserver:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany.WithLatestFromObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableZip:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableZip.ZipCoordinator:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableZip.ZipObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable.ZipIterableObserver:3
//io.reactivex.rxjava3.internal.operators.observable.ObserverResourceWrapper:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect.ParallelCollectSubscriber:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelConcatMap:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry.ParallelDoOnNextConditionalSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry.ParallelDoOnNextSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMapIterable:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFromArray:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinInnerSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscription:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionDelayError:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelMap:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelMap.ParallelMapConditionalSubscriber:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelMap.ParallelMapSubscriber:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry.ParallelMapTryConditionalSubscriber:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry.ParallelMapTrySubscriber:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek.ParallelPeekSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelReduce:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelReduce.ParallelReduceSubscriber:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullInnerSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.SlotPair:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin.SortedJoinInnerSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin.SortedJoinSubscription:1
//io.reactivex.rxjava3.internal.operators.single.SingleAmb:1
//io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleCache:1
//io.reactivex.rxjava3.internal.operators.single.SingleCache.CacheDisposable:1
//io.reactivex.rxjava3.internal.operators.single.SingleContains:1
//io.reactivex.rxjava3.internal.operators.single.SingleCreate:1
//io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter:1
//io.reactivex.rxjava3.internal.operators.single.SingleDefer:1
//io.reactivex.rxjava3.internal.operators.single.SingleDelay:1
//io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable:1
//io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable.OtherObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable:2
//io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable.OtherSubscriber:2
//io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher:2
//io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher.OtherSubscriber:2
//io.reactivex.rxjava3.internal.operators.single.SingleDelayWithSingle:2
//io.reactivex.rxjava3.internal.operators.single.SingleDelayWithSingle.OtherObserver:2
//io.reactivex.rxjava3.internal.operators.single.SingleDematerialize:2
//io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver:2
//io.reactivex.rxjava3.internal.operators.single.SingleDetach:1
//io.reactivex.rxjava3.internal.operators.single.SingleDetach.DetachSingleObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccess:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccess.DoAfterObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminate:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminate.DoAfterTerminateObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoFinally:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoFinally.DoFinallyObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoOnDispose:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoOnDispose.DoOnDisposeObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoOnError:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoOnLifecycle:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoOnLifecycle.SingleLifecycleObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoOnSubscribe:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoOnSubscribe.DoOnSubscribeSingleObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate:1
//io.reactivex.rxjava3.internal.operators.single.SingleEquals:1
//io.reactivex.rxjava3.internal.operators.single.SingleEquals.InnerObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleError:1
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMap:2
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMap.SingleFlatMapCallback:2
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMap.SingleFlatMapCallback.FlatMapSingleObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelector:3
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelector.FlatMapBiMainObserver:3
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelector.FlatMapBiMainObserver.InnerObserver:3
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable:1
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable.FlatMapCompletableObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable:2
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver:2
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable:2
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable.FlatMapIterableObserver:2
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe:2
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe.FlatMapMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe.FlatMapSingleObserver:2
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapNotification:2
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapNotification.FlatMapSingleObserver:2
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher:2
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver:2
//io.reactivex.rxjava3.internal.operators.single.SingleFromCallable:1
//io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher:1
//io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher.ToSingleObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleFromSupplier:1
//io.reactivex.rxjava3.internal.operators.single.SingleFromUnsafeSource:1
//io.reactivex.rxjava3.internal.operators.single.SingleHide:1
//io.reactivex.rxjava3.internal.operators.single.SingleHide.HideSingleObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterable:1
//io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator:1
//io.reactivex.rxjava3.internal.operators.single.SingleJust:1
//io.reactivex.rxjava3.internal.operators.single.SingleLift:2
//io.reactivex.rxjava3.internal.operators.single.SingleMap:2
//io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver:2
//io.reactivex.rxjava3.internal.operators.single.SingleMaterialize:1
//io.reactivex.rxjava3.internal.operators.single.SingleObserveOn:1
//io.reactivex.rxjava3.internal.operators.single.SingleObserveOn.ObserveOnSingleObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleOnErrorComplete:1
//io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn:1
//io.reactivex.rxjava3.internal.operators.single.SingleResumeNext:1
//io.reactivex.rxjava3.internal.operators.single.SingleResumeNext.ResumeMainSingleObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleSubscribeOn:1
//io.reactivex.rxjava3.internal.operators.single.SingleSubscribeOn.SubscribeOnObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil:2
//io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval:1
//io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval.TimeIntervalSingleObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleTimeout:1
//io.reactivex.rxjava3.internal.operators.single.SingleTimeout.TimeoutMainObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleTimeout.TimeoutMainObserver.TimeoutFallbackObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleToFlowable:1
//io.reactivex.rxjava3.internal.operators.single.SingleToFlowable.SingleToFlowableObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleToObservable:1
//io.reactivex.rxjava3.internal.operators.single.SingleToObservable.SingleToObservableObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn:1
//io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn.UnsubscribeOnSingleObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleUsing:2
//io.reactivex.rxjava3.internal.operators.single.SingleUsing.UsingSingleObserver:2
//io.reactivex.rxjava3.internal.operators.single.SingleZipArray:2
//io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipCoordinator:2
//io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleZipIterable:2
//io.reactivex.rxjava3.internal.queue.MpscLinkedQueue:1
//io.reactivex.rxjava3.internal.queue.MpscLinkedQueue.LinkedQueueNode:1
//io.reactivex.rxjava3.internal.queue.SpscArrayQueue:1
//io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue:1
//io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber:2
//io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber:2
//io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber:1
//io.reactivex.rxjava3.internal.subscribers.BlockingFirstSubscriber:1
//io.reactivex.rxjava3.internal.subscribers.BlockingLastSubscriber:1
//io.reactivex.rxjava3.internal.subscribers.BlockingSubscriber:1
//io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber:1
//io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriber:2
//io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber:1
//io.reactivex.rxjava3.internal.subscribers.FutureSubscriber:1
//io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber:1
//io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriberSupport:1
//io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber:1
//io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber:3
//io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber:2
//io.reactivex.rxjava3.internal.subscribers.StrictSubscriber:1
//io.reactivex.rxjava3.internal.subscribers.SubscriberResourceWrapper:1
//io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription:1
//io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription:1
//io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription:1
//io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription:1
//io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList:1
//io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList.NonThrowingPredicate:1
//io.reactivex.rxjava3.internal.util.MergerBiFunction:1
//io.reactivex.rxjava3.internal.util.ObservableQueueDrain:2
//io.reactivex.rxjava3.internal.util.OpenHashSet:1
//io.reactivex.rxjava3.internal.util.QueueDrain:2
//io.reactivex.rxjava3.internal.util.SorterFunction:1
//io.reactivex.rxjava3.internal.util.VolatileSizeArrayList:1
//io.reactivex.rxjava3.observables.ConnectableObservable:1
//io.reactivex.rxjava3.observables.GroupedObservable:2
//io.reactivex.rxjava3.observers.BaseTestConsumer:2
//io.reactivex.rxjava3.observers.DefaultObserver:1
//io.reactivex.rxjava3.observers.DisposableMaybeObserver:1
//io.reactivex.rxjava3.observers.DisposableObserver:1
//io.reactivex.rxjava3.observers.DisposableSingleObserver:1
//io.reactivex.rxjava3.observers.ResourceMaybeObserver:1
//io.reactivex.rxjava3.observers.ResourceObserver:1
//io.reactivex.rxjava3.observers.ResourceSingleObserver:1
//io.reactivex.rxjava3.observers.SafeObserver:1
//io.reactivex.rxjava3.observers.SerializedObserver:1
//io.reactivex.rxjava3.observers.TestObserver:1
//io.reactivex.rxjava3.parallel.ParallelFlowable:1
//io.reactivex.rxjava3.parallel.ParallelFlowableConverter:2
//io.reactivex.rxjava3.parallel.ParallelTransformer:2
//io.reactivex.rxjava3.processors.AsyncProcessor:1
//io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription:1
//io.reactivex.rxjava3.processors.BehaviorProcessor:1
//io.reactivex.rxjava3.processors.BehaviorProcessor.BehaviorSubscription:1
//io.reactivex.rxjava3.processors.FlowableProcessor:1
//io.reactivex.rxjava3.processors.MulticastProcessor:1
//io.reactivex.rxjava3.processors.MulticastProcessor.MulticastSubscription:1
//io.reactivex.rxjava3.processors.PublishProcessor:1
//io.reactivex.rxjava3.processors.PublishProcessor.PublishSubscription:1
//io.reactivex.rxjava3.processors.ReplayProcessor:1
//io.reactivex.rxjava3.processors.ReplayProcessor.Node:1
//io.reactivex.rxjava3.processors.ReplayProcessor.ReplayBuffer:1
//io.reactivex.rxjava3.processors.ReplayProcessor.ReplaySubscription:1
//io.reactivex.rxjava3.processors.ReplayProcessor.SizeAndTimeBoundReplayBuffer:1
//io.reactivex.rxjava3.processors.ReplayProcessor.SizeBoundReplayBuffer:1
//io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode:1
//io.reactivex.rxjava3.processors.ReplayProcessor.UnboundedReplayBuffer:1
//io.reactivex.rxjava3.processors.SerializedProcessor:1
//io.reactivex.rxjava3.processors.UnicastProcessor:1
//io.reactivex.rxjava3.schedulers.Timed:1
//io.reactivex.rxjava3.subjects.AsyncSubject:1
//io.reactivex.rxjava3.subjects.AsyncSubject.AsyncDisposable:1
//io.reactivex.rxjava3.subjects.BehaviorSubject:1
//io.reactivex.rxjava3.subjects.BehaviorSubject.BehaviorDisposable:1
//io.reactivex.rxjava3.subjects.MaybeSubject:1
//io.reactivex.rxjava3.subjects.MaybeSubject.MaybeDisposable:1
//io.reactivex.rxjava3.subjects.PublishSubject:1
//io.reactivex.rxjava3.subjects.PublishSubject.PublishDisposable:1
//io.reactivex.rxjava3.subjects.ReplaySubject:1
//io.reactivex.rxjava3.subjects.ReplaySubject.Node:1
//io.reactivex.rxjava3.subjects.ReplaySubject.ReplayBuffer:1
//io.reactivex.rxjava3.subjects.ReplaySubject.ReplayDisposable:1
//io.reactivex.rxjava3.subjects.ReplaySubject.SizeAndTimeBoundReplayBuffer:1
//io.reactivex.rxjava3.subjects.ReplaySubject.SizeBoundReplayBuffer:1
//io.reactivex.rxjava3.subjects.ReplaySubject.TimedNode:1
//io.reactivex.rxjava3.subjects.ReplaySubject.UnboundedReplayBuffer:1
//io.reactivex.rxjava3.subjects.SerializedSubject:1
//io.reactivex.rxjava3.subjects.SingleSubject:1
//io.reactivex.rxjava3.subjects.SingleSubject.SingleDisposable:1
//io.reactivex.rxjava3.subjects.Subject:1
//io.reactivex.rxjava3.subjects.UnicastSubject:1
//io.reactivex.rxjava3.subscribers.DefaultSubscriber:1
//io.reactivex.rxjava3.subscribers.DisposableSubscriber:1
//io.reactivex.rxjava3.subscribers.ResourceSubscriber:1
//io.reactivex.rxjava3.subscribers.SafeSubscriber:1
//io.reactivex.rxjava3.subscribers.SerializedSubscriber:1
//io.reactivex.rxjava3.subscribers.TestSubscriber:1
